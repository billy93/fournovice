//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.37;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.37] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags and Troop Name Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Name: Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name: Offset X:
 *   Name: Offset Y:
 *   - Offset the enemy name's position by this much.
 *   - For X: Negative goes left. Positive goes right.
 *   - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Always Visible:
 *   - Determines if the enemy name will always be visible.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\"","DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]"}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"1","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameFontSize:num
 * @text Name: Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 *
 * @param NameOffsetX:num
 * @text Name: Offset X
 * @parent Name
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Name: Offset Y
 * @parent Name
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAlwaysVisible:eval
 * @text Name: Always Visible
 * @parent Name
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * @default false
 *
 * @param NameAttachStateIcon:eval
 * @text Name: Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 1
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x4b7c=['isRightInputMode','_updateCursorArea','_currentAngle','show','checkShowHideSwitchNotetags','_baseY','tAKMg','jump','getInputButtonString','Scene_Battle_createActorCommandWindow','updateShadowScale','freezeFrame','jzjow','createActorCommandWindow','ReflectPlayback','_flipScaleX','isBreakStunned','setHelpWindowItem','processForcedAction','KJUGl','updateVisibility','gXfJh','updateShadowBattleCore','enemy','result','ActSeq_Horror_NoiseCreate','ScaleDown','LastSelected','PopupShiftY','ParseWeaponNotetags','_surprise','Scene_Battle_logWindowRect','blockWidth','battlerSprites','isBypassDamageCap','bitmap','statusText','CriticalHitMultiplier','setHue','ActSeq_Movement_FaceDirection','%1Damage%2JS','ShowPortraitsBorderStyle','%1StartTurnJS','toUseBoostPoints','Targets1','createKeyJS','_lastPluginCommandInterpreter','_battlerName','recoverAll','return\x200','isCommandEnabled','ActSeq_Element_AddElements','isDisplayEmergedEnemies','ATK','rTLvT','dead\x20battlers','Game_Battler_onBattleStart','UsDdC','setBattleCameraTargets','pXJMH','BackColor','changeBattlerOpacity','YESum','_colorType','setupRgbSplitImpactFilter','processEscape','hPiFp','Enemy','isEnemy','right','iVzLw','commandAutoBattle','canBattlerMove','gPaLD','actionBattleCoreJS','uOAar','clearFreezeMotion','SvMotionIdleSolo-%1-%2','setupFont','adjustPosition_ScaleToFit','SkipPartyCmd','_enemyID','tWjEa','isBusy','clearBattleCoreData','1:1','auto','note','WiZcs','TYIkS','VarianceFormulaJS','ArRedFlat','CombatLogIcon','1157NyukAg','registerCommand','_totalValue','Zwxvq','command283','Post','addBattleCoreAutoBattleStartupCommand','isMeleeSingleTargetAction','OjwOw','cztHi','eiVQf','displayHpDamage','qFEDz','skcDH','command3011','removeChild','drawItemStyleIconText','setHandler','BattleDefeatJS','ShowAddedBuff','motionType','some','playReflection','Game_Interpreter_command283','hCxCP','windowPadding','_forcedBattlers','EnableDamageCap','performReflection','FlinchDuration','Enemy-%1-%2','MAT','DPXdh','getBattlePortrait','clearFreezeMotionForWeapons','setValue','collapseType','addAutoBattleCommand','-%1','MrurG','faceWidth','_weaponSprite','isAffectedByBreakShield','requestAnimation','CzPAh','loadBitmap','uRlsY','Game_BattlerBase_addNewState','STR','initBattleCore','updateStatusWindowPosition','Window_BattleLog_performMagicEvasion','_target','XdXLa','pop','ActSeq_Mechanics_FtbAction','addAnimationSpriteToContainer','checkAutoCustomActionSequenceNotetagEffect','BtYUE','isActiveTpb','XPSpriteYLocation','autoBattleWindowRect','svBattlerName','scale','_commandNameWindow','partyCommandWindowRectBorderStyle','updateFloat','Window_BattleLog_displayCritical','OyxFi','TJrOY','checkShowHideBattleNotetags','ActSeq_Mechanics_AtbGauge','addDebuff','isCustomActionSequence','dying','_motionSpeed','zoomDuration','contents','canGuardBattleCore','setupBattlebackBattleCore','ActSeq_Mechanics_RemoveState','wRYSz','displayStartMessages','battleStatusWindowAnimationContainer','addTextToCombatLog','MotionIdle','alive\x20friends\x20not\x20user','OverallFormulaJS','casting','clearMotion','autoMeleeSingleTargetActionSet','_helpWindow','repositionCancelButtonBorderStyle','Scene_Battle_windowAreaHeight','placeTimeGauge','JS\x20%1START\x20BATTLE','setupTextPopup','eHXBf','OffsetAdjust','ShowEnemyGauge','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','cXrAX','loadEnemy','StyleOFF','actor','displayMiss','qpoOg','spinBattler','_enemies','JS\x20BATTLE\x20DEFEAT','getMenuImage','_opacityEasing','Game_Actor_equips','AGI','Sprite_Enemy_loadBitmap','Targets2','isSceneBattle','ActionSequence','HpGauge','Game_Party_removeActor','CalcEscapeRatioJS','PrioritySortActors','Scene_Battle_createPartyCommandWindow','setupShockwaveImpactFilter','loadBattleback1','ParseSkillNotetags','Victory','chYKs','stbGainInstant','%1RegenerateJS','TpGaugeOffsetY','bFjsI','ActSeq_Set_FinishAction','canAddSkillCommand','isAlive','message1','_weather','drawItemStatus','vFjSB','ActSeq_Horror_NoiseRemove','isOkEnabled','dPdZb','animationWait','effect','PopupPosition','lvUIt','Sprite_Enemy_updateCollapse','filterArea','setHome','vfPMr','ActSeq_Movement_Float','occasion','JS\x20BATTLE\x20VICTORY','textWidth','BTestBypass','useItem','pow','qWAOz','BattleManager_updatePhase','XdKPI','updateBitmap','arRedRate','setActiveWeaponSlot','move','JS\x20%1START\x20TURN','NextTurn','processPostBattleCommonEvents','getAttackMotion','processVictory','eMhkg','putActiveBattlerOnTop','getNextSubject','process_VisuMZ_BattleCore_Notetags','oQFAU','hrnip','_svBattlerData','Scene_Battle_selectNextCommand','attachSpritesToDistortionSprite','ForceExploited','Point','open','_allTargets','displayMpDamage','swing','_list','SwitchCritical','qGvBR','WkXCf','timeScale','isAnyoneJumping','battleback1Name','displayReflection','getStypeIdWithName','nqUqQ','_floatWholeDuration','ActSeq_Element_Clear','getNextSubjectFromPool','DDmmh','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','waitForAnimation','ActSeq_Mechanics_ArmorPenetration','onJumpEnd','PopupDuration','walk','mzWKo','switchToWeaponType','backColor','performCollapse','ActSeq_Zoom_Scale','ihqfx','Radius','pUMIC','JS\x20%1APPLY\x20%2','setBattleAngle','Game_Enemy_setup','IconSet','qsaGD','DtQJb','_subject','NameFontSize','aYmQi','ForceRandom','onEncounter','updateBossCollapse','Sprite_Actor_updateFrame','isBattleCoreTargetScope','PreRegenerateJS','Linear','MDF','setBattlerFacePoint','isSkewing','startInput','emerge','bgType','Immortal','HUZyh','textSizeEx','_duration','_growX','Window_BattleStatus_drawItemImage','Game_Interpreter_PluginCommand','zjdRq','ActSeq_Target_PrevTarget','CastMagical','isAnyoneSpinning','VisuMZ_2_WeaponSwapSystem','VisuMZ_3_ActSeqProjectiles','AnchorY','NameLegacy','RTnMe','constructor','visualHpGauge','7UnQmMn','BattleStartEvent','Mechanics','snapForBackground','hue','PreStartTurnJS','RcQzQ','_immortal','QuTaG','_battlerHue','BattleLog','getAttackWeaponAnimationId','_skewY','createMainSprite','addPartyCommand','requestMotionRefresh','Game_Troop_setup','Damage','_animationSprites','hbDCm','actionSplicePoint','playCancel','_preBattleCommonEvent','Scene_Battle_startActorSelection','finishActionSet','okTargetSelectionVisibility','clear','uMcZB','BMOuh','getColor','updateBorderSprite','Game_Actor_makeActionList','changeTurnOrderByCTB','displayAddedStates','not\x20focus','_index','updateHpGaugePosition','revealNewWeaknesses','addOptionsCommand','CopyCombatLog','jtzyc','isTickBased','alive\x20enemies\x20not\x20user','ActSeq_Weapon_ClearActiveWeapon','displayReflectionPlayBack','aliveMembers','QanZp','Ulstu','VisuMZ_3_BoostAction','SsQJu','AivuJ','cancelTargetSelectionVisibility','isConfused','displayFailure','cZyNV','getBattlePortraitOffsetX','alive\x20actors','addedBuffs','Game_Action_needsSelection','addSingleSkillCommand','_reflectionTarget','changePaintOpacity','process_VisuMZ_BattleCore_Action_Notetags','adjustWeaponSpriteOffset','BattleCmdList','Zqudh','QxhLt','CounterPlayback','callNextMethod','mhp','actorCommandAutoBattle','push','SkewY','BattleLayout','startWeaponAnimation','resCA','bind','anchorY','ActSeq_Movement_WaitForSkew','ActSeq_Impact_ZoomBlurPoint','physical','AupoR','isAutoBattle','processDefeat','displayType','IphZU','missle','GAInd','_shadowScale','FLPDl','mkmaw','kvWAO','HelpOptions','pages','jyOrR','aKmVd','_angleRevertOnFinish','ParseAllNotetags','setMoveEasingType','getAttackMotionSlot','makeActions','arPenRate','resetFontSettings','_actorWindow','_targetOpacity','lWoIr','onMoveEnd','startFloat','waitForFloat','clearRect','CastPhysical','udJYM','BattleManager_processVictory','ActSeq_Animation_ActionAnimation','Window_BattleLog_pushBaseLine','createBorderStylePortraitSprite','AsXri','Game_System_initialize','battleUIOffsetY','WaitForAnimation','isPartyCommandWindowDisabled','StepDistanceX','createAttachmentSprites','currentClass','ypqDl','logWindowRect','partyCommandWindowRect','onEscapeSuccess','PopupOffsetX','hitRate','createBattleUIOffsetY','268939weEdht','RVXoq','clearActiveWeaponSet','Wevjy','WaitForZoom','setAttack','YCbyT','placeGauge','_isBattlerFlipped','command301','HLaKb','ScaleUp','VnQVv','mpsqC','ActSeq_Animation_AttackAnimation2','cvImc','BattleManager_cancelActorInput','CommandWidth','_backAttachmentSprite','miCgh','gaugeLineHeight','softDamageCapRate','cqLKS','noSimilarSTypes','createJS','battlelog','battlerShadowScale','ParseEnemyNotetags','updateOpacity','qSikY','isHiddenSkill','BattleManager_startAction','YlTGM','onSkewEnd','transform','MotionAni','Game_Interpreter_updateWaitMode','battleAngle','attackStates','performActionEndMembers','turnOrderChangeOTB','speed','Window_PartyCommand_initialize','showEnemyAttackAnimation','applyTargetFilters','requestRefresh','partyCommandWindowRectXPStyle','WNrtX','_targetSkewY','mBtyC','showPortraits','stepForward','sortEnemies','charged','getLastPluginCommandInterpreter','applySoftDamageCap','battleCommandIcon','MpGaugeOffsetX','criticalDmgFlat','EscapeSuccessJS','Actions','PreEndBattleJS','isBattlerGrounded','+%1','vUKjK','gbMod','setHelpWindow','JumpToLabel','delay','format','PrioritySortActive','addBattleCoreAutoBattleStyleCommand','baEgN','dfNDv','PiPIT','HhNlo','cyhVQ','createAutoBattleWindow','updateInterpreter','_checkOn','ArPenFlat','ttSAv','ActSeq_Motion_WaitMotionFrame','WdJFB','_motionType','battleGrow','Turns','setActiveWeaponSet','mafIJ','EasingType','startGrow','AWErO','_mainSprite','createPartyCommandWindowBattleCore','statusWindowRectDefaultStyle','isMoving','adjustPosition_ScaleUp','isStateResist','actionEffect','QxcOF','Sprite_Actor_moveToStartPosition','VisuMZ_3_ActSeqCamera','updateSkew','Scene_Battle_helpWindowRect','isEffecting','XsXmk','TLfsM','updateStateIconSprite','AutoMeleeSolo','Game_Enemy_transform','type','playEnemyAttack','mpHealingFmt','spriteId','tTZxb','iYCbs','BattleManager_startInput','Sprite_Enemy_update','_skillIDs','mainSpriteScaleY','kipqc','xfoXU','updatePositionBattleCore','playEnemyDamage','isPreviousSceneBattleTransitionable','rHppp','ActSeq_Motion_ClearFreezeFrame','JS\x20%1END\x20ACTION','isAutoBattleCommandAdded','Window_Options_statusText','Scene_Battle_itemWindowRect','ShowFailure','startMove','refreshBattlerMotions','setSTBExploited','displayItemMessage','match','abs','processActorCommandCancelTPB','spell','ActSeq_Mechanics_WaitForEffect','Direction','VisuMZ_1_SkillsStatesCore','PostStartTurnJS','jDNGz','itemHit','_borderPortraitDuration','MaxLines','mUCzb','updateJump','showAnimation','innerHeight','randomTargets','onFloatEnd','PNNBQ','_iconIndex','XCgJJ','IMgAT','getNextDamagePopup','updateBorderStyle','Class-%1-%2','AutoBattleMsg','deadMembers','ActSeq_Movement_WaitForOpacity','drain','isGrowing','DistanceAdjust','refreshCursor','opacityStart','start','gLoYV','Game_Action_itemEffectAddAttackState','PostEndBattleJS','Window_BattleLog_displayEvasion','cVomw','pushBaseLine','currentAction','performMagicEvasion','_wtypeIDs','placeStateIcon','prepareCustomActionSequence','ActSeq_Camera_Clamp','evaded','alive\x20actors\x20not\x20user','ActSeq_Projectile_Icon','PerformAction','makeActionListAutoAttack','criticalHitRate','commandName','damage','ActSeq_Mechanics_CtbOrder','515955cfjcly','drawBackgroundRect','animationBaseDelay','isTriggered','_targetAngle','Pre','PreStartActionJS','bitmapWidth','EmgWf','OIrjw','Debuffs','makeTargetSelectionMoreVisible','callOkHandler','cameraClamp','commandStyle','addSkillTypeCommand','default','ActSeq_Movement_WaitForFloat','split','fggKD','processBattleCoreJS','origin','updateAttachedSprites','VisuMZ_2_BattleSystemSTB','replace','removeBuff','measureTextWidth','mDrgk','fFuBA','getWtypeIdWithName','parseForcedGameTroopSettingsBattleCore','Game_BattlerBase_isStateResist','_battleCoreBattleStartEvent','\x5cI[%1]%2','battleEffect','ActSeq_Motion_MotionType','MotionSpeed','isActing','mpDamage','itemLineRect','helpWindowRect','zVsSc','formula','ParseActorNotetags','_enemyNameContainer','addSkillCommands','LMidi','BoostPoints','%1EndActionJS','WaitForScale','yjRvs','PGDBv','VisuMZ_2_HorrorEffects','HbaSB','States','MdEcv','removeState','WaitForOpacity','MotionType','QfZma','svBattlerAnchorX','HelpItem','PartyCmd','Parse_Notetags_Targets','unshift','BattleManager_onEncounter','EYrqj','_forcing','ParseItemNotetags','hUgJU','HitFlat','HelpFight','QACyf','_interpreter','alive\x20opponents\x20not\x20target','_emptyBitmap','kziJe','displayActionResults','ConfigManager_makeData','TlIDY','dnryO','SkillItemStandardCols','forceAction','checkTpbInputClose','SceneManager_isSceneChanging','charging','TRUMi','dSmCT','dGHWr','anchor','getBattlePortraitFilename','WaitCount','HpGaugeOffsetY','process_VisuMZ_BattleCore_CreateRegExp','performMoveToPoint','_borderPortraitSprite','mLviZ','VeFmg','battleCorePreBattleCommonEvent','Game_BattlerBase_initMembers','Window_BattleLog_displayMiss','random','rwQxO','_angleDuration','txhup','_methods','startTurn','CheckSkillCommandShowSwitches','FaceAway','CmdIconEscape','_visualHpGauge_JustDied','motionIdle','ArRedRate','isShownOnBattlePortrait','VisuMZ_3_SideviewBattleUI','clearBattlerMotionTrailData','extraPositionY','Exploited','Parse_Notetags_Action','snqNP','WgOTS','ActSeq_BattleLog_PushBaseLine','linkSprite','hppFy','isUndecided','isSideButtonLayout','CalcEscapeRaiseJS','PostStartActionJS','Formula','setupBattleCoreData','KOPyH','Game_Party_addActor','ConvertActionSequenceTarget','vTVWB','isJumping','startJump','bitmapHeight','ScaleY','setActorHome','drawSingleSkillCost','toString','6CCxwOI','ZfWZA','CriticalDmgFlat','getItemDamageAmountTextBattleCore','zwosl','QjWwi','call','QMoXl','ShowCounter','PCwHY','refreshRequest','setImmortal','sliceMin','_battleLayoutStyle','setupWeaponAnimation','traitSet','guard','Angle','Game_Action_evalDamageFormula','displayCritical','YcpcJ','AddOption','height','StatusWindowAttachmentFrontOffsetX','_skewEasing','AnimationID','aVhki','WfINw','iDDeD','Window_BattleLog_popupDamage','magicReflection','isSideView','_effectDuration','15087ADCgKK','IconStypeMagic','%1Apply%2JS','ForceDeath','isNonSubmenuCancel','RXsbb','preemptive','battleMembers','all\x20targets','ActSeq_Motion_FreezeMotionFrame','_dragonbonesSpriteContainer','MP_Flat','battleSpriteSkew','_autoBattleWindow','itemWindowRect','JlyBf','CmdIconOptions','makeData','udLFR','attackAnimationIdSlot','cGwaL','_animationContainer','354inMJZu','isForOne','MAXMP','Game_Map_battleback2Name','maxCommands','#%1','Sprite_StateIcon_updateFrame','addChild','Sprite_Battler_setHome','xmPxR','requestMotion','isOpponent','isSpriteVisible','_svBattlerSprite','isOptionsCommandAdded','DistanceX','opacity','_frontAttachmentSprite','Window_ActorCommand_setup','list','toLowerCase','ActSeq_BattleLog_AddText','_preemptive','ShowRemovedState','repeatTargets','statusWindowRectXPStyle','ActSeq_Projectile_Picture','performCastAnimation','preparePartyRefresh','prev\x20target','selectNextCommandTpb','process_VisuMZ_BattleCore_jsFunctions','StyleON','moveToStartPositionBattleCore','ActSeq_Set_WholeActionSet','isSkipPartyCommandWindow','alive\x20enemies','AttackAnimation','createString','drawSkillCost','reserveCommonEvent','VisuMZ_1_ElementStatusCore','floor','battleDisplayText','performAction','ChargeRate','oxwkj','duration','Shadow','Sprite_Enemy_setBattler','WowFq','removeAnimation','ActionEffect','makeTargetSprites','Sprite_Enemy_updateBossCollapse','isForRandom','updateActors','ActSeq_Angle_Reset','_cancelButton','DamageStyleList','ngLiD','_updateClientArea','refreshStatusWindow','vEBhI','SHKyp','ActSeq_Mechanics_RemoveBuffDebuff','adjustFlippedBattlefield','removeImmortal','sortDamageSprites','WeaponTypeID','OffsetX','FocusX','_jumpMaxHeight','JZHnO','ActSeq_Animation_AttackAnimation','partyCommandWindowRectDefaultStyle','cAdzA','_commonEventIDs','ActSeq_Set_TargetActionSet','JS\x20ESCAPE\x20FAILURE','text\x20target','startPartyCommandSelection','autoSelectPriority','zVRwk','isMeleeMultiTargetAction','rHYSM','QjDan','performAttack','actorCommandEscape','CriticalHitFlat','itemHeight','Game_Temp_requestAnimation','ActSeq_Movement_Opacity','ipMwq','_damageContainer','Game_Action_apply','_action','_growDuration','%1EndTurnJS','inputting','fillRect','startSkew','WpSml','bblYE','registerDefeatedEnemy','ActSeq_Zoom_Reset','Sprite_Battler_isMoving','createActorCommandWindowBattleCore','isDebuffAffected','Width','_freezeMotionData','yVNMo','mvDjy','nextActiveWeaponSlot','createAllWindows','SWBbP','_phase','Scene_ItemBase_applyItem','initVisibility','windowskin','UVFJZ','currentValue','setBattlePortrait','IPvgc','FlashDuration','HzGBr','uorEE','displayBuffs','resetResultSwitches','surprise','actorCommandSingleSkill','Window_BattleLog_performActionEnd','Window_BattleLog_performSubstitute','_tempActor','Scene_Battle_startPartyCommandSelection','PreDamageAsTargetJS','updateEventMain','updateBattlerContainer','VisuMZ_2_BattleSystemATB','create','Game_BattlerBase_refresh','TargetLocation','AutoNotetag','Game_Map_battleback1Name','setHorrorEffectSettings','drawItemStyleIcon','index','dead\x20friends','ActSeq_ChangeAngle','_targetSkewX','JS\x20%1END\x20BATTLE','Scene_Battle_terminate','iconWidth','CmdStyle','dead\x20opponents','_updateCursorFilterArea','iconHeight','createStateSprite','PostApply%1JS','commandStyleCheck','_cacheTextWidth','FDpUW','createDistortionSprite','StepDistanceY','Scene_Map_initializeAfter','updateStart','JS\x20%1START\x20ACTION','startDamagePopup','min','isAnyoneFloating','anchorX','Game_Action_clear','addCommand','mmp','YAhrl','OawaX','ShowCosts','zdnne','CmdTextAlign','ChangeOrderBy','startOpacity','bossCollapse','_actor','ActSeq_Mechanics_Multipliers','AsUser','cLWTo','createDamageSprite','VXqwi','Sukii','removedStateObjects','update','BattleVictoryJS','+%1\x20MP','setCursorRect','Scene_Boot_onDatabaseLoaded','ActSeq_Target_NextTarget','DamageFlat','isCharging','_cache','applyImmortal','ztege','fight','zSVAZ','VisuMZ_2_BattleSystemOTB','destroyDamageSprite','DisablePartyCmd','addGuardCommand','battleCoreResumeLaunchBattle','UxihQ','options','createInnerPortrait','UNTITLED','battleSkew','Window_BattleLog_popBaseLine','MRbUs','isInputting','_branch','Fgfjy','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','makeTargetsBattleCore','Game_Battler_regenerateAll','AutoBattleCancel','Amp','JGnFP','code','abnormal','loadPicture','Window_BattleEnemy_show','name','SwitchMissEvade','isOpen','damageStyle','mpDamageFmt','Scene_Battle_onEnemyCancel','bguwh','commandOptions','BattleCore','createMiss','deathStateId','kIZDw','loadSvEnemy','updateCallMenu','alive\x20enemies\x20not\x20target','performRecovery','_canLose','DamageType%1','ShowTpDmg','Sprite_Battler_initMembers','_animationCount','TpbGaugeOffsetY','%1StartBattleJS','performCounter','dCdEm','_armorPenetration','nrxdf','_floatHeight','popBaseLine','active','addCustomCommands','concat','createHelpWindowBattleCore','visible','MkgnG','UUKGb','magicSkills','ActSeq_BattleLog_Clear','autoSelect','isForOpponent','createBattleFieldContainer','KplJv','isActor','refreshMotion','Opacity','_jumpDuration','gainCurrentActionsFTB','psYdY','compareBattlerSprites','adjustPosition','jtint','loadSystem','ActSeq_Animation_ShowAnimation','oiqMO','AutoBattleBgType','setBattleSkew','compatibilityVisible','Window_BattleLog_performReflection','battleZoom','maxBattleMembers','validTargets','isFastForward','alive\x20battlers','_regionBattleback2','_motionCount','mainSpriteScaleX','EVCRS','_requestRefresh','eCEIf','Scene_Map_launchBattle','dead\x20actors','ActSeq_ChangeSkew','_createEffectsContainer','HBEsi','selectNextActor','updateStyleOpacity','QoL','changeAtbCastTime','FxyHR','addAttackCommand','FlOLj','autoSelectLastSelected','drawItemStatusXPStyle','Actor','yZYki','command357','pbHyq','Spriteset_Battle_update','PostDamageAsUserJS','displayCurrentState','Scene_Battle_startActorCommandSelection','createPartyCommandWindow','PortraitScale','turnCount','JS\x20%1DAMAGE\x20%2','ceil','performTpbActiveCheckSwitch','IEkhe','isFriendly','XPActorCommandLines','BattleManager_makeActionOrders','battler','Game_Battler_clearMotion','AutoBattle','ActSeq_Projectile_Animation','cQJEX','isAnyoneChangingOpacity','itemEffectAddNormalState','isFightCommandEnabled','stepBack','popupDamage','skill','allBattleMembers','_forcedBattleLayout','setVisibleUI','createSeparateDamagePopups','Window_BattleLog_performMiss','OJSRv','findTargetSprite','destroy','dpkMv','WNtIv','Window_BattleStatus_initialize','redraw','ShowActorGauge','alive\x20battlers\x20not\x20user','CdvJz','endAction','onBattleStart','friendsUnit','weatherType','aXZGM','svAnchorY','displayTpDamage','applyDamageCaps','buffRemove','log','ext','_battler','wgVrf','WaitCount2','rnRcs','TPB','WaitForMovement','LFCDS','wholeActionSet','PreDamageJS','xKSan','IpsYT','_logWindow','_handlers','ActSeq_DB_DragonbonesMotionAni','hitFlat','process_VisuMZ_BattleCore_BaseTroops','MP_Rate','RAvfy','Scene_Battle_skillWindowRect','onEnemyOk','alive\x20friends','waitForMovement','_targetGrowX','singleSkill','evalDamageFormula','gwwwP','applyGlobalCommonEventNotetags','buffAdd','startActorSelection','_stateSprite','JS\x20ESCAPE\x20SUCCESS','ICMMR','UrbnZ','isAttack','EueRk','ActSeq_Mechanics_AddBuffDebuff','battleAnimation','forceWeaponAnimation','changeAtbChargeTime','AsTarget','ParseClassNotetags','battleCamera','AutoBattleRect','_borderPortraitTargetX','jxxWD','getItemDamageAmountTextOriginal','iconIndex','iZVJP','updateShadowPosition','hSZDA','calcWindowHeight','GBncp','qHMQv','battleCommands','AttachStateOffsetX','YwEQD','_flinched','actorCommandWindowRect','round','performEvasion','Window_Options_addGeneralOptions','_createDamageContainer','Sprite_Actor_setActorHome','makeBattleCommand','hpHealingFmt','createContents','loadBattleback2','WaitForProjectile','isHidden','addCombatLogCommand','clamp','isForOpponentBattleCore','commandNameWindowDrawText','autoBattleStart','fontSize','makeDamageValue','Slot','addedDebuffs','kotIE','Game_BattlerBase_canAttack','StatusWindowAttachmentBack','_stypeIDs','isCancelled','performSTBExploiter','bottom','_animation','_tpbSceneChangeCacheActor','pfXwN','ActSeq_Mechanics_OtbOrder','sort','JSgbF','Filename','startBattle','vlwHr','addChildAt','ActionEndUpdate','Zwybd','JSON','Sprite_Battler_update','isAnimationPlaying','PatAv','ActionStart','missed','ActSeq_Mechanics_AnalyzeWeakness','canEscape','setup','_enemyIDs','invokeAction','ARRAYJSON','removeActor','_partyCommandWindow','Weapon-%1-%2','SKILLS','VisuMZ_1_MainMenuCore','ARRAYFUNC','PreApplyAsTargetJS','ActSeq_Mechanics_BtbGain','zNZEI','wait','ActionSkillMsg2','DefaultDamageStyle','itemEffectAddAttackState','isSceneChanging','Buffs','setCustomDamageFormula','battleOpacity','WUHMo','createHpGaugeSprite','_activeWeaponSlot','setBattler','_tpbState','Scene_Battle_selectPreviousCommand','_dimmerSprite','addNewState','Parse_Notetags_TraitObjects','_createClientArea','zzHIE','forceEscapeSprite','lHgma','ActSeq_Mechanics_AddState','ActSeq_Movement_HomeReset','OHNhn','yiCHc','diyNc','krFoy','addChildToBack','ActionCount','_actionBattlers','CmdIconFight','clearBattleRefreshRequest','ShowWeapon','_offsetX','updateHelp','version','createCommandVisibleJS','swapEnemyIDs','wJLfB','PostDamage%1JS','isSkill','status','nameY','VisuMZ_4_BreakShields','fittingHeight','filter','GFmBq','ActSeq_Mechanics_SwapWeapon','Window_BattleEnemy_initialize','POzcb','Game_Action_makeTargets','skills','_enemySprites','Scale','fBBUU','_commonEventQueue','yHrTV','svBattlerData','forceMotion','isEscapeCommandEnabled','windowAreaHeight','terminate','applyCritical','TGTgA','VisuMZ_0_CoreEngine','updateFrame','_baseLineStack','isTpbMainPhase','dssAu','ScaleX','prepareBorderActor','angleDuration','VisuMZ_2_BattleSystemFTB','updateBattlebackBitmap1','text','battleJump','IJxQZ','updateForceAction','createHelpWindow','Spriteset_Battle_createLowerLayer','counterAttack','itemTextAlign','Reveal','SvBattlerMass-%1-%2','command236','OxalK','evalDamageFormulaBattleCore','Skills','ArPenRate','_createCursorSprite','message4','AutoMeleeAoE','ActSeq_Movement_FaceTarget','ActSeq_Mechanics_BoostPointsStoreData','BattleManager_processDefeat','FocusY','_flashColor','LdvHn','SkewX','updateLink','applyFreezeMotionFrames','OjFvP','updateAction','createShadowSprite','Setting','useDigitGrouping','ActSeq_Movement_WaitForSpin','commandEscape','addFightCommand','turn','_flashDuration','Window_BattleLog_performDamage','pHzRq','commandNameWindowDrawBackground','_jumpHeight','Game_BattlerBase_canGuard','_currentActor','updateCommandNameWindow','notFocusValid','setupCriticalEffect','mfAtP','mainSpriteHeight','current\x20target','HelpAutoBattle','onRegeneratePlayStateAnimation','getChildIndex','Game_Action_itemEffectAddNormalState','createChildSprite','BattleManager_initMembers','_scene','StartTurnMsg','KKlXd','PRE-','createEffectActionSet','animation','NameAttachStateIcon','startAttackWeaponAnimation','undecided','PostApplyJS','canUse','SvBattlerSolo-%1-%2','RepositionEnemies','portrait','startMotion','indexOf','skillItemWindowRectBorderStyle','clearForcedGameTroopSettingsBattleCore','jumpBattler','isImmortal','EmergeText','MotionFrameWait','ActSeq_Mechanics_Collapse','param','requestDragonbonesAnimation','GpqYn','LyfNn','DualWield','WtypeId','power','ActSeq_Weapon_SetActiveWeapon','stop','isFrameVisible','performActionEnd','hPvkx','setSkill','_linkedSprite','StartTurnWait','DamageStyles','resizeWindowXPStyle','float','PreStartBattleJS','fIOgq','isNextSceneBattleTransitionable','updateTargetPosition','updateWeather','isMagical','performFlinch','description','BattleManager_startTurn','logActionList','onEscapeFailure','_battlerContainer','ActSeq_BattleLog_WaitForBattleLog','ActSeq_Weapon_NextActiveWeapon','XXUkG','zXzai','isMagicSkill','Scene_Battle_onActorOk','requestFauxAnimation','splice','DamageDisplay','textColor','criticalDmgRate','clearElementChanges','SkillsStatesCore','_shadowSprite','EPXOG','escape','FzoTo','ActSeq_Mechanics_StbRemoveExcessActions','StatusWindowAttachmentBackOffsetY','battleEnd','MpGaugeOffsetY','BattleManager_endBattle','_autoBattle','PostStartBattleJS','Window_BattleLog_displayFailure','Scene_Battle_updateStatusWindowPosition','_shake','performDamage','waitForNewLine','displayChangedBuffs','isSpinning','endBattle','VisuMZ_3_ActSeqImpact','changeCtbCastTime','ActSeq_Impact_ShockwaveEachTargets','ddvhk','EscapeFail','_pattern','seCTS','createWeather','ActSeq_BattleLog_UI','MbWqg','iIhjA','head','frameVisible','onGrowEnd','retreat','CriticalHitRate','thrust','sideview_ui','removeStatesAuto','battleCoreTpbMainPhase','Pedst','command301_PreBattleEvent','EPfZR','weaponTypes','freezeMotion','isBattleRefreshRequested','maxCols','lineRect','dzDSv','Scene_Options_maxCommands','createStateIconSprite','Actor-%1-%2','XPActorDefaultHeight','ActSeq_Mechanics_TextPopup','VzAdB','NjnBk','statusWindowRect','rhtPW','eZhlq','focus','isGuard','removeBuffsAuto','Rate','Window_BattleLog_performCollapse','Window_ItemList_maxCols','equips','MOTIONS','tIsht','onEnemyCancel','canInput','AnchorX','jmbmy','xNMwc','makeEscapeRatio','isPlaytest','ResetOffset','RMkiR','TP_Rate','applyData','POST-','exit','StateIconOffsetY','VariableDmg','ehdAW','damageOffsetY','performJump','_callSceneOptions','Game_Action_executeDamage','isFlipped','Scene_Battle_start','SvWeaponSolo-%1-%2','_weaponImageId','chant','autoBattleStyle','centerFrontViewSprite','ActSeq_Impact_MotionTrailRemove','DVVMW','isOptionsCommandEnabled','duklU','shift','performMiss','NameOffsetX','skew','invokeMagicReflection','setupHpGaugeSprite','battleSpin','Xwbja','STRUCT','WaitForSkew','RequiresDefeat','RevertAngle','CheckMapBattleEventValid','enemyId','ActSeq_Animation_CastAnimation','Scene_Battle_createHelpWindow','isBattleFlipped','members','setFrame','startSpin','ActSeq_Mechanics_Immortal','boxHeight','_lines','canAttack','Destination','vNtqh','isPartyTpbInputtable','setupBattleback','_active','hrcnA','STYPES','addEscapeCommand','BattleManager_onEscapeFailure','callUpdateHelp','ActSeq_Mechanics_VariablePopup','FUNC','StepDuration','optDisplayTp','DefaultHardCap','JmLdL','Tabwl','_executedValue','value','skillWindowRect','ActSeq_Skew_Reset','usSpb','StyleName','CCuob','Mirror','PostApplyAsTargetJS','isDTB','APWxz','DefaultStyle','suzZq','EFFECT_COMMON_EVENT','_back1Sprite','isDead','ElementStatusCore','battleSys','AlphaFilter','Window_BattleLog_performEvasion','_battleCoreAddedElements','angle','_targetIndex','isPhysical','_damagePopupArray','Targets','_hpGaugeSprite','extraPositionX','ahAAU','DtBnr','CUMnd','Scene_Map_updateCallMenu','zTwPB','_inputting','isBattleSys','_createCursorArea','getConfigValue','StateIconOffsetX','refresh','FaceDirection','updateSpin','isForFriendBattleCore','drawText','WEAPON\x20SWAP','nVsFq','ZCPAZ','YKaPZ','drawItem','AUTO\x20BATTLE','PARTY','_battlePortrait','SlotID','VmtIe','dataId','Game_Action_isForFriend','_homeX','elWyk','damageOffsetX','actorCommandCancelTPB','_opacityDuration','allowCollapse','WaCCD','DEF','addGeneralOptions','revertTpbCachedActor','waitCount','Sprite_Battler_updateMain','ActSeq_Mechanics_CtbSpeed','commandNameWindowCenter','ActSeq_Horror_Clear','_tpbNeedsPartyCommand','isItemCommandEnabled','collapse','setWaitMode','initMembersBattleCore','DkGjB','GeZfX','unyuT','isForRandomBattleCore','hpAffected','isGuardWaiting','ARRAYNUM','_motion','eraseState','_skillWindow','HitRate','alterBreakShield','ActSeq_Mechanics_DamagePopup','applyResultSwitches','PopupShiftX','FlinchDistanceY','createTargetsJS','length','gaLiG','worldTransform','Exploiter','ActSeq_Target_CurrentIndex','59069ILlMdh','XDsSF','ActSeq_Camera_Offset','SWIhP','NHuDZ','mainSpriteWidth','isCTB','iconText','applyGlobal','createEmptyBitmap','LcRgl','setupMotionBlurImpactFilter','FwvRs','_cursorArea','_growEasing','okButtonText','makeSpeed','Window_ActorCommand_initialize','NuuJF','lmgVS','chantStyle','drawLineText','arRedFlat','makeAutoBattleActions','sIWFw','updateCancel','GroupDigits','razTi','sDeSh','isTpb','ActionEnd','drawActorFace','DTB','Sprite_Weapon_loadBitmap','Game_Battler_clearDamagePopup','needsActorInputCancel','rowSpacing','createAttachedSprites','loop','eXkbj','gainTp','Shadow2','applyArmorModifiers','SkillItemBorderCols','custom','Scene_Battle_onActorCancel','Sprite_Battleback_adjustPosition','updateRefresh','removeHorrorEffect','Window_BattleLog_update','LFHFH','isAppeared','_customDamageFormula','_offsetY','MANUAL','missile','svBattlerShadowVisible','alive\x20battlers\x20not\x20target','ActionCenteredName','displayRemovedStates','drawItemImageXPStyle','gHQWZ','makeActionOrders','rpSkp','ActSeq_Horror_GlitchCreate','width','filters','removeAnimationFromContainer','ldfwW','dead','createBattleUIOffsetX','ActSeq_Mechanics_DeathBreak','ActSeq_BattleLog_WaitForNewLine','addActor','_tempEquipCheck','_multipliers','setBattleCameraPoint','autoMeleeMultiTargetActionSet','BattleManager_selectNextCommand','ActSeq_Movement_WaitForMovement','_statusWindow','animationNextDelay','inputtingAction','Defeat','JS\x20%1REGENERATE','TextColor','%1EndBattleJS','ActSeq_Movement_Skew','apply','ShowRemovedBuff','Window_SkillList_maxCols','drawEnemyName','Game_Interpreter_terminate','string','stateMotionIndex','ApplyImmortal','QCYHL','LLHCD','onOpacityEnd','Scene_Battle_startEnemySelection','Index','vfpBJ','jXtvZ','targetActionSet','wLvQA','ShowHpDmg','StatusWindowAttachmentFront','hpDamage','FQXLQ','OffsetY','debuffAdd','BimDk','NVlRJ','COMBATLOG','showNormalAnimation','_endBattle','sWruc','oYwrp','commandFight','battleback2Name','lJqra','mjaaQ','action','NUM','addItemCommand','loadWindowskin','YmovD','makeDeepCopy','_attackAnimationId','VariableHeal','animationId','_effectType','processRefresh','icon','ActSeq_Motion_PerformAction','attackMotions','Game_Battler_performMiss','Sprite_Actor_update','ForceExploiter','mainFontSize','makeActionList','rrRXa','Scene_Battle_updateBattleProcess','isQueueOptionsMenu','critical','_actionInputIndex','trim','createEnemyNameContainer','hqhcO','ywTNN','alive\x20friends\x20not\x20target','CommandVisible','updateWaitMode','Frame','rsXhr','_skewWholeDuration','odmPr','Scene_Battle_onEnemyOk','VIbcJ','isAlwaysVisible','getEnemyIdWithName','inBattle','createActionSequenceProjectile','hardDamageCap','resetBreakShield','updateShadow','_waitMode','applyEasing','ActSeq_Impact_MotionBlurScreen','PiAnZ','_growY','ReflectAnimation','NameAlwaysVisible','uiMenuStyle','trueRandomTarget','slice','smooth','Sprite_Actor_initMembers','_appeared','PostEndTurnJS','ActorCmd','isAtbCastingState','needsSelection','refreshActorPortrait','setBackgroundType','children','ActSeq_Camera_WaitForCamera','join','repeats','Oeipw','atzDP','GkehR','Settings','HpGaugeOffsetX','Game_BattlerBase_eraseState','tUxiU','hasSvBattler','placeActorName','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','addText','isBattleMember','PostRegenerateJS','adjustPosition_1for1','frontviewSpriteY','ZktTY','process_VisuMZ_BattleCore_Failsafes','_homeY','applyHardDamageCap','removeDamageSprite','NameOffsetY','cqYKR','Sprite_Battler_damageOffsetY','ActSeq_BattleLog_DisplayAction','MQjrg','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','isBattlerFlipped','Game_Map_setupBattleback','kAKBY','ldSJm','jtZSK','lFSAe','_uiContainer','motionSpeed','addedStateObjects','close','vSjIm','setLastPluginCommandInterpreter','_effectsContainer','currentExt','AttachStateOffsetY','max','_battleCoreForcedElements','SRBmG','cancelActorInput','TP_Flat','Sprite_Battler_setBattler','isActionSelectionValid','PwwDo','commandSymbol','_indent','drawItemStatusListStyle','YWLDY','regionId','resize','zOAHo','PostEndActionJS','nGefj','addDamageSprite','contentsOpacity','Fsxxr','setBattlerBattleCore','Sprite_Battler_updatePosition','createDigits','CmdIconAutoBattle','boxWidth','_forceAction','autoBattleUseSkills','_angleEasing','WaitCount1','Style','blt','finalizeScale','performAttackSlot','gBLjr','Game_Battler_performEvasion','isFloating','helpAreaHeight','dead\x20enemies','ZCIan','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','sleep','isCustomBattleScope','VisuMZ_2_BattleSystemCTB','_text','EscapeFailureJS','tyMjj','regenerateAllBattleCore','Window_BattleLog_performRecovery','changeCtbChargeTime','extraHeight','ChantStyle','PNHym','IMfSD','ActSeq_Impact_MotionBlurTarget','canAttackBattleCore','_windowLayer','MeleeDistance','isTpbCharged','applyAngleChange','Interrupt','DefeatEvent','ActiveTpbOptionsMessage','WaitForJump','ShowMissEvasion','_escapeRatio','Sprite_Battler_startMove','updatePhase','ActSeq_Mechanics_StbExploit','addState','showHelpWindow','pyito','canUseItemCommand','attackAnimationId1','displayAction','startAction','CreateActionSequenceTargets','wtypeId','stepFlinch','top','isOnCurrentMap','GLJeF','drawTextEx','KRRmZ','ShowAddedDebuff','YPYOC','innerWidth','setBattlerFlip','CqOUP','ySkut','isTeamBased','Window_BattleLog_displayCurrentState','finishActorInput','drawItemImagePortraitStyle','HP_Flat','_item','CRNNK','gradientFillRect','PreDamage%1JS','Sprite_Enemy_updateStateSprite','Game_BattlerBase_die','_padding','TpGaugeOffsetX','bzfRG','setupDamagePopup','floatBattler','sliceMax','ActSeq_Mechanics_BoostPointsChange','executeDamage','endAnimation','statusTextAutoBattleStyle','canMove','statusWindowRectBorderStyle','isDuringNonLoopingMotion','addWeaponSwapCommand','irpXi','BARE\x20HANDS','EWyKz','svAnchorX','_floatEasing','KPNSF','border','DsJpm','tdUOs','startEnemySelection','_lineHeight','htkPj','ActSeq_BattleLog_Refresh','BattleManager_onEscapeSuccess','ZeKui','createUIContainer','aOmWU','launchBattle','_tempBattler','makeTargets','hpDamageFmt','waitForOpacity','repositionEnemiesByResolution','battleCameraData','eNbFx','AutoBattleOK','Game_Battler_makeSpeed','arPenFlat','DigitGrouping','yKnCW','updateFlip','clearHorrorEffects','MIN_SAFE_INTEGER','updateAttachmentSprites','ResetFocus','changeInputWindow','ParseStateNotetags','forceSelect','parent','3CICMUE','tpbCommandFight','moveBattlerDistance','_battleField','updateStateSpriteBattleCore','Window_BattleLog_performActionStart','AyRcV','performMoveToTargets','addAutoBattleCommands','drawItemBackground','_battleCoreBattleResumeAfter','GuardFormulaJS','_regionBattleback1','ITEM','Game_Interpreter_command301','moveToStartPosition','_stateIconSprite','FlashColor','wkwBX','_distortionSprite','_actions','ConvertParams','getSkillTypes','CmdIconItem','initBattlePortrait','clearActiveWeaponSlot','helpAreaBottom','_targetFloatHeight','onActorCancel','skillItemWindowRectMiddle','getDualWieldTimes','setSvBattlerSprite','_lastEnemy','ActSeq_Camera_FocusTarget','ConfigManager_applyData','drawItemImageListStyle','Scene_Battle_stop','battlerSmoothImage','Game_Battler_startTpbTurn','isCertainHit','svShadow','EnableSoftCap','_itemWindow','weaponImageId','WaitForAngle','createActors','stypeId','ActSeq_Movement_Scale','resizeWindowBorderStyle','isVisualHpGaugeDisplayed','setupIconTextPopup','VisuMZ_2_DragonbonesUnion','_back2Sprite','LWDwv','mwytJ','ITGDc','sBhFZ','YunnZ','map','ActSeq_Impact_ColorBreak','State-%1-%2','isTurnBased','ShowPortraits','_targetGrowY','HqloF','clearResult','qGlTe','itemRect','processRandomizedData','_opacityWholeDuration','ActSeq_Movement_MoveToPoint','isAnyoneGrowing','cancelButtonText','ActSeq_Movement_MoveToTarget','traitObjects','prototype','callOptions','autoBattle','Qteko','selectPreviousCommand','onBattleStartBattleCore','VisuMZ_2_PartySystem','_enemy','battleLayoutStyle','substitute','KnuAu','Sprite_Actor_createStateSprite','createBattleField','Game_Action_isForOpponent','isClicked','HchIG','clone','mcDdP','battleCommandName','createCommandNameWindow','krRkx','guardSkillId','updateBattlebackBitmap2','TpbActiveChangeEnabled','damageContainer','command119','processBorderActor','gOnbF','_jumpWholeDuration','isBuffAffected','_enemyWindow','hide','getSkillIdWithName','DefaultSoftCap','updatePosition','performWeaponAnimation','xJRMh','ActSeq_Impact_ShockwaveCenterTargets','updateCustomActionSequence','_damages','JKxzG','qhxRF','isAtbChargingState','lineHeight','setupMotion','QMRHp','performActionStart','ActSeq_Impact_ZoomBlurTargetCenter','performSubstitute','qwYkt','reduce','includes','ALL\x20SKILLS','checkCacheKey','createBattleFieldBattleCore','toUpperCase','remove','shadow','battleFloat','cancel','HYbVc','visibilityState','shouldPopupDamage','padding','makeCommandList','GUARD','getDamageStyle','AdjustRect','onAngleEnd','HomePosJS','nOQrr','isAnyoneMoving','message2','WaitForFloat','ARRAYSTR','drawIcon','CoreEngine','flashDuration','ActSeq_Impact_ShockwavePoint','ActSeq_DB_DragonbonesTimeScale','attackSkillId','displaySubstitute','Sprite_Actor_setBattler','tpbActorSwitchConditionsMet','isItem','ActSeq_Movement_WaitForJump','LUK','_actorCommandWindow','AIIZY','setText','addLoadListener','fjkrL','isAnimationShownOnBattlePortrait','tuRQC','selectNextCommand','drawItemImage','ActSeq_Animation_ChangeBattlePortrait','updateShadowVisibility','PhIhO','Scene_Battle_createCancelButton','uiInputPosition','_actorSprites','getHardDamageCap','pWREw','mIJqi','changeBattlebacks','_lastRegenFrameCount','isChanting','pdVbU','_speed','noise','MAXHP','weapons','scope','Window_BattleLog_displayTpDamage','isDeathStateAffected','createCancelButton','isBattleTest','isNextScene','PCieh','Text','setupZoomBlurImpactFilter','AjqdY','175149wmRVzZ','PreEndActionJS','eCtnj','Game_Action_isForRandom','center','CriticalColor','254329EmSKPs','setBattleZoom','ClearBattleLog','isSkillItemWindowsMiddle','createDamageContainer','skillId','BattleManager_endAction','battleProjectiles','frameCount','SmoothImage','tSXFO','Sprite_Actor_updateShadow','applyBattleCoreJS','updateStateSprite','Game_Battler_performDamage','flashColor','gaugeX','opponentsUnit','JnAqi','rFWBD','battleMove','_defeatedEnemies','CastCertain','setupActionSet','setActionState','HdHqV','onActorOk','setBattleCameraOffset','RLoQx','actorId','CnGSv','gmZIu','itVil','Game_Action_applyGlobal','isDying','Scene_Battle_createAllWindows','Window_BattleLog_performAction','_growWholeDuration','isAutoBattleCommandEnabled','HelpEscape','krdQG','YdRBJ','ActionSkillMsg1','PNKsc','PopupOffsetY','activate','Game_Action_itemHit','Strength','applyItem','startActorCommandSelection','svBattlerAnchorY','createEnemyNames','_additionalSprites','Name','CHhBO','Window_BattleLog_refresh','QfcAy','IconStypeNorm','Window_BattleLog_displayMpDamage','addShowHpGaugeCommand','rorap','isChangingOpacity','Spriteset_Battle_createBattleField','DIFhG','Skill-%1-%2','StatusWindowAttachmentBackOffsetX','Scene_Map_initialize','clearDamagePopup','onDatabaseLoaded','WaitForCamera','Wave','VisuMZ_4_CombatLog','BattleLogRectJS','DistanceY','onTurnEnd','criticalHitFlat','makeHpDamageText','subject','regenerateAll','uBcsT','hasBeenDefeatedBefore','qlXaQ','ATTACK','_skewDuration','vbknF','removedBuffs','QQZxb','bysiw','updateBattleProcess','ZaxeL','applyForcedGameTroopSettingsBattleCore','canGuard','ShowFacesListStyle','ActSeq_Target_RandTarget','_baseX','attack','YLfSd','ShowCurrentState','skewBattler','ActSeq_Angle_WaitForAngle','VFUrN','aZyqb','maxItems','YFnqc','VariableID','rGtbN','updateAngleCalculations','adjustPosition_ScaleDown','_angleWholeDuration','iILEc','Scene_Battle_commandFight','ESCAPE','ShowReflect','performActionMotions','isForFriend','isWaiting','DPxPr','RegExp','mvjIl','moveBattlerToPoint','_floatDuration','otYtr','currentSymbol','ActSeq_Mechanics_CustomDmgFormula','item','growBattler','battleUIOffsetX','ActSeq_Mechanics_HpMpTp','ParseArmorNotetags','evade','ActSeq_Movement_Spin','_cursorSprite','onEncounterBattleCore','mainSprite','CastAnimation','addSingleSkillCommands','Lrprd','11JbaCdN','pXHoN','qBUPv','qLdFM','tWXsR','getDefeatedEnemies','parse','pattern','isPreviousScene','skillTypes','inHomePosition','nowFf','AtPcO','PostDamageAsTargetJS','usePremadeActionSequence','GNEWx','process_VisuMZ_BattleCore_DamageStyles','animationShouldMirror','RIjKA','AnYQU','Sprite_Enemy_createStateIconSprite','OdkDp','getItemDamageAmountLabelOriginal','dTYPh','Elements','targetObjects','getBattlePortraitOffsetY','XCsCp','GWfJV','autoBattleAtStart','Game_Battler_onTurnEnd','helpWindowRectBorderStyle','Height','TimeScale','weatherPower','CommandAddOptions','_spriteset','StartName','waitForEffect','Duration','nWeQH','ActSeq_Mechanics_ActionEffect','updatePadding','actor%1-portrait','getTraitSetKeys','uLheb','FlinchDistanceX','addBuff','MBOyk','ActSeq_BattleLog_PopBaseLine','initMembers','initialize','StatusWindowSkinFilename','updateCollapse','die','ActSeq_Movement_Jump','TpbGaugeOffsetX','customDamageFormula','isDamagePopupRequested','CriticalHitRateJS','PreApplyAsUserJS'];const _0x4ca73a=_0x1c5d;(function(_0x5656f5,_0x460f89){const _0x16d485=_0x1c5d;while(!![]){try{const _0x3f41f0=-parseInt(_0x16d485(0x985))*parseInt(_0x16d485(0x8bf))+-parseInt(_0x16d485(0x397))*parseInt(_0x16d485(0x1a7))+-parseInt(_0x16d485(0x22a))+parseInt(_0x16d485(0xaae))*-parseInt(_0x16d485(0x3ad))+parseInt(_0x16d485(0xa14))*parseInt(_0x16d485(0x740))+-parseInt(_0x16d485(0x2e9))+-parseInt(_0x16d485(0x98b))*-parseInt(_0x16d485(0x376));if(_0x3f41f0===_0x460f89)break;else _0x5656f5['push'](_0x5656f5['shift']());}catch(_0x1b5b6c){_0x5656f5['push'](_0x5656f5['shift']());}}}(_0x4b7c,0x557fd));var label=_0x4ca73a(0x499),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x4ca73a(0x5be)](function(_0x1065cc){const _0x59d86e=_0x4ca73a;return _0x1065cc['status']&&_0x1065cc['description'][_0x59d86e(0x93d)]('['+label+']');})[0x0];VisuMZ[label]['Settings']=VisuMZ[label][_0x4ca73a(0x800)]||{},VisuMZ[_0x4ca73a(0x8d4)]=function(_0x338249,_0x1a976c){const _0x3ba99c=_0x4ca73a;for(const _0x3b356a in _0x1a976c){if(_0x3ba99c(0x403)==='QjDan'){if(_0x3b356a[_0x3ba99c(0x2b2)](/(.*):(.*)/i)){const _0x570de6=String(RegExp['$1']),_0x133947=String(RegExp['$2'])[_0x3ba99c(0x941)]()['trim']();let _0x3be91b,_0x32d99d,_0x5a9dbd;switch(_0x133947){case _0x3ba99c(0x7bb):_0x3be91b=_0x1a976c[_0x3b356a]!==''?Number(_0x1a976c[_0x3b356a]):0x0;break;case _0x3ba99c(0x730):_0x32d99d=_0x1a976c[_0x3b356a]!==''?JSON[_0x3ba99c(0xa1a)](_0x1a976c[_0x3b356a]):[],_0x3be91b=_0x32d99d[_0x3ba99c(0x8f9)](_0x46b284=>Number(_0x46b284));break;case'EVAL':_0x3be91b=_0x1a976c[_0x3b356a]!==''?eval(_0x1a976c[_0x3b356a]):null;break;case'ARRAYEVAL':_0x32d99d=_0x1a976c[_0x3b356a]!==''?JSON[_0x3ba99c(0xa1a)](_0x1a976c[_0x3b356a]):[],_0x3be91b=_0x32d99d[_0x3ba99c(0x8f9)](_0x46e28f=>eval(_0x46e28f));break;case _0x3ba99c(0x57c):_0x3be91b=_0x1a976c[_0x3b356a]!==''?JSON[_0x3ba99c(0xa1a)](_0x1a976c[_0x3b356a]):'';break;case _0x3ba99c(0x587):_0x32d99d=_0x1a976c[_0x3b356a]!==''?JSON[_0x3ba99c(0xa1a)](_0x1a976c[_0x3b356a]):[],_0x3be91b=_0x32d99d[_0x3ba99c(0x8f9)](_0xf2e0c4=>JSON['parse'](_0xf2e0c4));break;case _0x3ba99c(0x6d9):_0x3be91b=_0x1a976c[_0x3b356a]!==''?new Function(JSON[_0x3ba99c(0xa1a)](_0x1a976c[_0x3b356a])):new Function(_0x3ba99c(0xa82));break;case _0x3ba99c(0x58d):_0x32d99d=_0x1a976c[_0x3b356a]!==''?JSON[_0x3ba99c(0xa1a)](_0x1a976c[_0x3b356a]):[],_0x3be91b=_0x32d99d[_0x3ba99c(0x8f9)](_0x3f3d6d=>new Function(JSON[_0x3ba99c(0xa1a)](_0x3f3d6d)));break;case _0x3ba99c(0xade):_0x3be91b=_0x1a976c[_0x3b356a]!==''?String(_0x1a976c[_0x3b356a]):'';break;case _0x3ba99c(0x954):_0x32d99d=_0x1a976c[_0x3b356a]!==''?JSON['parse'](_0x1a976c[_0x3b356a]):[],_0x3be91b=_0x32d99d[_0x3ba99c(0x8f9)](_0x16b11f=>String(_0x16b11f));break;case _0x3ba99c(0x6be):_0x5a9dbd=_0x1a976c[_0x3b356a]!==''?JSON['parse'](_0x1a976c[_0x3b356a]):{},_0x338249[_0x570de6]={},VisuMZ[_0x3ba99c(0x8d4)](_0x338249[_0x570de6],_0x5a9dbd);continue;case'ARRAYSTRUCT':_0x32d99d=_0x1a976c[_0x3b356a]!==''?JSON[_0x3ba99c(0xa1a)](_0x1a976c[_0x3b356a]):[],_0x3be91b=_0x32d99d['map'](_0x1c2bbe=>VisuMZ['ConvertParams']({},JSON[_0x3ba99c(0xa1a)](_0x1c2bbe)));break;default:continue;}_0x338249[_0x570de6]=_0x3be91b;}}else{function _0x3a32a7(){const _0x1f1397=_0x3ba99c;this[_0x1f1397(0x7b2)](_0x5232c9,_0x3888df);}}}return _0x338249;},(_0x2e36a0=>{const _0x3a727a=_0x4ca73a,_0x159916=_0x2e36a0[_0x3a727a(0x491)];for(const _0x4e7e5e of dependencies){if(_0x3a727a(0x3df)===_0x3a727a(0x3df)){if(!Imported[_0x4e7e5e]){if(_0x3a727a(0x317)!==_0x3a727a(0x317)){function _0x4f3f3b(){const _0x18f9e2=_0x3a727a,_0x2180f9=this[_0x18f9e2(0x2f7)](),_0x162cde=_0x3a9113[_0x18f9e2(0x499)]['Settings']['PartyCmd']['CmdIconEscape'],_0x2db603=_0x2180f9===_0x18f9e2(0x5db)?_0x2701b3[_0x18f9e2(0x656)]:_0x18f9e2(0x30a)[_0x18f9e2(0x26f)](_0x162cde,_0x5173e7[_0x18f9e2(0x656)]),_0x5bb043=this[_0x18f9e2(0x5cc)]();this[_0x18f9e2(0x459)](_0x2db603,_0x18f9e2(0x656),_0x5bb043);}}else{alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x3a727a(0x26f)](_0x159916,_0x4e7e5e)),SceneManager[_0x3a727a(0x6a3)]();break;}}}else{function _0x105f8d(){const _0x5c6566=_0x3a727a;this[_0x5c6566(0x286)][_0x5c6566(0xa74)]=_0x46a162[_0x5c6566(0x49d)](_0x54b94c);}}}const _0x38cde0=_0x2e36a0['description'];if(_0x38cde0[_0x3a727a(0x2b2)](/\[Version[ ](.*?)\]/i)){if(_0x3a727a(0xa13)===_0x3a727a(0xa13)){const _0x3ba425=Number(RegExp['$1']);_0x3ba425!==VisuMZ[label][_0x3a727a(0x5b4)]&&(alert(_0x3a727a(0xb12)[_0x3a727a(0x26f)](_0x159916,_0x3ba425)),SceneManager['exit']());}else{function _0x4cdd37(){const _0x2588c7=_0x3a727a;this[_0x2588c7(0xa0e)][_0x2588c7(0x3b4)](new _0x7f39d0());}}}if(_0x38cde0[_0x3a727a(0x2b2)](/\[Tier[ ](\d+)\]/i)){if('Ulstu'===_0x3a727a(0x1d6)){const _0x2a0a1f=Number(RegExp['$1']);_0x2a0a1f<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x3a727a(0x26f)](_0x159916,_0x2a0a1f,tier)),SceneManager[_0x3a727a(0x6a3)]()):tier=Math[_0x3a727a(0x826)](_0x2a0a1f,tier);}else{function _0x4bd082(){_0x20da58=(_0x575b26+_0x5ba93a)/0x2;}}}VisuMZ[_0x3a727a(0x8d4)](VisuMZ[label][_0x3a727a(0x800)],_0x2e36a0['parameters']);})(pluginData),VisuMZ[_0x4ca73a(0x871)]=function(_0xae56a3){const _0x1d55ae=_0x4ca73a;let _0x38c71d=[];for(const _0x4750da of _0xae56a3){if('UsDdC'!==_0x1d55ae(0xa8a)){function _0x2e80f8(){return![];}}else _0x38c71d=_0x38c71d['concat'](VisuMZ[_0x1d55ae(0x36d)](_0x4750da));}return _0x38c71d[_0x1d55ae(0x5be)](_0x185761=>_0x185761);},VisuMZ['ConvertActionSequenceTarget']=function(_0x5e66b2){const _0x34992c=_0x4ca73a,_0x4968fe=BattleManager[_0x34992c(0x501)]()['filter'](_0x451ba4=>_0x451ba4&&_0x451ba4[_0x34992c(0x773)]()),_0x1434ef=BattleManager[_0x34992c(0xb88)],_0x59e863=BattleManager[_0x34992c(0xae2)],_0x96d463=BattleManager[_0x34992c(0xb63)]?BattleManager['_allTargets'][_0x34992c(0x7ef)](0x0):_0x4968fe;_0x5e66b2=_0x5e66b2[_0x34992c(0x3c1)]()['trim']();if(_0x5e66b2==='user'){if(_0x34992c(0x50a)===_0x34992c(0x649)){function _0x2e2f34(){const _0x4831f2=_0x34992c;this[_0x4831f2(0x352)]['splice'](_0x15fd3f,0x0,_0x463804);}}else return[_0x1434ef];}else{if(_0x5e66b2===_0x34992c(0x60b)){if(_0x34992c(0x273)==='dfNDv')return[_0x59e863];else{function _0xfed715(){const _0x1e4408=_0x34992c;return _0x39aa27[_0x1e4408(0xb22)]()?_0x340069[_0x1e4408(0x612)][_0x1e4408(0xa38)][_0x1e4408(0x40b)]:this['parent'];}}}else{if(_0x5e66b2===_0x34992c(0x3ca)){if(_0x59e863){const _0x5badc7=_0x96d463['indexOf'](_0x59e863);return _0x5badc7>=0x0?[_0x96d463[_0x5badc7-0x1]||_0x59e863]:[_0x59e863];}}else{if(_0x5e66b2===_0x34992c(0x3fd)){if(_0x34992c(0x784)===_0x34992c(0x784)){if(_0x59e863){const _0xc3c71e=_0x96d463[_0x34992c(0x621)](_0x59e863);return _0xc3c71e>=0x0?[_0x96d463[_0xc3c71e+0x1]||_0x59e863]:[_0x59e863];}}else{function _0x3bc438(){const _0x1f0357=_0x34992c,_0x2452bb=_0x2b3a34[_0x1f0357(0x7bf)](_0x45f763);_0x2452bb[_0x1f0357(0x72e)]=![],_0x2452bb[_0x1f0357(0x30f)]=0x0,this[_0x1f0357(0x6f7)][_0x1f0357(0x1ee)](_0x2452bb);}}}else{if(_0x5e66b2===_0x34992c(0x39f))return _0x96d463;else{if(_0x5e66b2===_0x34992c(0x68e))return[_0x1434ef]['concat'](_0x96d463);else{if(_0x5e66b2===_0x34992c(0x1c9))return _0x4968fe[_0x34992c(0x5be)](_0x6620af=>_0x6620af!==_0x1434ef&&!_0x96d463['includes'](_0x6620af)&&_0x6620af[_0x34992c(0x607)]());}}}}}}if(_0x1434ef){if(_0x5e66b2===_0x34992c(0x52f))return _0x1434ef[_0x34992c(0x512)]()[_0x34992c(0x1d4)]();else{if(_0x5e66b2===_0x34992c(0xb04))return _0x1434ef['friendsUnit']()[_0x34992c(0x1d4)]()[_0x34992c(0x5be)](_0x21ce2a=>_0x21ce2a!==_0x1434ef);else{if(_0x5e66b2===_0x34992c(0x7d6))return _0x1434ef[_0x34992c(0x512)]()['aliveMembers']()[_0x34992c(0x5be)](_0x19c1ba=>_0x19c1ba!==_0x59e863);else{if(_0x5e66b2===_0x34992c(0x440)){if(_0x34992c(0x9e2)!==_0x34992c(0x89d))return _0x1434ef[_0x34992c(0x512)]()[_0x34992c(0x2cc)]();else{function _0x332b36(){const _0xe49341=_0x34992c;if(!this['_battler']['isSpriteVisible']())return;const _0x29cc02=_0x3379eb[_0xe49341(0x499)][_0xe49341(0x800)][_0xe49341(0x1b8)],_0x3376d9=new _0xe55b67();_0x3376d9[_0xe49341(0x198)]=_0x29cc02['PopupDuration'],this[_0xe49341(0x3f1)](_0x3376d9),_0x3376d9['setupTextPopup'](_0x3e4ae9,_0x13c216),this['addDamageSprite'](_0x3376d9);}}}else{if(_0x5e66b2[_0x34992c(0x2b2)](/FRIEND INDEX (\d+)/i)){if('chYKs'!==_0x34992c(0xb2d)){function _0x4ea8aa(){const _0x77a2b7=_0x34992c;this[_0x77a2b7(0x424)]=_0x37e655[_0x77a2b7(0x4c4)](_0x3f6b7c[_0x77a2b7(0xa48)]);}}else{const _0x8f488c=Number(RegExp['$1']);return[_0x1434ef[_0x34992c(0x512)]()[_0x34992c(0x6c7)]()[_0x8f488c]];}}}}}}if(_0x5e66b2==='alive\x20opponents'){if(_0x34992c(0x1fc)!==_0x34992c(0x946))return _0x1434ef[_0x34992c(0x99c)]()[_0x34992c(0x1d4)]();else{function _0xaa5766(){_0x139d25=_0x2fd086;}}}else{if(_0x5e66b2===_0x34992c(0x333)){if(_0x34992c(0x6eb)!=='OkMQe')return _0x1434ef[_0x34992c(0x99c)]()[_0x34992c(0x1d4)]()[_0x34992c(0x5be)](_0x2e4142=>_0x2e4142!==_0x59e863);else{function _0x1a8ff1(){const _0xa55bd3=_0x34992c;_0x4d0cfb[_0xa55bd3(0x499)][_0xa55bd3(0x7dd)][_0xa55bd3(0x37c)](this),this[_0xa55bd3(0x1c0)]();}}}else{if(_0x5e66b2===_0x34992c(0x447))return _0x1434ef[_0x34992c(0x99c)]()[_0x34992c(0x2cc)]();else{if(_0x5e66b2[_0x34992c(0x2b2)](/OPPONENT INDEX (\d+)/i)){const _0x1a6d5=Number(RegExp['$1']);return[_0x1434ef['opponentsUnit']()[_0x34992c(0x6c7)]()[_0x1a6d5]];}}}}}if(_0x5e66b2===_0x34992c(0x1df)){if(_0x34992c(0x285)!=='AWErO'){function _0x4c764f(){const _0x4fdf71=_0x34992c;return _0x243f0b[_0x4fdf71(0x2cc)]();}}else return $gameParty['aliveMembers']();}else{if(_0x5e66b2===_0x34992c(0x2e1))return $gameParty['aliveMembers']()[_0x34992c(0x5be)](_0x21aaa6=>_0x21aaa6!==_0x1434ef);else{if(_0x5e66b2==='alive\x20actors\x20not\x20target')return $gameParty[_0x34992c(0x1d4)]()[_0x34992c(0x5be)](_0x6aa88=>_0x6aa88!==_0x59e863);else{if(_0x5e66b2===_0x34992c(0x4d7))return $gameParty[_0x34992c(0x2cc)]();else{if(_0x5e66b2[_0x34992c(0x2b2)](/ACTOR INDEX (\d+)/i)){const _0xbb175a=Number(RegExp['$1']);return[$gameParty[_0x34992c(0x6c7)]()[_0xbb175a]];}else{if(_0x5e66b2['match'](/ACTOR ID (\d+)/i)){const _0x24aa38=Number(RegExp['$1']);return[$gameActors['actor'](_0x24aa38)];}}}}}}if(_0x5e66b2===_0x34992c(0x3d1))return $gameTroop['aliveMembers']();else{if(_0x5e66b2===_0x34992c(0x1d1)){if('IHdER'===_0x34992c(0xaff)){function _0x1f4096(){const _0x33cb60=_0x34992c;if(_0x18772e[_0x33cb60(0x7ed)]&&_0x3a23f9['uiInputPosition']!==_0x5a1818)return _0x5dba59[_0x33cb60(0x96e)];else{if(this[_0x33cb60(0x912)]()===_0x33cb60(0x89e))return![];else{return _0x960c62[_0x33cb60(0x90a)]['isRightInputMode'][_0x33cb60(0x37c)](this);;}}}}else return $gameTroop[_0x34992c(0x1d4)]()['filter'](_0x561163=>_0x561163!==_0x1434ef);}else{if(_0x5e66b2===_0x34992c(0x49f)){if(_0x34992c(0xac6)===_0x34992c(0xac6))return $gameTroop[_0x34992c(0x1d4)]()['filter'](_0x10126b=>_0x10126b!==_0x59e863);else{function _0x3e5daa(){const _0x523b21=_0x34992c;_0x3faa40[_0x523b21(0x90a)][_0x523b21(0x662)][_0x523b21(0x37c)](this),this[_0x523b21(0x3b9)]()&&this[_0x523b21(0x804)]()&&this['requestMotion'](_0x523b21(0x2e7)),_0x140745['playEnemyDamage']();}}}else{if(_0x5e66b2===_0x34992c(0x84b)){if('LjmEJ'!=='ggZBJ')return $gameTroop[_0x34992c(0x2cc)]();else{function _0x2435bd(){const _0x3e2324=_0x34992c;_0x14dba5[_0x3e2324(0x1bc)](),_0x4046fb['_autoBattle']=![],_0x4f6649['clear'](),_0x20fae2[_0x3e2324(0x1c1)]();}}}else{if(_0x5e66b2[_0x34992c(0x2b2)](/ENEMY INDEX (\d+)/i)){if(_0x34992c(0xb73)!==_0x34992c(0xb73)){function _0x7cd058(){const _0x1e2629=_0x34992c;let _0x8c77f0=_0x1e2629(0xa09);if(this['checkCacheKey'](_0x8c77f0))return this[_0x1e2629(0x473)][_0x8c77f0];return this[_0x1e2629(0x473)][_0x8c77f0]=this[_0x1e2629(0x786)](this[_0x1e2629(0xb16)]()),this[_0x1e2629(0x473)][_0x8c77f0];}}else{const _0xe7aeed=Number(RegExp['$1']);return[$gameTroop['members']()[_0xe7aeed]];}}else{if(_0x5e66b2['match'](/ENEMY ID (\d+)/i)){if(_0x34992c(0x878)!==_0x34992c(0xa9c)){const _0x8ecbb=Number(RegExp['$1']);return $gameTroop[_0x34992c(0x1d4)]()[_0x34992c(0x5be)](_0x35ca95=>_0x35ca95[_0x34992c(0x6c3)]()===_0x8ecbb);}else{function _0x3a62ae(){_0x7cf556['setValue'](_0x3b83cd['SwitchCritical'],![]);}}}}}}}}if(_0x5e66b2===_0x34992c(0x4cf))return _0x4968fe['filter'](_0x1977e0=>_0x1977e0['isAlive']());else{if(_0x5e66b2===_0x34992c(0x50e)){if('OjwOw'===_0x34992c(0xab6))return _0x4968fe[_0x34992c(0x5be)](_0x143133=>_0x143133['isAlive']()&&_0x143133!==_0x1434ef);else{function _0x39bbbd(){const _0x2a5564=_0x34992c;if(this[_0x2a5564(0x711)]===_0x19cd95)this['initBattlePortrait']();this[_0x2a5564(0x711)]=_0x345a65;if(_0x4454f7[_0x2a5564(0xb22)]()&&_0x1fb4cc[_0x2a5564(0x39e)]()['includes'](this)){const _0xe77317=_0x255855[_0x2a5564(0x612)][_0x2a5564(0x790)];if(_0xe77317)_0xe77317[_0x2a5564(0x7f7)](this);}}}}else{if(_0x5e66b2===_0x34992c(0x779)){if(_0x34992c(0x7b4)===_0x34992c(0x216)){function _0x1256da(){const _0x520eaf=_0x34992c;return this[_0x520eaf(0x86e)]();}}else return _0x4968fe['filter'](_0x5d54e7=>_0x5d54e7[_0x34992c(0xb34)]()&&_0x5d54e7!==_0x59e863);}else{if(_0x5e66b2===_0x34992c(0xa88)){if(_0x34992c(0x45e)!==_0x34992c(0x45e)){function _0x1d2a0a(){_0x47bf3a['_inputting']=![];}}else return _0x4968fe[_0x34992c(0x5be)](_0x508377=>_0x508377[_0x34992c(0x6ee)]());}}}}return[];},PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Set_SetupAction',_0x57f5d4=>{const _0x12a7c0=_0x4ca73a;if(!SceneManager[_0x12a7c0(0xb22)]())return;VisuMZ[_0x12a7c0(0x8d4)](_0x57f5d4,_0x57f5d4);const _0x918eb9=$gameTemp['getLastPluginCommandInterpreter'](),_0x3ef987=BattleManager['_action'],_0x25b990=BattleManager[_0x12a7c0(0xb88)],_0x50618f=BattleManager['_allTargets']?BattleManager[_0x12a7c0(0xb63)]['slice'](0x0):[],_0x73dbbb=BattleManager[_0x12a7c0(0x526)];if(!_0x918eb9||!_0x3ef987||!_0x25b990)return;if(!_0x3ef987[_0x12a7c0(0xa07)]())return;if(_0x57f5d4['DisplayAction'])_0x73dbbb[_0x12a7c0(0x86f)](_0x25b990,_0x3ef987[_0x12a7c0(0xa07)]());if(_0x57f5d4['ApplyImmortal']){if('gHQWZ'!==_0x12a7c0(0x77d)){function _0x11ae11(){return!![];}}else _0x73dbbb['push'](_0x12a7c0(0x474),_0x25b990,_0x50618f,!![]);}if(_0x57f5d4[_0x12a7c0(0x580)])_0x73dbbb[_0x12a7c0(0x1ee)](_0x12a7c0(0x938),_0x25b990,_0x3ef987);if(_0x57f5d4[_0x12a7c0(0x520)])_0x73dbbb[_0x12a7c0(0x1ee)]('waitForMovement');if(_0x57f5d4[_0x12a7c0(0xa11)])_0x73dbbb['push']('performCastAnimation',_0x25b990,_0x3ef987);if(_0x57f5d4['WaitForAnimation'])_0x73dbbb[_0x12a7c0(0x1ee)](_0x12a7c0(0xb75));_0x918eb9[_0x12a7c0(0x728)](_0x12a7c0(0x243));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x3cf),_0x374824=>{const _0x4cb9e2=_0x4ca73a;if(!SceneManager[_0x4cb9e2(0xb22)]())return;VisuMZ[_0x4cb9e2(0x8d4)](_0x374824,_0x374824);const _0x520c51=$gameTemp['getLastPluginCommandInterpreter'](),_0x18c625=BattleManager[_0x4cb9e2(0x40d)],_0x3cde56=BattleManager[_0x4cb9e2(0xb88)],_0x1dd7b9=BattleManager[_0x4cb9e2(0xb63)]?BattleManager[_0x4cb9e2(0xb63)][_0x4cb9e2(0x7ef)](0x0):[],_0xbe17ed=BattleManager[_0x4cb9e2(0x526)],_0x3d7660=_0x374824[_0x4cb9e2(0x62d)]??![];if(!_0x520c51||!_0x18c625||!_0x3cde56)return;if(!_0x18c625[_0x4cb9e2(0xa07)]())return;let _0x35d1ab=_0x3d7660?_0xbe17ed['getDualWieldTimes'](_0x3cde56):0x1;for(let _0x3e8430=0x0;_0x3e8430<_0x35d1ab;_0x3e8430++){_0x3d7660&&_0x3cde56[_0x4cb9e2(0x4bb)]()&&_0xbe17ed['push'](_0x4cb9e2(0x281),_0x3cde56,_0x3e8430);if(_0x374824[_0x4cb9e2(0x2e3)])_0xbe17ed[_0x4cb9e2(0x1ee)](_0x4cb9e2(0x3d9),_0x3cde56,_0x18c625);if(_0x374824[_0x4cb9e2(0x344)]>0x0)_0xbe17ed[_0x4cb9e2(0x1ee)](_0x4cb9e2(0x720),_0x374824[_0x4cb9e2(0x344)]);if(_0x374824['ActionAnimation'])_0xbe17ed['push'](_0x4cb9e2(0x2c0),_0x3cde56,_0x1dd7b9,_0x18c625[_0x4cb9e2(0xa07)]()[_0x4cb9e2(0x7c2)]);if(_0x374824[_0x4cb9e2(0x21e)])_0xbe17ed[_0x4cb9e2(0x1ee)](_0x4cb9e2(0xb75));for(const _0x2c54dd of _0x1dd7b9){if(!_0x2c54dd)continue;if(_0x374824[_0x4cb9e2(0x3e1)])_0xbe17ed['push'](_0x4cb9e2(0x28c),_0x3cde56,_0x2c54dd);}}if(_0x3d7660&&_0x3cde56[_0x4cb9e2(0x4bb)]()){if(_0x4cb9e2(0x57b)==='Zwybd')_0xbe17ed[_0x4cb9e2(0x1ee)](_0x4cb9e2(0x22c),_0x3cde56);else{function _0x20a298(){const _0x4ec98f=_0x4cb9e2;if(!this[_0x4ec98f(0xa07)]()[_0x4ec98f(0x2e7)][_0x4ec98f(0x7d0)])return 0x0;let _0x2e9a11=_0x50518a[_0x4ec98f(0x499)][_0x4ec98f(0x800)][_0x4ec98f(0x1b8)][_0x4ec98f(0xa4f)][_0x4ec98f(0x37c)](this,_0x406ea6);return _0x2e9a11=this[_0x4ec98f(0x78b)][_0x4ec98f(0x2e5)]*_0x2e9a11+this[_0x4ec98f(0x78b)][_0x4ec98f(0x9d6)],_0x2e9a11;}}}if(_0x374824[_0x4cb9e2(0x79f)])_0xbe17ed[_0x4cb9e2(0x1ee)]('applyImmortal',_0x3cde56,_0x1dd7b9,![]);_0x520c51[_0x4cb9e2(0x728)]('battlelog');}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x3fb),_0x12e7b7=>{const _0x2e6b9a=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x12e7b7,_0x12e7b7);const _0x49bd37=$gameTemp['getLastPluginCommandInterpreter'](),_0x43e987=BattleManager[_0x2e6b9a(0x40d)],_0x53404d=BattleManager[_0x2e6b9a(0xb88)],_0xf0b30f=BattleManager[_0x2e6b9a(0xb63)]?BattleManager[_0x2e6b9a(0xb63)][_0x2e6b9a(0x7ef)](0x0):[],_0x609ee0=BattleManager[_0x2e6b9a(0x526)],_0x21fe22=_0x12e7b7[_0x2e6b9a(0x62d)]??![];if(!_0x49bd37||!_0x43e987||!_0x53404d)return;if(!_0x43e987[_0x2e6b9a(0xa07)]())return;let _0x5ab1f1=_0x21fe22?_0x609ee0[_0x2e6b9a(0x8dd)](_0x53404d):0x1;for(let _0x4cab68=0x0;_0x4cab68<_0x5ab1f1;_0x4cab68++){for(const _0x2f1fab of _0xf0b30f){if(!_0x2f1fab)continue;_0x21fe22&&_0x53404d[_0x2e6b9a(0x4bb)]()&&_0x609ee0[_0x2e6b9a(0x1ee)](_0x2e6b9a(0x281),_0x53404d,_0x4cab68);if(_0x12e7b7[_0x2e6b9a(0x2e3)])_0x609ee0[_0x2e6b9a(0x1ee)]('performAction',_0x53404d,_0x43e987);if(_0x12e7b7[_0x2e6b9a(0x842)]>0x0)_0x609ee0[_0x2e6b9a(0x1ee)](_0x2e6b9a(0x720),_0x12e7b7[_0x2e6b9a(0x842)]);if(_0x12e7b7['ActionAnimation'])_0x609ee0[_0x2e6b9a(0x1ee)]('showAnimation',_0x53404d,[_0x2f1fab],_0x43e987[_0x2e6b9a(0xa07)]()[_0x2e6b9a(0x7c2)]);if(_0x12e7b7[_0x2e6b9a(0x51d)]>0x0)_0x609ee0[_0x2e6b9a(0x1ee)]('waitCount',_0x12e7b7[_0x2e6b9a(0x51d)]);if(_0x12e7b7['ActionEffect'])_0x609ee0[_0x2e6b9a(0x1ee)](_0x2e6b9a(0x28c),_0x53404d,_0x2f1fab);}}_0x21fe22&&_0x53404d[_0x2e6b9a(0x4bb)]()&&_0x609ee0[_0x2e6b9a(0x1ee)](_0x2e6b9a(0x22c),_0x53404d);if(_0x12e7b7[_0x2e6b9a(0x79f)])_0x609ee0['push'](_0x2e6b9a(0x474),_0x53404d,_0xf0b30f,![]);_0x49bd37[_0x2e6b9a(0x728)](_0x2e6b9a(0x243));}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xb32),_0x396f86=>{const _0x567f4e=_0x4ca73a;if(!SceneManager[_0x567f4e(0xb22)]())return;VisuMZ[_0x567f4e(0x8d4)](_0x396f86,_0x396f86);const _0x3bf6da=$gameTemp[_0x567f4e(0x260)](),_0x5e59ac=BattleManager[_0x567f4e(0x40d)],_0x2084e7=BattleManager[_0x567f4e(0xb88)],_0x2a66af=BattleManager[_0x567f4e(0xb63)]?BattleManager[_0x567f4e(0xb63)][_0x567f4e(0x7ef)](0x0):[],_0x37113d=BattleManager[_0x567f4e(0x526)];if(!_0x3bf6da||!_0x5e59ac||!_0x2084e7)return;if(!_0x5e59ac[_0x567f4e(0xa07)]())return;if(_0x396f86[_0x567f4e(0x79f)])_0x37113d['push'](_0x567f4e(0x474),_0x2084e7,_0x2a66af,![]);if(_0x396f86['WaitForNewLine'])_0x37113d['push'](_0x567f4e(0x663));if(_0x396f86['WaitForEffect'])_0x37113d[_0x567f4e(0x1ee)](_0x567f4e(0xa3a));if(_0x396f86[_0x567f4e(0x98d)])_0x37113d[_0x567f4e(0x1ee)](_0x567f4e(0x1c1));if(_0x396f86[_0x567f4e(0x75e)])_0x37113d['push'](_0x567f4e(0x633),_0x2084e7);if(_0x396f86['WaitForMovement'])_0x37113d[_0x567f4e(0x1ee)](_0x567f4e(0x530));_0x3bf6da[_0x567f4e(0x728)]('battlelog');}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x441),_0x41a4fc=>{const _0x3a9625=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3a9625(0x28f)])return;VisuMZ[_0x3a9625(0x8d4)](_0x41a4fc,_0x41a4fc);const _0x1cbf79=$gameTemp[_0x3a9625(0x260)](),_0x36f5b4=_0x41a4fc[_0x3a9625(0x8eb)];if(!_0x1cbf79)return;$gameScreen[_0x3a9625(0xb83)](_0x41a4fc[_0x3a9625(0x387)],_0x41a4fc[_0x3a9625(0xa3b)],_0x41a4fc[_0x3a9625(0x283)]);if(_0x36f5b4)_0x1cbf79[_0x3a9625(0x728)]('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x3e6),_0x1500be=>{const _0x1726d1=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1726d1(0x28f)])return;VisuMZ[_0x1726d1(0x8d4)](_0x1500be,_0x1500be);const _0x451318=$gameTemp['getLastPluginCommandInterpreter'](),_0x788190=_0x1500be[_0x1726d1(0x8eb)];if(!_0x451318)return;$gameScreen[_0x1726d1(0xb83)](0x0,_0x1500be[_0x1726d1(0xa3b)],_0x1500be[_0x1726d1(0x283)]);if(_0x788190)_0x451318['setWaitMode'](_0x1726d1(0x24f));}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x9ee),_0x353de6=>{const _0x12cd05=_0x4ca73a;if(!SceneManager[_0x12cd05(0xb22)]())return;if(!Imported[_0x12cd05(0x28f)])return;const _0x19bb71=$gameTemp[_0x12cd05(0x260)]();if(!_0x19bb71)return;_0x19bb71[_0x12cd05(0x728)](_0x12cd05(0x24f));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x218),_0x57c240=>{const _0x19a313=_0x4ca73a;if(!SceneManager[_0x19a313(0xb22)]())return;VisuMZ[_0x19a313(0x8d4)](_0x57c240,_0x57c240);const _0x848740=$gameTemp[_0x19a313(0x260)](),_0xda44a6=BattleManager[_0x19a313(0x40d)],_0x4fe77d=BattleManager[_0x19a313(0xb88)],_0x148d2c=VisuMZ[_0x19a313(0x871)](_0x57c240[_0x19a313(0x6f8)]),_0x27b698=_0x57c240[_0x19a313(0x6e6)],_0x7d4680=BattleManager[_0x19a313(0x526)];if(!_0x848740||!_0xda44a6||!_0x4fe77d)return;if(!_0xda44a6[_0x19a313(0xa07)]())return;let _0x598afc=_0xda44a6[_0x19a313(0xa07)]()['animationId'];if(_0x598afc<0x0)_0x598afc=_0x4fe77d[_0x19a313(0x86e)]();$gameTemp[_0x19a313(0xad9)](_0x148d2c,_0x598afc,_0x27b698),_0x57c240[_0x19a313(0x21e)]&&_0x848740['setWaitMode'](_0x19a313(0x53f));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x3f7),_0x5d8d9c=>{const _0x32f655=_0x4ca73a;if(!SceneManager[_0x32f655(0xb22)]())return;VisuMZ['ConvertParams'](_0x5d8d9c,_0x5d8d9c);const _0x38e828=$gameTemp[_0x32f655(0x260)](),_0x1538a6=BattleManager[_0x32f655(0xb88)],_0x44a955=VisuMZ[_0x32f655(0x871)](_0x5d8d9c[_0x32f655(0x6f8)]),_0x484ceb=_0x5d8d9c[_0x32f655(0x6e6)],_0x4e51f0=BattleManager[_0x32f655(0x526)];if(!_0x38e828||!_0x1538a6)return;const _0x3fa4c8=_0x1538a6[_0x32f655(0x86e)]();$gameTemp[_0x32f655(0xad9)](_0x44a955,_0x3fa4c8,_0x484ceb),_0x5d8d9c[_0x32f655(0x21e)]&&_0x38e828[_0x32f655(0x728)](_0x32f655(0x53f));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x238),_0x2dbb98=>{const _0x8e5f50=_0x4ca73a;if(!SceneManager[_0x8e5f50(0xb22)]())return;VisuMZ[_0x8e5f50(0x8d4)](_0x2dbb98,_0x2dbb98);const _0x53a5ff=_0x4b15d7[_0x8e5f50(0x3aa)](_0x2dbb98[_0x8e5f50(0x567)]);if(_0x53a5ff<=0x0)return;const _0x1ee673=$gameTemp[_0x8e5f50(0x260)](),_0x4b15d7=BattleManager[_0x8e5f50(0xb88)],_0x48ee71=VisuMZ['CreateActionSequenceTargets'](_0x2dbb98[_0x8e5f50(0x6f8)]),_0x16bfc5=_0x2dbb98['Mirror'],_0x1fb2a8=BattleManager[_0x8e5f50(0x526)];if(!_0x1ee673||!_0x4b15d7)return;$gameTemp['requestAnimation'](_0x48ee71,_0x53a5ff,_0x16bfc5),_0x2dbb98[_0x8e5f50(0x21e)]&&_0x1ee673['setWaitMode'](_0x8e5f50(0x53f));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x6c4),_0x284afa=>{const _0x4ddd3a=_0x4ca73a;if(!SceneManager[_0x4ddd3a(0xb22)]())return;VisuMZ[_0x4ddd3a(0x8d4)](_0x284afa,_0x284afa);const _0x162ab1=$gameTemp[_0x4ddd3a(0x260)](),_0x5955d7=BattleManager[_0x4ddd3a(0x40d)],_0x119b94=_0x284afa[_0x4ddd3a(0x6e6)],_0x35bc49=VisuMZ[_0x4ddd3a(0x871)](_0x284afa[_0x4ddd3a(0x6f8)]);if(!_0x162ab1||!_0x5955d7)return;if(!_0x5955d7['item']())return;for(const _0x1d2b43 of _0x35bc49){if(!_0x1d2b43)continue;_0x1d2b43['performCastAnimation'](_0x5955d7,_0x119b94);}if(_0x284afa[_0x4ddd3a(0x21e)])_0x162ab1[_0x4ddd3a(0x728)]('battleAnimation');}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x96a),_0x57abdf=>{const _0x5c2bd6=_0x4ca73a;VisuMZ['ConvertParams'](_0x57abdf,_0x57abdf);const _0x466d5e=$gameTemp[_0x5c2bd6(0x260)](),_0x460e48=VisuMZ[_0x5c2bd6(0x871)](_0x57abdf[_0x5c2bd6(0x6f8)]),_0x3ae177=_0x57abdf[_0x5c2bd6(0x576)];if(!_0x3ae177)return;for(const _0x22c9f9 of _0x460e48){if(!_0x22c9f9)continue;if(!_0x22c9f9[_0x5c2bd6(0x4bb)]())continue;_0x22c9f9[_0x5c2bd6(0x427)](_0x3ae177);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x4c5),_0x3cc31c=>{const _0x5c626e=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5c626e(0x8d4)](_0x3cc31c,_0x3cc31c);const _0x96c00b=$gameTemp[_0x5c626e(0x260)](),_0x234683=VisuMZ[_0x5c626e(0x871)](_0x3cc31c[_0x5c626e(0x6f8)]),_0x507234=_0x3cc31c['AnimationID'],_0x5c16d7=_0x3cc31c[_0x5c626e(0x6e6)];if(!_0x96c00b)return;$gameTemp[_0x5c626e(0xad9)](_0x234683,_0x507234,_0x5c16d7);if(_0x3cc31c[_0x5c626e(0x21e)])_0x96c00b['setWaitMode'](_0x5c626e(0x53f));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Animation_WaitForAnimation',_0x5aef8d=>{const _0x188918=_0x4ca73a;if(!SceneManager[_0x188918(0xb22)]())return;const _0x39595f=$gameTemp[_0x188918(0x260)]();if(!_0x39595f)return;_0x39595f['setWaitMode'](_0x188918(0x53f));}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x3c2),_0x45689e=>{const _0x5ba7b7=_0x4ca73a;if(!SceneManager[_0x5ba7b7(0xb22)]())return;VisuMZ['ConvertParams'](_0x45689e,_0x45689e);const _0x4c21c2=BattleManager['_logWindow'],_0x242003=_0x45689e[_0x5ba7b7(0x1ce)]&&Imported[_0x5ba7b7(0x9d2)];_0x4c21c2[_0x5ba7b7(0x807)](_0x45689e[_0x5ba7b7(0x982)]);if(_0x242003&&Imported[_0x5ba7b7(0x9d2)]){if(_0x5ba7b7(0x828)!==_0x5ba7b7(0x51e))$gameSystem[_0x5ba7b7(0xb02)](_0x45689e[_0x5ba7b7(0x982)]||'',_0x45689e[_0x5ba7b7(0xaad)]||0x0);else{function _0x29f1f9(){const _0x3672e8=_0x5ba7b7;_0x3b3641[_0x3672e8(0x499)][_0x3672e8(0x771)][_0x3672e8(0x37c)](this);if(this[_0x3672e8(0x4d4)])this['processRefresh']();}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x4b6),_0x47025b=>{const _0xc134b3=_0x4ca73a;if(!SceneManager[_0xc134b3(0xb22)]())return;const _0x4e0d35=BattleManager[_0xc134b3(0x526)];_0x4e0d35[_0xc134b3(0x1c1)]();}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x814),_0x150832=>{const _0x296af9=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;const _0x2f780c=$gameTemp[_0x296af9(0x260)](),_0xb780af=BattleManager[_0x296af9(0x40d)],_0x59a8e3=BattleManager[_0x296af9(0xb88)],_0x49f7c5=BattleManager['_logWindow'];if(!_0x2f780c||!_0xb780af||!_0x59a8e3)return;if(!_0xb780af['item']())return;_0x49f7c5[_0x296af9(0x86f)](_0x59a8e3,_0xb780af[_0x296af9(0xa07)]()),_0x2f780c[_0x296af9(0x728)](_0x296af9(0x243));}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xa45),_0x1354f1=>{const _0x36b088=_0x4ca73a;if(!SceneManager[_0x36b088(0xb22)]())return;const _0x59fa7f=BattleManager[_0x36b088(0x526)];_0x59fa7f[_0x36b088(0x4ad)]();}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x362),_0x5d500b=>{const _0x6b3416=_0x4ca73a;if(!SceneManager[_0x6b3416(0xb22)]())return;const _0x3cef67=BattleManager[_0x6b3416(0x526)];_0x3cef67[_0x6b3416(0x2d9)]();}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x8a4),_0x1feaa4=>{const _0x37ecd6=_0x4ca73a;if(!SceneManager[_0x37ecd6(0xb22)]())return;const _0x56a946=BattleManager['_logWindow'];_0x56a946[_0x37ecd6(0x705)]();}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0x66f),_0x3cded0=>{const _0x1d7099=_0x4ca73a;if(!SceneManager[_0x1d7099(0xb22)]())return;VisuMZ[_0x1d7099(0x8d4)](_0x3cded0,_0x3cded0),SceneManager['_scene'][_0x1d7099(0x503)](_0x3cded0['ShowHide']);}),PluginManager['registerCommand'](pluginData['name'],_0x4ca73a(0x647),_0x1886bf=>{const _0x420991=_0x4ca73a;if(!SceneManager[_0x420991(0xb22)]())return;const _0x2e1105=$gameTemp[_0x420991(0x260)]();_0x2e1105[_0x420991(0x728)]('battlelog');}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x788),_0x377985=>{const _0x528ac4=_0x4ca73a;if(!SceneManager[_0x528ac4(0xb22)]())return;const _0x5218c2=$gameTemp[_0x528ac4(0x260)](),_0x310c7b=BattleManager[_0x528ac4(0x526)];_0x310c7b[_0x528ac4(0x663)](),_0x5218c2[_0x528ac4(0x728)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x2df),_0x1d3795=>{const _0x5d965b=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5d965b(0x28f)])return;VisuMZ['ConvertParams'](_0x1d3795,_0x1d3795);const _0x5aa59d=$gameScreen[_0x5d965b(0x8af)]();_0x5aa59d[_0x5d965b(0x2f6)]=_0x1d3795[_0x5d965b(0x5f9)];}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],'ActSeq_Camera_FocusPoint',_0x5ba0db=>{const _0x477eb3=_0x4ca73a;if(!SceneManager[_0x477eb3(0xb22)]())return;if(!Imported[_0x477eb3(0x28f)])return;VisuMZ[_0x477eb3(0x8d4)](_0x5ba0db,_0x5ba0db);const _0x590ab2=$gameTemp['getLastPluginCommandInterpreter'](),_0x20bc3a=_0x5ba0db[_0x477eb3(0x9d0)];$gameScreen['setBattleCameraPoint'](_0x5ba0db[_0x477eb3(0x3f4)],_0x5ba0db[_0x477eb3(0x5f0)],_0x5ba0db['Duration'],_0x5ba0db[_0x477eb3(0x283)]);if(_0x20bc3a)_0x590ab2[_0x477eb3(0x728)]('battleCamera');}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x8e0),_0x217502=>{const _0x3ac691=_0x4ca73a;if(!SceneManager[_0x3ac691(0xb22)]())return;if(!Imported[_0x3ac691(0x28f)])return;VisuMZ['ConvertParams'](_0x217502,_0x217502);const _0x19403e=$gameTemp[_0x3ac691(0x260)](),_0x1ee3d0=VisuMZ[_0x3ac691(0x871)](_0x217502['Targets']),_0x5df180=_0x217502[_0x3ac691(0x9d0)];$gameScreen[_0x3ac691(0xa8b)](_0x1ee3d0,_0x217502['Duration'],_0x217502[_0x3ac691(0x283)]);if(_0x5df180)_0x19403e[_0x3ac691(0x728)](_0x3ac691(0x544));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x742),_0x5269b7=>{const _0x3a6ca4=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x3a6ca4(0x8d4)](_0x5269b7,_0x5269b7);const _0x1c2c22=$gameTemp[_0x3a6ca4(0x260)](),_0x87741f=_0x5269b7[_0x3a6ca4(0x9d0)];$gameScreen['setBattleCameraOffset'](_0x5269b7[_0x3a6ca4(0x3f3)],_0x5269b7[_0x3a6ca4(0x7ad)],_0x5269b7['Duration'],_0x5269b7['EasingType']);if(_0x87741f)_0x1c2c22[_0x3a6ca4(0x728)](_0x3a6ca4(0x544));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Camera_Reset',_0x5c245b=>{const _0x20ac1a=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x20ac1a(0x8d4)](_0x5c245b,_0x5c245b);const _0x166e10=$gameTemp[_0x20ac1a(0x260)](),_0x450a5b=_0x5c245b[_0x20ac1a(0x8ba)],_0xd566fa=_0x5c245b[_0x20ac1a(0x69e)],_0x549ebd=_0x5c245b['WaitForCamera'];if(_0x450a5b){const _0x3b9b97=Math[_0x20ac1a(0x555)](Graphics['width']/0x2),_0x9c2b8a=Math[_0x20ac1a(0x555)](Graphics[_0x20ac1a(0x38c)]/0x2);$gameScreen['setBattleCameraPoint'](_0x3b9b97,_0x9c2b8a,_0x5c245b['Duration'],_0x5c245b['EasingType']);}if(_0xd566fa){if(_0x20ac1a(0xaf3)===_0x20ac1a(0xaf3))$gameScreen[_0x20ac1a(0x9a6)](0x0,0x0,_0x5c245b[_0x20ac1a(0xa3b)],_0x5c245b[_0x20ac1a(0x283)]);else{function _0x2f33a7(){const _0x4e3147=_0x20ac1a;this['requestMotion'](_0x4e3147(0xb65));}}}if(_0x549ebd)_0x166e10['setWaitMode'](_0x20ac1a(0x544));}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x7fa),_0x2b8d63=>{const _0x36c75a=_0x4ca73a;if(!SceneManager[_0x36c75a(0xb22)]())return;if(!Imported[_0x36c75a(0x28f)])return;const _0xf07796=$gameTemp[_0x36c75a(0x260)]();if(!_0xf07796)return;_0xf07796[_0x36c75a(0x728)](_0x36c75a(0x544));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x528),_0x5992c4=>{const _0x291ef6=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x291ef6(0x8f2)])return;VisuMZ[_0x291ef6(0x8d4)](_0x5992c4,_0x5992c4);const _0x5bdfd6=VisuMZ[_0x291ef6(0x871)](_0x5992c4[_0x291ef6(0x6f8)]),_0x3f2656=_0x5992c4[_0x291ef6(0x24d)][_0x291ef6(0x3c1)]()['trim']();for(const _0x12c1a4 of _0x5bdfd6){if(!_0x12c1a4)continue;_0x12c1a4[_0x291ef6(0x62a)](_0x3f2656);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x959),_0x26f99d=>{const _0x2200b9=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x2200b9(0x8d4)](_0x26f99d,_0x26f99d);const _0x5491d2=VisuMZ[_0x2200b9(0x871)](_0x26f99d[_0x2200b9(0x6f8)]),_0xf231f9=_0x26f99d[_0x2200b9(0xa35)];for(const _0x32f14a of _0x5491d2){if(!_0x32f14a)continue;_0x32f14a['dragonbonesData']()[_0x2200b9(0xb6a)]=_0xf231f9;}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xa84),_0x2dc061=>{const _0x58a498=_0x4ca73a;if(!SceneManager[_0x58a498(0xb22)]())return;if(!Imported[_0x58a498(0x3d6)])return;VisuMZ[_0x58a498(0x8d4)](_0x2dc061,_0x2dc061);const _0x5a41df=BattleManager[_0x58a498(0x40d)],_0x1caf3f=_0x2dc061['Elements'];if(!_0x5a41df)return;_0x5a41df[_0x58a498(0x6f3)]=_0x1caf3f;}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0xb71),_0x4b3f14=>{const _0x58c826=_0x4ca73a;if(!SceneManager[_0x58c826(0xb22)]())return;if(!Imported[_0x58c826(0x3d6)])return;const _0x75052a=BattleManager[_0x58c826(0x40d)];if(!_0x75052a)return;_0x75052a[_0x58c826(0x652)]();}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],'ActSeq_Element_ForceElements',_0x4ded41=>{const _0x5cb73c=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5cb73c(0x3d6)])return;VisuMZ[_0x5cb73c(0x8d4)](_0x4ded41,_0x4ded41);const _0x11b601=BattleManager[_0x5cb73c(0x40d)],_0x11b64f=_0x4ded41[_0x5cb73c(0xa2c)];if(!_0x11b601)return;_0x11b601[_0x5cb73c(0x827)]=_0x11b64f;}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Element_NullElements',_0x19ba0f=>{const _0x57d5bc=_0x4ca73a;if(!SceneManager[_0x57d5bc(0xb22)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x4a6582=BattleManager['_action'];if(!_0x4a6582)return;_0x4a6582['_battleCoreNoElement']=!![];}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x724),_0x5719ff=>{const _0x3ce79b=_0x4ca73a;if(!Imported[_0x3ce79b(0x31d)])return;if(!SceneManager[_0x3ce79b(0xb22)]())return;VisuMZ[_0x3ce79b(0x8d4)](_0x5719ff,_0x5719ff);const _0x5c99e6=VisuMZ[_0x3ce79b(0x871)](_0x5719ff[_0x3ce79b(0x6f8)]);for(const _0x5a088e of _0x5c99e6){if(!_0x5a088e)continue;_0x5a088e['removeHorrorEffect']('noise'),_0x5a088e[_0x3ce79b(0x770)]('glitch'),_0x5a088e['removeHorrorEffect']('tv'),_0x5a088e[_0x3ce79b(0x8b7)]();}$gamePlayer[_0x3ce79b(0x705)]();}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x780),_0x1c15f0=>{const _0x2c8b14=_0x4ca73a;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2c8b14(0x8d4)](_0x1c15f0,_0x1c15f0);const _0x5296bb=VisuMZ['CreateActionSequenceTargets'](_0x1c15f0[_0x2c8b14(0x6f8)]),_0x1fec0b='glitch';_0x1c15f0[_0x2c8b14(0x382)]=Math[_0x2c8b14(0x4f0)](_0x1c15f0['slices']/0x2),_0x1c15f0[_0x2c8b14(0x88f)]=_0x1c15f0['slices'],_0x1c15f0[_0x2c8b14(0x380)]=!![];for(const _0x8b0edc of _0x5296bb){if(!_0x8b0edc)continue;_0x8b0edc[_0x2c8b14(0x43d)](_0x1fec0b,_0x1c15f0);}$gamePlayer[_0x2c8b14(0x705)]();}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Horror_GlitchRemove',_0x51a96a=>{const _0x4af432=_0x4ca73a;if(!Imported[_0x4af432(0x31d)])return;if(!SceneManager[_0x4af432(0xb22)]())return;VisuMZ[_0x4af432(0x8d4)](_0x51a96a,_0x51a96a);const _0x5f10f9=VisuMZ['CreateActionSequenceTargets'](_0x51a96a['Targets']);for(const _0x2ba70a of _0x5f10f9){if(_0x4af432(0x92e)!==_0x4af432(0x885)){if(!_0x2ba70a)continue;_0x2ba70a[_0x4af432(0x770)]('glitch');}else{function _0x3347a6(){const _0x1966af=_0x4af432;this[_0x1966af(0x473)][_0x1966af(0x8e7)]=_0x4a7a09[_0x1966af(0x90a)][_0x1966af(0x778)][_0x1966af(0x37c)](this);}}}$gamePlayer[_0x4af432(0x705)]();}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xa6a),_0x35d25f=>{const _0x531bb6=_0x4ca73a;if(!Imported[_0x531bb6(0x31d)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x531bb6(0x8d4)](_0x35d25f,_0x35d25f);const _0x405bd3=VisuMZ[_0x531bb6(0x871)](_0x35d25f[_0x531bb6(0x6f8)]),_0x17fe37=_0x531bb6(0x978);for(const _0x756c31 of _0x405bd3){if(!_0x756c31)continue;_0x756c31[_0x531bb6(0x43d)](_0x17fe37,_0x35d25f);}$gamePlayer[_0x531bb6(0x705)]();}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xb39),_0x4a3c6d=>{const _0x36dd60=_0x4ca73a;if(!Imported[_0x36dd60(0x31d)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4a3c6d,_0x4a3c6d);const _0x30bb30=VisuMZ[_0x36dd60(0x871)](_0x4a3c6d[_0x36dd60(0x6f8)]);for(const _0x214591 of _0x30bb30){if(!_0x214591)continue;_0x214591[_0x36dd60(0x770)](_0x36dd60(0x978));}$gamePlayer['refresh']();}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],'ActSeq_Horror_TVCreate',_0x2bb044=>{const _0xe61cb3=_0x4ca73a;if(!Imported[_0xe61cb3(0x31d)])return;if(!SceneManager[_0xe61cb3(0xb22)]())return;VisuMZ['ConvertParams'](_0x2bb044,_0x2bb044);const _0x15a24e=VisuMZ['CreateActionSequenceTargets'](_0x2bb044[_0xe61cb3(0x6f8)]),_0x5545d7='tv';for(const _0x3c858c of _0x15a24e){if(!_0x3c858c)continue;_0x3c858c[_0xe61cb3(0x43d)](_0x5545d7,_0x2bb044);}$gamePlayer[_0xe61cb3(0x705)]();}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Horror_TVRemove',_0x5a86fa=>{const _0x3b4a6d=_0x4ca73a;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x3b4a6d(0xb22)]())return;VisuMZ['ConvertParams'](_0x5a86fa,_0x5a86fa);const _0x2c34fe=VisuMZ[_0x3b4a6d(0x871)](_0x5a86fa[_0x3b4a6d(0x6f8)]);for(const _0x4d7c6b of _0x2c34fe){if(!_0x4d7c6b)continue;_0x4d7c6b[_0x3b4a6d(0x770)]('tv');}$gamePlayer[_0x3b4a6d(0x705)]();}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0x8fa),_0x3898eb=>{const _0x104582=_0x4ca73a;if(!SceneManager[_0x104582(0xb22)]())return;if(!Imported[_0x104582(0x667)])return;const _0x4cad5f=SceneManager['_scene'][_0x104582(0xa38)];if(!_0x4cad5f)return;VisuMZ[_0x104582(0x8d4)](_0x3898eb,_0x3898eb);const _0x4b19b2=_0x3898eb['Intensity']||0x1,_0x187adb=_0x3898eb[_0x104582(0xa3b)]||0x1,_0x45db8e=_0x3898eb[_0x104582(0x283)]||_0x104582(0xb91);_0x4cad5f[_0x104582(0xa91)](_0x4b19b2,_0x187adb,_0x45db8e);}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x7e8),_0x30e951=>{const _0x45b3f2=_0x4ca73a;if(!SceneManager[_0x45b3f2(0xb22)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2e9a4f=SceneManager[_0x45b3f2(0x612)][_0x45b3f2(0xa38)];if(!_0x2e9a4f)return;VisuMZ[_0x45b3f2(0x8d4)](_0x30e951,_0x30e951);const _0x517674=Number(_0x30e951[_0x45b3f2(0x387)])||0x0,_0x3962db=Number(_0x30e951[_0x45b3f2(0x691)]),_0x5ab5b9=_0x30e951[_0x45b3f2(0xa3b)]||0x1,_0x4edc9b=_0x30e951['EasingType']||_0x45b3f2(0xb91);_0x2e9a4f[_0x45b3f2(0x74b)](_0x517674,_0x3962db,_0x5ab5b9,_0x4edc9b);}),PluginManager['registerCommand'](pluginData['name'],_0x4ca73a(0x85b),_0x17f784=>{const _0x17d3bd=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x232550=SceneManager['_scene'][_0x17d3bd(0xa38)];if(!_0x232550)return;VisuMZ['ConvertParams'](_0x17f784,_0x17f784);const _0x27770c=Number(_0x17f784[_0x17d3bd(0x387)])||0x0,_0x1e599e=Number(_0x17f784['Rate']),_0x32e5b3=_0x17f784[_0x17d3bd(0xa3b)]||0x1,_0x6705a9=_0x17f784['EasingType']||_0x17d3bd(0xb91),_0x4d2c60=VisuMZ[_0x17d3bd(0x871)](_0x17f784['Targets']);for(const _0x5ba815 of _0x4d2c60){if('tMrdh'===_0x17d3bd(0x27b)){function _0x488325(){const _0x249f1b=_0x17d3bd;this['_weaponImageId']=_0x5ea66e,this['_animationCount']=-_0x505577,this[_0x249f1b(0x66c)]=_0x4dcd3d,this[_0x249f1b(0xadb)](),this['updateFrame']();}}else{if(!_0x5ba815)continue;if(!_0x5ba815['battler']())continue;_0x5ba815[_0x17d3bd(0x4f6)]()[_0x17d3bd(0x74b)](_0x27770c,_0x1e599e,_0x32e5b3,_0x6705a9);}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Impact_MotionTrailCreate',_0x38836a=>{const _0x560a10=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x560a10(0x667)])return;VisuMZ[_0x560a10(0x8d4)](_0x38836a,_0x38836a);const _0x36fe48={'delay':_0x38836a[_0x560a10(0x26e)],'duration':_0x38836a[_0x560a10(0x3dc)],'hue':_0x38836a[_0x560a10(0x1ab)],'opacityStart':_0x38836a[_0x560a10(0x2d2)],'tone':_0x38836a['tone'],'visible':!![]},_0x5b1e35=VisuMZ['CreateActionSequenceTargets'](_0x38836a['Targets']);for(const _0x36fbb8 of _0x5b1e35){if(!_0x36fbb8)continue;_0x36fbb8['setBattlerMotionTrailData'](_0x36fe48);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0x6b2),_0x441b78=>{const _0x5cb8f5=_0x4ca73a;if(!SceneManager[_0x5cb8f5(0xb22)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x5cb8f5(0x8d4)](_0x441b78,_0x441b78);const _0x4eee56=VisuMZ[_0x5cb8f5(0x871)](_0x441b78['Targets']);for(const _0x156a86 of _0x4eee56){if(_0x5cb8f5(0x1d8)!=='SsQJu'){function _0x4047bf(){const _0x41c988=_0x5cb8f5,_0x4599b2=this[_0x41c988(0x74d)]['worldTransform'][_0x41c988(0x798)](new _0x4832b3(0x0,0x0)),_0x18ed80=this[_0x41c988(0x74d)][_0x41c988(0xb41)];_0x18ed80['x']=_0x4599b2['x']+this['origin']['x'],_0x18ed80['y']=_0x4599b2['y']+this[_0x41c988(0x2fe)]['y'],_0x18ed80[_0x41c988(0x781)]=this[_0x41c988(0x87b)],_0x18ed80[_0x41c988(0x38c)]=this[_0x41c988(0x2c1)];}}else{if(!_0x156a86)continue;_0x156a86[_0x5cb8f5(0x35c)]();}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x958),_0x51a7a5=>{const _0x45e0b6=_0x4ca73a;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x434eec=SceneManager[_0x45e0b6(0x612)][_0x45e0b6(0xa38)];if(!_0x434eec)return;VisuMZ[_0x45e0b6(0x8d4)](_0x51a7a5,_0x51a7a5);const _0x1e5b25=_0x51a7a5['X']||0x0,_0x11a016=_0x51a7a5['Y']||0x0,_0x4514af=_0x51a7a5['Amp']||0x0,_0x5e7f2c=_0x51a7a5[_0x45e0b6(0x9d1)]||0x0,_0x41938b=_0x51a7a5['Duration']||0x1;_0x434eec[_0x45e0b6(0xb29)](_0x1e5b25,_0x11a016,_0x4514af,_0x5e7f2c,_0x41938b);}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x669),_0x40e0fe=>{const _0x44cae0=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x44cae0(0x667)])return;const _0x2bd053=SceneManager[_0x44cae0(0x612)][_0x44cae0(0xa38)];if(!_0x2bd053)return;VisuMZ[_0x44cae0(0x8d4)](_0x40e0fe,_0x40e0fe);const _0x57578d=VisuMZ['CreateActionSequenceTargets'](_0x40e0fe[_0x44cae0(0x6f8)]),_0x36703d=_0x40e0fe[_0x44cae0(0x43a)],_0x169d41=_0x40e0fe[_0x44cae0(0x3f3)]||0x0,_0xd3934b=_0x40e0fe[_0x44cae0(0x7ad)]||0x0,_0x1b568d=_0x40e0fe[_0x44cae0(0x48b)]||0x0,_0x4b97e9=_0x40e0fe[_0x44cae0(0x9d1)]||0x0,_0xcf8db5=_0x40e0fe[_0x44cae0(0xa3b)]||0x1;for(const _0x16950e of _0x57578d){if(!_0x16950e)continue;if(!_0x16950e[_0x44cae0(0x4f6)]())continue;const _0x2a1d68=_0x16950e['battler']();let _0x5f4df4=_0x2a1d68[_0x44cae0(0x9e9)],_0x382fd7=_0x2a1d68['_baseY'];_0x5f4df4+=(Graphics[_0x44cae0(0x781)]-Graphics[_0x44cae0(0x83e)])/0x2,_0x382fd7+=(Graphics['height']-Graphics[_0x44cae0(0x6cb)])/0x2;if(_0x36703d[_0x44cae0(0x2b2)](/front/i)){if(_0x44cae0(0x53a)==='UawNq'){function _0x431193(){_0x138817=_0x197f0d(_0x1effc4['$1']),_0x526e86=_0xd3c781(_0x4cd627['$2']);}}else _0x5f4df4+=(_0x16950e['isEnemy']()?0x1:-0x1)*_0x2a1d68[_0x44cae0(0x745)]()/0x2;}else{if(_0x36703d[_0x44cae0(0x2b2)](/back/i)){if(_0x44cae0(0x4e1)===_0x44cae0(0x41c)){function _0x30513e(){const _0x115914=_0x44cae0;_0x2d1eb8[_0x115914(0x499)][_0x115914(0xb25)][_0x115914(0x37c)](this,_0x4974b6),_0x16fa36[_0x115914(0x3eb)]();}}else _0x5f4df4+=(_0x16950e['isEnemy']()?-0x1:0x1)*_0x2a1d68[_0x44cae0(0x745)]()/0x2;}}if(_0x36703d[_0x44cae0(0x2b2)](/head/i))_0x382fd7-=_0x2a1d68[_0x44cae0(0x60a)]();else _0x36703d[_0x44cae0(0x2b2)](/center/i)&&(_0x382fd7-=_0x2a1d68[_0x44cae0(0x60a)]()/0x2);_0x5f4df4+=_0x169d41,_0x382fd7+=_0xd3934b,_0x2bd053[_0x44cae0(0xb29)](_0x5f4df4,_0x382fd7,_0x1b568d,_0x4b97e9,_0xcf8db5);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x92f),_0x290950=>{const _0x14d8ed=_0x4ca73a;if(!SceneManager[_0x14d8ed(0xb22)]())return;if(!Imported[_0x14d8ed(0x667)])return;const _0x100fec=SceneManager[_0x14d8ed(0x612)][_0x14d8ed(0xa38)];if(!_0x100fec)return;VisuMZ['ConvertParams'](_0x290950,_0x290950);const _0xe25ebc=VisuMZ[_0x14d8ed(0x871)](_0x290950[_0x14d8ed(0x6f8)]),_0x572385=_0x290950['TargetLocation'],_0x4d4dd0=_0x290950[_0x14d8ed(0x3f3)]||0x0,_0x2effb3=_0x290950[_0x14d8ed(0x7ad)]||0x0,_0x530731=_0x290950[_0x14d8ed(0x48b)]||0x0,_0x1547bb=_0x290950['Wave']||0x0,_0x3ed8d4=_0x290950[_0x14d8ed(0xa3b)]||0x1,_0x3aaa58=Math[_0x14d8ed(0x455)](..._0xe25ebc[_0x14d8ed(0x8f9)](_0x2a3506=>_0x2a3506[_0x14d8ed(0x4f6)]()['_baseX']-_0x2a3506['battler']()['mainSpriteWidth']()/0x2)),_0x5a8561=Math['max'](..._0xe25ebc[_0x14d8ed(0x8f9)](_0x52c9a4=>_0x52c9a4[_0x14d8ed(0x4f6)]()[_0x14d8ed(0x9e9)]+_0x52c9a4['battler']()[_0x14d8ed(0x745)]()/0x2)),_0x228f47=Math[_0x14d8ed(0x455)](..._0xe25ebc[_0x14d8ed(0x8f9)](_0x530535=>_0x530535[_0x14d8ed(0x4f6)]()[_0x14d8ed(0xa56)]-_0x530535[_0x14d8ed(0x4f6)]()['mainSpriteHeight']())),_0x3f28b9=Math['max'](..._0xe25ebc[_0x14d8ed(0x8f9)](_0x7648a9=>_0x7648a9[_0x14d8ed(0x4f6)]()[_0x14d8ed(0xa56)])),_0x2ec033=_0xe25ebc['filter'](_0x25c2f2=>_0x25c2f2[_0x14d8ed(0x4bb)]())[_0x14d8ed(0x73b)],_0x4b943f=_0xe25ebc[_0x14d8ed(0x5be)](_0x27408a=>_0x27408a['isEnemy']())['length'];let _0x162ed0=0x0,_0x5a7181=0x0;if(_0x572385[_0x14d8ed(0x2b2)](/front/i)){if(_0x14d8ed(0x509)==='Gzojs'){function _0x25eab3(){const _0x30f0ae=_0x14d8ed;this[_0x30f0ae(0x4ac)]=this[_0x30f0ae(0x7e7)](this[_0x30f0ae(0x4ac)],this['_targetFloatHeight'],_0x50ba39,_0x395876,_0x5ef8f3);}}else _0x162ed0=_0x2ec033>=_0x4b943f?_0x3aaa58:_0x5a8561;}else{if(_0x572385[_0x14d8ed(0x2b2)](/middle/i))_0x162ed0=(_0x3aaa58+_0x5a8561)/0x2,melee=-0x1;else{if(_0x572385['match'](/back/i)){if(_0x14d8ed(0xa5d)==='IAPQi'){function _0x53244e(){const _0x26facb=_0x14d8ed;_0x32a31f['BattleCore']['Window_BattleLog_popBaseLine']['call'](this),this[_0x26facb(0x705)](),this['callNextMethod']();}}else _0x162ed0=_0x2ec033>=_0x4b943f?_0x5a8561:_0x3aaa58;}}}if(_0x572385[_0x14d8ed(0x2b2)](/head/i))_0x5a7181=_0x228f47;else{if(_0x572385[_0x14d8ed(0x2b2)](/center/i))_0x5a7181=(_0x228f47+_0x3f28b9)/0x2;else _0x572385[_0x14d8ed(0x2b2)](/base/i)&&(_0x5a7181=_0x3f28b9);}_0x162ed0+=(Graphics[_0x14d8ed(0x781)]-Graphics[_0x14d8ed(0x83e)])/0x2,_0x5a7181+=(Graphics['height']-Graphics[_0x14d8ed(0x6cb)])/0x2,_0x162ed0+=_0x4d4dd0,_0x5a7181+=_0x2effb3,_0x100fec[_0x14d8ed(0xb29)](_0x162ed0,_0x5a7181,_0x530731,_0x1547bb,_0x3ed8d4);}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x1f6),_0x4c3499=>{const _0x17a78b=_0x4ca73a;if(!Imported[_0x17a78b(0x667)])return;const _0x5affba=SceneManager[_0x17a78b(0x612)]['_spriteset'];if(!_0x5affba)return;VisuMZ[_0x17a78b(0x8d4)](_0x4c3499,_0x4c3499);const _0x15d6ba=_0x4c3499['X']||0x0,_0x3a4ea5=_0x4c3499['Y']||0x0,_0x573a16=_0x4c3499[_0x17a78b(0x9ba)]||0x0,_0x5c1d6b=_0x4c3499['Radius']||0x0,_0x22e649=_0x4c3499['Duration']||0x1,_0xf815a7=_0x4c3499['EasingType']||'Linear';_0x5affba['setupZoomBlurImpactFilter'](_0x573a16,_0x15d6ba,_0x3a4ea5,_0x5c1d6b,_0x22e649,_0xf815a7);}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0x939),_0x159339=>{const _0x460ffe=_0x4ca73a;if(!Imported[_0x460ffe(0x667)])return;const _0x535faf=SceneManager[_0x460ffe(0x612)][_0x460ffe(0xa38)];if(!_0x535faf)return;VisuMZ[_0x460ffe(0x8d4)](_0x159339,_0x159339);const _0x189852=VisuMZ[_0x460ffe(0x871)](_0x159339[_0x460ffe(0x6f8)]),_0xbaaaf2=_0x159339[_0x460ffe(0x43a)],_0x3ee6fe=_0x159339[_0x460ffe(0x3f3)]||0x0,_0x5bf230=_0x159339[_0x460ffe(0x7ad)]||0x0,_0x272022=_0x159339['Strength']||0x0,_0x44b693=_0x159339[_0x460ffe(0xb80)]||0x0,_0x526b46=_0x159339[_0x460ffe(0xa3b)]||0x1,_0x3a7aa0=_0x159339[_0x460ffe(0x283)]||'Linear',_0x24031d=Math[_0x460ffe(0x455)](..._0x189852[_0x460ffe(0x8f9)](_0x4d2c6a=>_0x4d2c6a[_0x460ffe(0x4f6)]()['_baseX']-_0x4d2c6a[_0x460ffe(0x4f6)]()['mainSpriteWidth']()/0x2)),_0x37343f=Math[_0x460ffe(0x826)](..._0x189852['map'](_0x19ab86=>_0x19ab86['battler']()['_baseX']+_0x19ab86[_0x460ffe(0x4f6)]()[_0x460ffe(0x745)]()/0x2)),_0x5a1aa5=Math[_0x460ffe(0x455)](..._0x189852[_0x460ffe(0x8f9)](_0x6410de=>_0x6410de['battler']()[_0x460ffe(0xa56)]-_0x6410de[_0x460ffe(0x4f6)]()[_0x460ffe(0x60a)]())),_0xe9130e=Math[_0x460ffe(0x826)](..._0x189852[_0x460ffe(0x8f9)](_0x318d25=>_0x318d25['battler']()['_baseY'])),_0xbe5c8c=_0x189852[_0x460ffe(0x5be)](_0x4753a6=>_0x4753a6[_0x460ffe(0x4bb)]())[_0x460ffe(0x73b)],_0x4b60fe=_0x189852['filter'](_0x35dbe=>_0x35dbe['isEnemy']())['length'];let _0x110798=0x0,_0x58955a=0x0;if(_0xbaaaf2[_0x460ffe(0x2b2)](/front/i))_0x110798=_0xbe5c8c>=_0x4b60fe?_0x24031d:_0x37343f;else{if(_0xbaaaf2['match'](/middle/i))_0x110798=(_0x24031d+_0x37343f)/0x2,melee=-0x1;else{if(_0xbaaaf2[_0x460ffe(0x2b2)](/back/i)){if(_0x460ffe(0x601)!==_0x460ffe(0x601)){function _0x2c1a26(){const _0x964025=_0x460ffe;this[_0x964025(0x3b7)](_0x964025(0xa07));}}else _0x110798=_0xbe5c8c>=_0x4b60fe?_0x37343f:_0x24031d;}}}if(_0xbaaaf2['match'](/head/i)){if(_0x460ffe(0x2c6)!==_0x460ffe(0x2c6)){function _0x127a72(){const _0x9cfc8b=_0x460ffe,_0x2af0e1=this[_0x9cfc8b(0xaee)];_0x2af0e1[_0x9cfc8b(0x709)](_0x15107f,0x0,_0x44fd96['y'],_0x2af0e1[_0x9cfc8b(0x87b)],_0x9cfc8b(0x989));}}else _0x58955a=_0x5a1aa5;}else{if(_0xbaaaf2[_0x460ffe(0x2b2)](/center/i)){if(_0x460ffe(0x9e1)!==_0x460ffe(0x9e1)){function _0x131f71(){const _0x401456=_0x460ffe;_0x77d642[_0x453136]===0x1&&this[_0x401456(0x59b)]!==_0x88d184&&(_0x27ce10[_0x3616c1]=null);}}else _0x58955a=(_0x5a1aa5+_0xe9130e)/0x2;}else _0xbaaaf2['match'](/base/i)&&(_0x58955a=_0xe9130e);}_0x110798+=(Graphics[_0x460ffe(0x781)]-Graphics[_0x460ffe(0x83e)])/0x2,_0x58955a+=(Graphics[_0x460ffe(0x38c)]-Graphics[_0x460ffe(0x6cb)])/0x2,_0x110798+=_0x3ee6fe,_0x58955a+=_0x5bf230,_0x535faf[_0x460ffe(0x983)](_0x272022,_0x110798,_0x58955a,_0x44b693,_0x526b46,_0x3a7aa0);}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xa3d),_0x379ed4=>{const _0x3c6a31=_0x4ca73a;if(!SceneManager[_0x3c6a31(0xb22)]())return;VisuMZ['ConvertParams'](_0x379ed4,_0x379ed4);const _0x15a09f=$gameTemp['getLastPluginCommandInterpreter'](),_0x2b7ebd=BattleManager[_0x3c6a31(0x40d)],_0x43e0fa=BattleManager['_subject'],_0x18cbf7=BattleManager[_0x3c6a31(0x526)];if(!_0x15a09f||!_0x2b7ebd||!_0x43e0fa)return;if(!_0x2b7ebd[_0x3c6a31(0xa07)]())return;const _0x4d1876=VisuMZ[_0x3c6a31(0x871)](_0x379ed4['Targets']);for(const _0x263364 of _0x4d1876){if(_0x3c6a31(0x29c)!==_0x3c6a31(0x575)){if(!_0x263364)continue;_0x18cbf7[_0x3c6a31(0x1ee)]('actionEffect',_0x43e0fa,_0x263364);}else{function _0x1d6c80(){const _0x19065e=_0x3c6a31;return _0x2d6f11[_0x19065e(0x1d4)]()[_0x19065e(0x5be)](_0x2ec10b=>_0x2ec10b!==_0x53f657);}}}_0x15a09f['setWaitMode'](_0x3c6a31(0x243));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x53e),_0x45e6ff=>{const _0x598009=_0x4ca73a;if(!SceneManager[_0x598009(0xb22)]())return;VisuMZ[_0x598009(0x8d4)](_0x45e6ff,_0x45e6ff);const _0x2868af=['MAXHP',_0x598009(0x3af),_0x598009(0xa86),_0x598009(0x71d),_0x598009(0xacd),_0x598009(0xb92),'AGI','LUK'],_0x4f40c0=_0x45e6ff['Buffs'],_0x290629=_0x45e6ff[_0x598009(0x2f3)],_0x396d5b=_0x45e6ff[_0x598009(0x280)],_0x2b3b9e=VisuMZ[_0x598009(0x871)](_0x45e6ff[_0x598009(0x6f8)]);for(const _0x284fcc of _0x2b3b9e){if('tuRQC'!==_0x598009(0x967)){function _0x47f34b(){const _0x3445ff=_0x598009;return 0x1*this[_0x3445ff(0x7ea)];}}else{if(!_0x284fcc)continue;for(const _0x53a55c of _0x4f40c0){const _0x5c730b=_0x2868af[_0x598009(0x621)](_0x53a55c[_0x598009(0x941)]()[_0x598009(0x7d2)]());_0x5c730b>=0x0&&_0x5c730b<=0x7&&_0x284fcc[_0x598009(0xa43)](_0x5c730b,_0x396d5b);}for(const _0x3382e1 of _0x290629){const _0x45fcdb=_0x2868af[_0x598009(0x621)](_0x3382e1['toUpperCase']()[_0x598009(0x7d2)]());_0x45fcdb>=0x0&&_0x45fcdb<=0x7&&_0x284fcc[_0x598009(0xaf6)](_0x45fcdb,_0x396d5b);}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x5a6),_0x4db9bc=>{const _0x60b75=_0x4ca73a;if(!SceneManager[_0x60b75(0xb22)]())return;VisuMZ[_0x60b75(0x8d4)](_0x4db9bc,_0x4db9bc);const _0x2d867c=_0x4db9bc['States'],_0x4ab913=VisuMZ[_0x60b75(0x871)](_0x4db9bc[_0x60b75(0x6f8)]);for(const _0xe7cf75 of _0x4ab913){if(!_0xe7cf75)continue;for(const _0xbfa2af of _0x2d867c){_0xe7cf75[_0x60b75(0x86a)](_0xbfa2af);}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xb76),_0xcb5583=>{const _0x5622ab=_0x4ca73a;if(!SceneManager[_0x5622ab(0xb22)]())return;VisuMZ[_0x5622ab(0x8d4)](_0xcb5583,_0xcb5583);const _0xf0ad75=BattleManager['_action'],_0x508653={'arPenRate':_0xcb5583[_0x5622ab(0x5e9)],'arPenFlat':_0xcb5583[_0x5622ab(0x27a)],'arRedRate':_0xcb5583[_0x5622ab(0x359)],'arRedFlat':_0xcb5583[_0x5622ab(0xaac)]};_0xf0ad75[_0x5622ab(0x4aa)]=_0x508653;}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x582),_0x83b5c3=>{const _0x57f3f=_0x4ca73a;if(!SceneManager[_0x57f3f(0xb22)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x57f3f(0x8d4)](_0x83b5c3,_0x83b5c3);const _0x660028=VisuMZ[_0x57f3f(0x871)](_0x83b5c3['Targets']),_0x533543=_0x83b5c3[_0x57f3f(0x5e3)]||0x1;for(const _0x345aa5 of _0x660028){if(!_0x345aa5)continue;if(!_0x345aa5[_0x57f3f(0xa95)]())continue;_0x345aa5[_0x57f3f(0x1cc)](_0x533543);}}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xaf5),_0x30edf3=>{const _0x525553=_0x4ca73a;if(!SceneManager[_0x525553(0xb22)]())return;if(!Imported[_0x525553(0x437)])return;VisuMZ[_0x525553(0x8d4)](_0x30edf3,_0x30edf3);const _0x227a9f=VisuMZ[_0x525553(0x871)](_0x30edf3['Targets']),_0x2f81af=_0x30edf3[_0x525553(0x3da)],_0xb7727e=_0x30edf3[_0x525553(0x3da)],_0x1f8ad8=_0x30edf3[_0x525553(0x861)];for(const _0x21edc0 of _0x227a9f){if(!_0x21edc0)continue;if(_0x21edc0[_0x525553(0x934)]()){if(_0x525553(0x987)==='dtYkH'){function _0x581d77(){const _0x599e3a=_0x525553;if(!_0x1e77ef[_0x599e3a(0xb22)]())return;const _0x3ba226=_0x49d8ee[_0x599e3a(0x260)]();if(!_0x3ba226)return;_0x3ba226[_0x599e3a(0x728)](_0x599e3a(0x3a3));}}else _0x21edc0['changeAtbChargeTime'](_0x2f81af);}else{if(_0x21edc0[_0x525553(0x7f5)]()){_0x21edc0[_0x525553(0x4de)](_0xb7727e);if(_0x1f8ad8)_0x21edc0['atbInterrupt']();}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x890),_0x58711a=>{const _0x544d49=_0x4ca73a;if(!SceneManager[_0x544d49(0xb22)]())return;if(!Imported[_0x544d49(0x1d7)])return;VisuMZ[_0x544d49(0x8d4)](_0x58711a,_0x58711a);const _0x3287ed=VisuMZ['CreateActionSequenceTargets'](_0x58711a[_0x544d49(0x6f8)]),_0x3a5f88=_0x58711a[_0x544d49(0x318)];for(const _0x2997f4 of _0x3287ed){if(!_0x2997f4)continue;_0x2997f4['gainStoredBoostPoints'](_0x3a5f88);}}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x5ee),_0x370318=>{const _0x138404=_0x4ca73a;if(!SceneManager[_0x138404(0xb22)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x138404(0xb88)])return;VisuMZ[_0x138404(0x8d4)](_0x370318,_0x370318);const _0x5cea5f=_0x370318[_0x138404(0x9f3)];$gameVariables[_0x138404(0xad1)](_0x5cea5f,BattleManager['_subject'][_0x138404(0xa7c)]());}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Mechanics_BreakShieldChange',_0x120e44=>{const _0x880944=_0x4ca73a;if(!SceneManager[_0x880944(0xb22)]())return;if(!Imported[_0x880944(0x5bc)])return;VisuMZ[_0x880944(0x8d4)](_0x120e44,_0x120e44);const _0x453889=VisuMZ[_0x880944(0x871)](_0x120e44[_0x880944(0x6f8)]),_0x32ed14=_0x120e44['BreakShields'];for(const _0x5c1a16 of _0x453889){if(!_0x5c1a16)continue;if(_0x5c1a16[_0x880944(0xa61)]())continue;if(!_0x5c1a16[_0x880944(0xad8)]())continue;_0x5c1a16[_0x880944(0x735)](_0x32ed14);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],'ActSeq_Mechanics_BreakShieldReset',_0x26af43=>{const _0x3666ae=_0x4ca73a;if(!SceneManager[_0x3666ae(0xb22)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x3666ae(0x8d4)](_0x26af43,_0x26af43);const _0x15fef8=VisuMZ[_0x3666ae(0x871)](_0x26af43['Targets']);for(const _0x410d60 of _0x15fef8){if(!_0x410d60)continue;if(_0x410d60[_0x3666ae(0xa61)]())continue;if(!_0x410d60[_0x3666ae(0xad8)]())continue;_0x410d60[_0x3666ae(0x7e4)]();}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x58f),_0x5bce2f=>{const _0x152e4e=_0x4ca73a;if(!SceneManager[_0x152e4e(0xb22)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;VisuMZ[_0x152e4e(0x8d4)](_0x5bce2f,_0x5bce2f);const _0x293f51=VisuMZ[_0x152e4e(0x871)](_0x5bce2f[_0x152e4e(0x6f8)]),_0x10ba54=_0x5bce2f['BravePoints'];for(const _0x4cbc31 of _0x293f51){if('Fvwsl'===_0x152e4e(0x200)){function _0x5e2487(){const _0x13fc09=_0x152e4e;_0x218be5=_0x2eec21[_0x13fc09(0x499)][_0x13fc09(0x5c3)][_0x13fc09(0x37c)](this);const _0x648901=_0x32ec4c[_0x13fc09(0x499)][_0x13fc09(0xa7e)](this[_0x13fc09(0xa07)](),_0x13fc09(0x6f8));return _0x195bbe=_0x225862[_0x13fc09(0x499)]['JS'][_0x648901][_0x13fc09(0x37c)](this,this[_0x13fc09(0x9d8)](),_0x4df54f),this['repeatTargets'](_0x12b3a3);}}else{if(!_0x4cbc31)continue;_0x4cbc31['gainBravePoints'](_0x10ba54);}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0x628),_0x35c3bf=>{const _0x36ff1d=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x36ff1d(0x8d4)](_0x35c3bf,_0x35c3bf);const _0x1c456d=$gameTemp[_0x36ff1d(0x260)](),_0x18bc58=BattleManager[_0x36ff1d(0x40d)],_0x1cc54c=BattleManager[_0x36ff1d(0xb88)];if(!_0x1c456d||!_0x18bc58||!_0x1cc54c)return;if(!_0x18bc58[_0x36ff1d(0xa07)]())return;const _0x55e132=VisuMZ[_0x36ff1d(0x871)](_0x35c3bf[_0x36ff1d(0x6f8)]);for(const _0x5b7336 of _0x55e132){if(_0x36ff1d(0x831)!==_0x36ff1d(0x831)){function _0x54ea71(){return!![];}}else{if(!_0x5b7336)continue;_0x35c3bf[_0x36ff1d(0x39a)]&&(_0x5b7336[_0x36ff1d(0x3f0)](),_0x5b7336['addState'](_0x5b7336[_0x36ff1d(0x49b)]()));if(_0x5b7336[_0x36ff1d(0x97d)]()){if(_0x36ff1d(0xb18)!==_0x36ff1d(0x898))_0x5b7336['performCollapse']();else{function _0x1eb417(){const _0x65088d=_0x36ff1d;return _0x65088d(0x747);}}}}}_0x1c456d[_0x36ff1d(0x728)](_0x36ff1d(0x30b));}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x2e8),_0x3de355=>{const _0x40314a=_0x4ca73a;if(!SceneManager[_0x40314a(0xb22)]())return;if(!Imported[_0x40314a(0x850)])return;VisuMZ[_0x40314a(0x8d4)](_0x3de355,_0x3de355);const _0x511d53=VisuMZ[_0x40314a(0x871)](_0x3de355[_0x40314a(0x6f8)]),_0x26480b=_0x3de355[_0x40314a(0x460)];for(const _0xbedf3d of _0x511d53){if('Zqudh'!==_0x40314a(0x1e8)){function _0x37530f(){const _0x1c91f2=_0x40314a;this['addChild'](this[_0x1c91f2(0x3be)]);}}else{if(!_0xbedf3d)continue;_0xbedf3d[_0x40314a(0x1c7)](_0x26480b);}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x722),_0x22b792=>{const _0x26fe8f=_0x4ca73a;if(!SceneManager[_0x26fe8f(0xb22)]())return;if(!Imported[_0x26fe8f(0x850)])return;VisuMZ[_0x26fe8f(0x8d4)](_0x22b792,_0x22b792);const _0x35dbf5=VisuMZ[_0x26fe8f(0x871)](_0x22b792[_0x26fe8f(0x6f8)]),_0xf06d3b=_0x22b792['ChargeRate'],_0x4e2c8f=_0x22b792[_0x26fe8f(0x3da)];for(const _0xa09b8f of _0x35dbf5){if(!_0xa09b8f)continue;if(_0xa09b8f[_0x26fe8f(0x59d)]===_0x26fe8f(0x33e))_0xa09b8f[_0x26fe8f(0x856)](_0xf06d3b);else _0xa09b8f[_0x26fe8f(0x59d)]===_0x26fe8f(0xb06)&&_0xa09b8f[_0x26fe8f(0x668)](_0x4e2c8f);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xa06),_0x11c0a5=>{const _0x922132=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x11c0a5,_0x11c0a5);const _0x1d7385=BattleManager['_action'];if(!_0x1d7385)return;let _0x479d36=_0x11c0a5[_0x922132(0x369)];_0x1d7385[_0x922132(0x597)](_0x479d36);}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x736),_0x51f822=>{const _0x1c8c35=_0x4ca73a;if(!SceneManager[_0x1c8c35(0xb22)]())return;VisuMZ[_0x1c8c35(0x8d4)](_0x51f822,_0x51f822);const _0x404863=VisuMZ['CreateActionSequenceTargets'](_0x51f822[_0x1c8c35(0x6f8)]);for(const _0x2a6807 of _0x404863){if(_0x1c8c35(0x836)===_0x1c8c35(0x836)){if(!_0x2a6807)continue;if(_0x2a6807[_0x1c8c35(0x948)]())_0x2a6807['startDamagePopup']();}else{function _0x165f0b(){const _0x3dbf7b=_0x1c8c35;_0x3f8aeb[_0x3dbf7b(0x358)]=_0x1dca1c(_0x150f23['$1'])[_0x3dbf7b(0x3c1)]()[_0x3dbf7b(0x7d2)]();}}}}),PluginManager['registerCommand'](pluginData['name'],_0x4ca73a(0x787),_0x20f0af=>{const _0x87667b=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x20f0af,_0x20f0af);const _0x3590cb=$gameTemp['getLastPluginCommandInterpreter'](),_0x22b03c=BattleManager[_0x87667b(0xb88)],_0x1a1761=_0x20f0af['JumpToLabel'];if(!_0x3590cb)return;if(!_0x22b03c)return;_0x22b03c&&_0x22b03c[_0x87667b(0x6ee)]()&&_0x1a1761[_0x87667b(0x941)]()[_0x87667b(0x7d2)]()!==_0x87667b(0x480)&&_0x3590cb['command119']([_0x1a1761]);}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xae5),_0x147a42=>{const _0x1e6e44=_0x4ca73a;if(!SceneManager[_0x1e6e44(0xb22)]())return;if(!Imported[_0x1e6e44(0x5d9)])return;VisuMZ['ConvertParams'](_0x147a42,_0x147a42);const _0x1c69e9=_0x147a42[_0x1e6e44(0x5ad)];BattleManager[_0x1e6e44(0xb88)]&&BattleManager['_subject'][_0x1e6e44(0x512)]()[_0x1e6e44(0x4bf)](_0x1c69e9);}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xa0a),_0x30ee66=>{const _0x211c23=_0x4ca73a;if(!SceneManager[_0x211c23(0xb22)]())return;VisuMZ[_0x211c23(0x8d4)](_0x30ee66,_0x30ee66);const _0x2cfe64=VisuMZ[_0x211c23(0x871)](_0x30ee66[_0x211c23(0x6f8)]),_0x43ed46=_0x30ee66['HP_Rate'],_0x3e675a=_0x30ee66[_0x211c23(0x883)],_0x4041d8=_0x30ee66[_0x211c23(0x52b)],_0x5f03a7=_0x30ee66[_0x211c23(0x3a2)],_0x4e0cf4=_0x30ee66[_0x211c23(0x6a0)],_0x1c1e41=_0x30ee66[_0x211c23(0x82a)],_0x55e762=_0x30ee66['ShowPopup'];for(const _0x27f9c3 of _0x2cfe64){if(_0x211c23(0x741)===_0x211c23(0x413)){function _0x40c291(){const _0x5770b7=_0x211c23,_0x1ed45b=this['_flinched'];this[_0x5770b7(0x553)]=![];if(_0x5013ed[_0x5770b7(0xae9)]()&&this[_0x5770b7(0x484)]()){const _0x4db6a8=this[_0x5770b7(0x4f6)]();if(_0x4db6a8&&_0x1ed45b)_0x4db6a8[_0x5770b7(0x25d)]();return;}const _0x43ed28=this[_0x5770b7(0x4f6)]();if(_0x43ed28)_0x43ed28[_0x5770b7(0x4fe)]();this[_0x5770b7(0x87c)](![]),this['requestMotionRefresh']();}}else{if(!_0x27f9c3)continue;const _0x143a66=_0x27f9c3[_0x211c23(0xb34)](),_0x4a7994=Math[_0x211c23(0x555)](_0x43ed46*_0x27f9c3[_0x211c23(0x1ec)]+_0x3e675a),_0x4eee14=Math[_0x211c23(0x555)](_0x4041d8*_0x27f9c3[_0x211c23(0x45a)]+_0x5f03a7),_0x10d4eb=Math[_0x211c23(0x555)](_0x4e0cf4*_0x27f9c3['maxTp']()+_0x1c1e41);if(_0x4a7994!==0x0)_0x27f9c3['gainHp'](_0x4a7994);if(_0x4eee14!==0x0)_0x27f9c3['gainMp'](_0x4eee14);if(_0x10d4eb!==0x0)_0x27f9c3[_0x211c23(0x768)](_0x10d4eb);if(_0x55e762)_0x27f9c3['startDamagePopup']();if(_0x143a66&&_0x27f9c3[_0x211c23(0x6ee)]()){if(_0x211c23(0x210)!==_0x211c23(0x9df))_0x27f9c3[_0x211c23(0xb7d)]();else{function _0x580271(){const _0x2238bc=_0x211c23,_0x10e9a0=new _0x14e5eb();return _0x3991d3[_0x38c6a6]=_0x10e9a0,this[_0x2238bc(0x5ac)](_0x10e9a0),this[_0x2238bc(0x5ac)](this['_cursorArea']),_0x10e9a0;}}}}}}),PluginManager['registerCommand'](pluginData['name'],_0x4ca73a(0x6ca),_0x4bd30c=>{const _0x87620f=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x87620f(0x8d4)](_0x4bd30c,_0x4bd30c);const _0x9ee805=VisuMZ['CreateActionSequenceTargets'](_0x4bd30c[_0x87620f(0x6f8)]);for(const _0x207b5a of _0x9ee805){if(!_0x207b5a)continue;_0x207b5a[_0x87620f(0x381)](_0x4bd30c[_0x87620f(0x195)]);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x464),_0x354d38=>{const _0x2431e9=_0x4ca73a;if(!SceneManager[_0x2431e9(0xb22)]())return;VisuMZ[_0x2431e9(0x8d4)](_0x354d38,_0x354d38);const _0x28a432=BattleManager['_action'],_0x269171={'criticalHitRate':_0x354d38[_0x2431e9(0x676)],'criticalHitFlat':_0x354d38[_0x2431e9(0x406)],'criticalDmgRate':_0x354d38['CriticalDmgRate'],'criticalDmgFlat':_0x354d38[_0x2431e9(0x378)],'damageRate':_0x354d38['DamageRate'],'damageFlat':_0x354d38[_0x2431e9(0x471)],'hitRate':_0x354d38[_0x2431e9(0x734)],'hitFlat':_0x354d38[_0x2431e9(0x32f)]};_0x28a432[_0x2431e9(0x78b)]=_0x269171;}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x573),_0x295c6c=>{const _0x5094d7=_0x4ca73a;if(!SceneManager[_0x5094d7(0xb22)]())return;if(!Imported[_0x5094d7(0x478)])return;VisuMZ[_0x5094d7(0x8d4)](_0x295c6c,_0x295c6c);const _0x1e75fc=VisuMZ[_0x5094d7(0x871)](_0x295c6c[_0x5094d7(0x6f8)]);for(const _0x195420 of _0x1e75fc){if(!_0x195420)continue;let _0x2c1c3f=_0x295c6c['CurrentTurn'],_0x6172b3=_0x295c6c[_0x5094d7(0xb53)],_0x42d19e=_0x295c6c['FollowTurn'];if(BattleManager[_0x5094d7(0x5ae)][_0x5094d7(0x93d)](_0x195420)){if(_0x5094d7(0x6bd)===_0x5094d7(0x6bd))_0x2c1c3f+=_0x42d19e;else{function _0x2d01b3(){const _0x558aa9=_0x5094d7,_0x118491=this[_0x558aa9(0x9bf)];if(_0x118491[_0x1493af])return _0x118491[_0x45153b];else{const _0x5075b2=new _0x629d3c();return _0x118491[_0x52d2c3]=_0x5075b2,this[_0x558aa9(0x5ac)](_0x5075b2),this[_0x558aa9(0x5ac)](this[_0x558aa9(0x74d)]),_0x5075b2;}}}}else _0x6172b3+=_0x42d19e;BattleManager[_0x5094d7(0x252)](_0x195420,-_0x2c1c3f,![]),BattleManager[_0x5094d7(0x252)](_0x195420,-_0x6172b3,!![]);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x3ee),_0x139bcc=>{const _0x199650=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x199650(0x8d4)](_0x139bcc,_0x139bcc);const _0xa7537f=[_0x199650(0x979),_0x199650(0x3af),_0x199650(0xa86),'DEF','MAT','MDF',_0x199650(0xb1f),_0x199650(0x960)],_0x530853=_0x139bcc[_0x199650(0x596)],_0x44e8b3=_0x139bcc[_0x199650(0x2f3)],_0x245784=VisuMZ[_0x199650(0x871)](_0x139bcc[_0x199650(0x6f8)]);for(const _0x5a109f of _0x245784){if(!_0x5a109f)continue;for(const _0x1b3ef1 of _0x530853){const _0x5db335=_0xa7537f[_0x199650(0x621)](_0x1b3ef1[_0x199650(0x941)]()[_0x199650(0x7d2)]());_0x5db335>=0x0&&_0x5db335<=0x7&&_0x5a109f[_0x199650(0x927)](_0x5db335)&&_0x5a109f[_0x199650(0x302)](_0x5db335);}for(const _0x4b646f of _0x44e8b3){if(_0x199650(0x5d0)===_0x199650(0x84c)){function _0x45e59e(){_0x36b691=_0x32fb1f;}}else{const _0x1fe437=_0xa7537f[_0x199650(0x621)](_0x4b646f[_0x199650(0x941)]()[_0x199650(0x7d2)]());_0x1fe437>=0x0&&_0x1fe437<=0x7&&_0x5a109f[_0x199650(0x419)](_0x1fe437)&&_0x5a109f[_0x199650(0x302)](_0x1fe437);}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xafe),_0x3e1310=>{const _0x4bdf04=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4bdf04(0x8d4)](_0x3e1310,_0x3e1310);const _0x19653d=_0x3e1310[_0x4bdf04(0x31f)],_0xa30c8b=VisuMZ['CreateActionSequenceTargets'](_0x3e1310[_0x4bdf04(0x6f8)]);for(const _0x27a897 of _0xa30c8b){if(_0x4bdf04(0x2f1)!==_0x4bdf04(0x2f1)){function _0x454455(){const _0x99dbdb=_0x4bdf04;return this[_0x99dbdb(0x473)]=this[_0x99dbdb(0x473)]||{},this[_0x99dbdb(0x473)][_0x342c5a]!==_0x5de54c;}}else{if(!_0x27a897)continue;for(const _0x13ef92 of _0x19653d){if(_0x4bdf04(0x69b)!==_0x4bdf04(0x69b)){function _0x43afb4(){const _0x264e24=_0x4bdf04;this[_0x264e24(0x3ff)]();}}else _0x27a897[_0x4bdf04(0x321)](_0x13ef92);}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x869),_0x29e298=>{const _0x489e6b=_0x4ca73a;if(!SceneManager[_0x489e6b(0xb22)]())return;if(!Imported[_0x489e6b(0x300)])return;VisuMZ[_0x489e6b(0x8d4)](_0x29e298,_0x29e298);const _0x729158=_0x29e298[_0x489e6b(0x35e)],_0x20c2c4=VisuMZ[_0x489e6b(0x871)](_0x29e298[_0x489e6b(0x6f8)]),_0x56790c=_0x29e298[_0x489e6b(0xb60)],_0x4aa294=_0x29e298[_0x489e6b(0x73e)],_0x262398=_0x29e298[_0x489e6b(0x7ca)],_0xab1583=BattleManager[_0x489e6b(0x40d)];if(_0x729158)for(const _0x575e98 of _0x20c2c4){if(!_0x575e98)continue;if(_0x575e98===user)continue;if(_0x56790c)_0x575e98[_0x489e6b(0x2b0)](![]);_0x575e98['becomeSTBExploited'](BattleManager[_0x489e6b(0xb88)],_0xab1583);}if(_0x4aa294&&BattleManager[_0x489e6b(0xb88)]){if(_0x262398)BattleManager['_subject']['setSTBExploited'](![]);const _0x568281=_0x20c2c4[0x0];BattleManager['performSTBExploiter'](_0x568281,_0xab1583);}}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],'ActSeq_Mechanics_StbExtraAction',_0x475522=>{const _0x20da40=_0x4ca73a;if(!SceneManager[_0x20da40(0xb22)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;VisuMZ[_0x20da40(0x8d4)](_0x475522,_0x475522);const _0x1b28e6=_0x475522['Actions'];BattleManager[_0x20da40(0xb88)]&&BattleManager[_0x20da40(0xb88)][_0x20da40(0xb2e)](_0x1b28e6);}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x658),_0x118750=>{const _0x580e80=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x580e80(0x300)])return;VisuMZ[_0x580e80(0x8d4)](_0x118750,_0x118750);let _0x5a2f9a=_0x118750[_0x580e80(0x266)];if(BattleManager['_subject']){if(_0x580e80(0xa64)!==_0x580e80(0x349)){BattleManager[_0x580e80(0xb88)][_0x580e80(0x8d3)]=BattleManager[_0x580e80(0xb88)][_0x580e80(0x8d3)]||[];while(_0x5a2f9a--){if(BattleManager[_0x580e80(0xb88)]['_actions'][_0x580e80(0x73b)]<=0x0)break;BattleManager[_0x580e80(0xb88)][_0x580e80(0x8d3)][_0x580e80(0x6b6)]();}}else{function _0x22be82(){const _0x5dce99=_0x580e80;return this['parent']?this['parent'][_0x5dce99(0x5b2)]===0x0&&this[_0x5dce99(0x8be)][_0x5dce99(0x775)]===0x0:!![];}}}}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x5c0),_0x5b6f2d=>{const _0x1395fa=_0x4ca73a;if(!SceneManager[_0x1395fa(0xb22)]())return;if(!Imported[_0x1395fa(0x1a0)])return;VisuMZ[_0x1395fa(0x8d4)](_0x5b6f2d,_0x5b6f2d);const _0xba0c9e=VisuMZ[_0x1395fa(0x871)](_0x5b6f2d['Targets']),_0x1ec675=_0x5b6f2d[_0x1395fa(0x3f2)];for(const _0x46b002 of _0xba0c9e){if(!_0x46b002)continue;if(!_0x46b002['isActor']())continue;_0x46b002[_0x1395fa(0xb7b)](_0x1ec675);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x688),_0x1ba330=>{const _0x22c30c=_0x4ca73a;if(!SceneManager[_0x22c30c(0xb22)]())return;VisuMZ['ConvertParams'](_0x1ba330,_0x1ba330);const _0x232b37=VisuMZ[_0x22c30c(0x871)](_0x1ba330[_0x22c30c(0x6f8)]),_0x75c52d=_0x1ba330[_0x22c30c(0x982)],_0xe09cb5={'textColor':ColorManager['getColor'](_0x1ba330[_0x22c30c(0x795)]),'flashColor':_0x1ba330['FlashColor'],'flashDuration':_0x1ba330[_0x22c30c(0x429)]};for(const _0x4e3e76 of _0x232b37){if('PZXvR'!==_0x22c30c(0x6a6)){if(!_0x4e3e76)continue;_0x4e3e76[_0x22c30c(0xb0e)](_0x75c52d,_0xe09cb5);}else{function _0x4d0e51(){const _0x44dd75=_0x22c30c,_0x208aa9=this[_0x44dd75(0x2f7)](),_0x20cc46=_0x8c728d[_0x44dd75(0x499)][_0x44dd75(0x800)][_0x44dd75(0x327)][_0x44dd75(0x356)],_0xb95ee4=_0x208aa9==='text'?_0x48ab8e[_0x44dd75(0x656)]:_0x44dd75(0x30a)[_0x44dd75(0x26f)](_0x20cc46,_0x232001[_0x44dd75(0x656)]),_0x3cbc4c=this['isEscapeCommandEnabled']();this[_0x44dd75(0x459)](_0xb95ee4,_0x44dd75(0x656),_0x3cbc4c);}}}}),PluginManager['registerCommand'](pluginData['name'],_0x4ca73a(0x6d8),_0x397caa=>{const _0x4461f2=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x397caa,_0x397caa);const _0x47cf73=VisuMZ[_0x4461f2(0x871)](_0x397caa['Targets']);let _0x495814=$gameVariables['value'](_0x397caa['Variable']);Imported[_0x4461f2(0x5d1)]&&_0x397caa[_0x4461f2(0x8b4)]&&(_0x495814=VisuMZ['GroupDigits'](_0x495814));const _0xca833f=String(_0x495814),_0x31597a={'textColor':ColorManager[_0x4461f2(0x1c4)](_0x397caa['TextColor']),'flashColor':_0x397caa[_0x4461f2(0x8d0)],'flashDuration':_0x397caa[_0x4461f2(0x429)]};for(const _0x2177f4 of _0x47cf73){if(_0x4461f2(0x54f)===_0x4461f2(0x29d)){function _0x4eacb3(){const _0x22d443=_0x4461f2;if(!_0x3416ef[_0x22d443(0xb22)]())return;const _0x26c5fd=this['battler']();if(!_0x26c5fd)return;let _0x5ecf46=this[_0x22d443(0x4bb)]()?_0x26c5fd[_0x22d443(0xad7)]:_0x26c5fd['_svBattlerSprite'][_0x22d443(0xad7)];_0x5ecf46&&_0x5ecf46[_0x22d443(0x584)](0x0);}}else{if(!_0x2177f4)continue;_0x2177f4[_0x4461f2(0xb0e)](_0xca833f,_0x31597a);}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0x2b6),_0x15c875=>{const _0x4e3bc9=_0x4ca73a;if(!SceneManager[_0x4e3bc9(0xb22)]())return;const _0x52784d=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x52784d)return;_0x52784d['setWaitMode'](_0x4e3bc9(0x30b));}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x2a8),_0x43f464=>{const _0xb6db0a=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x43f464,_0x43f464);const _0x1e5b7f=VisuMZ[_0xb6db0a(0x871)](_0x43f464[_0xb6db0a(0x6f8)]);for(const _0x184f08 of _0x1e5b7f){if(!_0x184f08)continue;_0x184f08[_0xb6db0a(0xa9d)]();}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x3a0),_0x39261a=>{const _0x51ad3b=_0x4ca73a;if(!SceneManager[_0x51ad3b(0xb22)]())return;VisuMZ[_0x51ad3b(0x8d4)](_0x39261a,_0x39261a);const _0x161573=VisuMZ[_0x51ad3b(0x871)](_0x39261a[_0x51ad3b(0x6f8)]),_0x5a8d94=_0x39261a[_0x51ad3b(0x323)][_0x51ad3b(0x3c1)]()[_0x51ad3b(0x7d2)](),_0x36162c=_0x39261a[_0x51ad3b(0x5b1)],_0x31be57=_0x39261a[_0x51ad3b(0x7d9)];for(const _0x252a41 of _0x161573){if(_0x51ad3b(0xadc)===_0x51ad3b(0x5c9)){function _0x355b1a(){const _0x58f34b=_0x51ad3b,_0x241019=_0x35407b(_0x42f2fc['$1'])[_0x58f34b(0x941)]()[_0x58f34b(0x7d2)]();if(_0x241019===_0x58f34b(0x776))return _0x58f34b(0x776);if(_0x1aeb2b[_0x58f34b(0x638)][_0x241019])return _0x241019;}}else{if(!_0x252a41)continue;_0x252a41[_0x51ad3b(0x67f)](_0x5a8d94,_0x36162c,_0x31be57);}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x30c),_0x16d011=>{const _0x511a56=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x511a56(0x8d4)](_0x16d011,_0x16d011);const _0x232707=VisuMZ['CreateActionSequenceTargets'](_0x16d011[_0x511a56(0x6f8)]),_0x55f145=_0x16d011['MotionType'][_0x511a56(0x3c1)]()['trim'](),_0xd48b72=_0x16d011['ShowWeapon'];for(const _0x648334 of _0x232707){if(_0x511a56(0x87d)===_0x511a56(0x6e9)){function _0x880be2(){const _0x3efbef=_0x511a56,_0x1b99cd=_0x5608e6(_0x449c9c['$1']);this[_0x3efbef(0x2f8)](_0x1b99cd);}}else{if(!_0x648334)continue;if(_0x55f145[_0x511a56(0x2b2)](/ATTACK[ ](\d+)/i)){if('LNTku'!==_0x511a56(0x53d))_0x648334[_0x511a56(0x846)](Number(RegExp['$1']));else{function _0x3ee6c3(){return!![];}}}else{if(_0x55f145===_0x511a56(0x9ea)){if(_0x511a56(0x8f4)!=='cNhkz')_0x648334[_0x511a56(0x404)]();else{function _0xa10b39(){const _0x2661b8=_0x511a56;this['x']=_0x29456d[_0x2661b8(0x83e)]-this[_0x2661b8(0xa68)]()[_0x2661b8(0x4f6)]()[_0x2661b8(0x9e9)];}}}else _0x648334[_0x511a56(0x3b7)](_0x55f145);}if(!_0xd48b72){if(_0x511a56(0x4b3)===_0x511a56(0x514)){function _0x1e13cb(){const _0x45e478=_0x511a56;if(!_0x1a3504[_0x45e478(0x6e0)](_0x35b39c))return!![];}}else _0x648334['startWeaponAnimation'](0x0);}else{if(_0xd48b72&&['thrust','swing',_0x511a56(0x1fd)][_0x511a56(0x93d)](_0x55f145)){}}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x7c6),_0x4a637f=>{const _0x40fdd0=_0x4ca73a;if(!SceneManager[_0x40fdd0(0xb22)]())return;VisuMZ[_0x40fdd0(0x8d4)](_0x4a637f,_0x4a637f);const _0x3b8fb4=BattleManager[_0x40fdd0(0x40d)];if(!_0x3b8fb4)return;if(!_0x3b8fb4['item']())return;const _0x3f9b45=VisuMZ[_0x40fdd0(0x871)](_0x4a637f[_0x40fdd0(0x6f8)]);for(const _0xb42395 of _0x3f9b45){if('vxoaW'===_0x40fdd0(0x9eb)){function _0x12f924(){const _0x1464cc=_0x40fdd0;_0x30f70a[_0x1464cc(0x2fd)](_0x3ea2d1),_0x579b90[_0x1464cc(0x2fd)](_0x359a7f);}}else{if(!_0xb42395)continue;_0xb42395[_0x40fdd0(0x3d9)](_0x3b8fb4);}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],'ActSeq_Motion_RefreshMotion',_0x149f2b=>{const _0x3c1a93=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x149f2b,_0x149f2b);const _0x4252f5=VisuMZ[_0x3c1a93(0x871)](_0x149f2b['Targets']);for(const _0x1ebc46 of _0x4252f5){if(!_0x1ebc46)continue;if(!_0x1ebc46[_0x3c1a93(0x4f6)]())continue;_0x1ebc46[_0x3c1a93(0x4f6)]()[_0x3c1a93(0x4bc)]();}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x27c),_0x409432=>{const _0x3917fb=_0x4ca73a;if(!SceneManager[_0x3917fb(0xb22)]())return;VisuMZ[_0x3917fb(0x8d4)](_0x409432,_0x409432);const _0x1639da=$gameTemp['getLastPluginCommandInterpreter'](),_0xb958b4=_0x409432[_0x3917fb(0x627)]*Sprite_Battler[_0x3917fb(0xaf9)];_0x1639da['wait'](_0xb958b4);}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Movement_BattleStep',_0xd3f3f7=>{const _0x52ad39=_0x4ca73a;if(!SceneManager[_0x52ad39(0xb22)]())return;VisuMZ[_0x52ad39(0x8d4)](_0xd3f3f7,_0xd3f3f7);const _0x29826d=$gameTemp[_0x52ad39(0x260)](),_0x577fc2=BattleManager[_0x52ad39(0x40d)];if(!_0x29826d||!_0x577fc2)return;if(!_0x577fc2[_0x52ad39(0xa07)]())return;const _0x3a6748=VisuMZ[_0x52ad39(0x871)](_0xd3f3f7[_0x52ad39(0x6f8)]);for(const _0x5224e7 of _0x3a6748){if(!_0x5224e7)continue;_0x5224e7[_0x52ad39(0x938)](_0x577fc2);}if(_0xd3f3f7[_0x52ad39(0x520)])_0x29826d[_0x52ad39(0x728)](_0x52ad39(0x99f));}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0xa78),_0x190e9d=>{const _0x3eae38=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x3eae38(0x395)]())return;VisuMZ[_0x3eae38(0x8d4)](_0x190e9d,_0x190e9d);const _0x14e458=VisuMZ[_0x3eae38(0x871)](_0x190e9d[_0x3eae38(0x6f8)]);let _0x1ef2b3=_0x190e9d['Direction']['match'](/back/i);for(const _0x4491aa of _0x14e458){if(_0x3eae38(0x9ef)!==_0x3eae38(0x995)){if(!_0x4491aa)continue;if(_0x190e9d[_0x3eae38(0x2b7)][_0x3eae38(0x2b2)](/rand/i))_0x1ef2b3=Math['randomInt'](0x2);_0x4491aa[_0x3eae38(0x87c)](!!_0x1ef2b3);}else{function _0x1238bc(){const _0x48a365=_0x3eae38;_0x886fd3=_0x1aabe4[this[_0x48a365(0x463)][_0x48a365(0x95a)]()];}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Movement_FacePoint',_0x5b5874=>{const _0x17e528=_0x4ca73a;if(!SceneManager[_0x17e528(0xb22)]())return;if(!$gameSystem[_0x17e528(0x395)]())return;VisuMZ['ConvertParams'](_0x5b5874,_0x5b5874);const _0x14dc47=VisuMZ['CreateActionSequenceTargets'](_0x5b5874[_0x17e528(0x6f8)]);let _0x5d53fd=_0x5b5874[_0x17e528(0xb61)];const _0x345085=_0x5b5874[_0x17e528(0x355)];for(const _0x42885f of _0x14dc47){if(_0x17e528(0x6d3)===_0x17e528(0x6d3)){if(!_0x42885f)continue;let _0x12ce5f=_0x42885f[_0x17e528(0x4f6)]()['_baseX'],_0x4b0f13=_0x42885f[_0x17e528(0x4f6)]()[_0x17e528(0xa56)];if(_0x5d53fd[_0x17e528(0x2b2)](/home/i)){if(_0x17e528(0x74c)===_0x17e528(0xad5)){function _0x2c1767(){const _0x39372f=_0x17e528;return _0x3e2d88['BattleCore'][_0x39372f(0x800)]['AutoBattle'][_0x39372f(0x48a)];}}else _0x12ce5f=_0x42885f['battler']()[_0x17e528(0x716)],_0x4b0f13=_0x42885f['battler']()[_0x17e528(0x80e)];}else{if(_0x5d53fd['match'](/center/i))_0x12ce5f=Graphics['boxWidth']/0x2,_0x4b0f13=Graphics[_0x17e528(0x6cb)]/0x2;else _0x5d53fd['match'](/point (\d+), (\d+)/i)&&(_0x12ce5f=Number(RegExp['$1']),_0x4b0f13=Number(RegExp['$2']));}_0x42885f['setBattlerFacePoint'](Math['round'](_0x12ce5f),Math[_0x17e528(0x555)](_0x4b0f13),!!_0x345085);}else{function _0x2f8762(){const _0xa3b252=_0x17e528;if(!_0x11ae07[_0xa3b252(0x6e0)](_0x35136e))return![];}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x5ed),_0x51557c=>{const _0x29a2e8=_0x4ca73a;if(!SceneManager[_0x29a2e8(0xb22)]())return;if(!$gameSystem[_0x29a2e8(0x395)]())return;VisuMZ[_0x29a2e8(0x8d4)](_0x51557c,_0x51557c);const _0x42fcae=VisuMZ[_0x29a2e8(0x871)](_0x51557c['Targets1']),_0x2060c2=VisuMZ['CreateActionSequenceTargets'](_0x51557c[_0x29a2e8(0xb21)]),_0x5a6fec=_0x2060c2[_0x29a2e8(0x8f9)](_0x102df7=>_0x102df7&&_0x102df7[_0x29a2e8(0x4f6)]()?_0x102df7[_0x29a2e8(0x4f6)]()[_0x29a2e8(0x9e9)]:0x0)/(_0x2060c2['length']||0x1),_0x582511=_0x2060c2[_0x29a2e8(0x8f9)](_0xe43ea8=>_0xe43ea8&&_0xe43ea8[_0x29a2e8(0x4f6)]()?_0xe43ea8[_0x29a2e8(0x4f6)]()[_0x29a2e8(0xa56)]:0x0)/(_0x2060c2[_0x29a2e8(0x73b)]||0x1),_0x27fb7c=_0x51557c[_0x29a2e8(0x355)];for(const _0x538e48 of _0x42fcae){if(!_0x538e48)continue;_0x538e48['setBattlerFacePoint'](Math[_0x29a2e8(0x555)](_0x5a6fec),Math[_0x29a2e8(0x555)](_0x582511),!!_0x27fb7c);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0xb44),_0x1f1826=>{const _0x23ff23=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x23ff23(0x8d4)](_0x1f1826,_0x1f1826);const _0x2ad4c6=$gameTemp[_0x23ff23(0x260)](),_0x2bd768=VisuMZ[_0x23ff23(0x871)](_0x1f1826[_0x23ff23(0x6f8)]),_0x734714=_0x1f1826[_0x23ff23(0xa34)],_0x52af68=_0x1f1826['Duration'],_0x3fb4d3=_0x1f1826[_0x23ff23(0x283)],_0x3f080b=_0x1f1826[_0x23ff23(0x953)];if(!_0x2ad4c6)return;for(const _0x3460f8 of _0x2bd768){if(_0x23ff23(0x8a6)!=='ZeKui'){function _0x3f776a(){const _0x960572=_0x23ff23;return _0x145465['friendsUnit']()[_0x960572(0x2cc)]();}}else{if(!_0x3460f8)continue;_0x3460f8[_0x23ff23(0x88e)](_0x734714,_0x52af68,_0x3fb4d3);}}if(_0x3f080b)_0x2ad4c6['setWaitMode']('battleFloat');}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x5a7),_0x4d94cb=>{const _0x13ea8c=_0x4ca73a;if(!SceneManager[_0x13ea8c(0xb22)]())return;VisuMZ['ConvertParams'](_0x4d94cb,_0x4d94cb);const _0x128349=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x128349)return;const _0x218e04=VisuMZ['CreateActionSequenceTargets'](_0x4d94cb[_0x13ea8c(0x6f8)]);for(const _0x47ffcc of _0x218e04){if(!_0x47ffcc)continue;_0x47ffcc[_0x13ea8c(0x633)](),_0x47ffcc[_0x13ea8c(0x251)]();}if(_0x4d94cb['WaitForMovement'])_0x128349['setWaitMode'](_0x13ea8c(0x99f));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xa4b),_0x37d095=>{const _0x5fa2a6=_0x4ca73a;if(!SceneManager[_0x5fa2a6(0xb22)]())return;VisuMZ[_0x5fa2a6(0x8d4)](_0x37d095,_0x37d095);const _0x41734e=$gameTemp[_0x5fa2a6(0x260)](),_0x33d874=VisuMZ[_0x5fa2a6(0x871)](_0x37d095[_0x5fa2a6(0x6f8)]),_0x51d0d7=_0x37d095[_0x5fa2a6(0xa34)],_0x1c22bf=_0x37d095[_0x5fa2a6(0xa3b)],_0x240b72=_0x37d095[_0x5fa2a6(0x864)];if(!_0x41734e)return;for(const _0x13d246 of _0x33d874){if(!_0x13d246)continue;_0x13d246[_0x5fa2a6(0x624)](_0x51d0d7,_0x1c22bf);}if(_0x240b72)_0x41734e[_0x5fa2a6(0x728)](_0x5fa2a6(0x5dc));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Movement_MoveBy',_0x4c6d52=>{const _0x16304e=_0x4ca73a;if(!SceneManager[_0x16304e(0xb22)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x4c6d52,_0x4c6d52);const _0x8e3dd9=$gameTemp[_0x16304e(0x260)](),_0x3d26c6=VisuMZ[_0x16304e(0x871)](_0x4c6d52[_0x16304e(0x6f8)]),_0x4d430e=_0x4c6d52[_0x16304e(0x2d0)],_0x7e3fbf=_0x4c6d52[_0x16304e(0x3bc)],_0x438fc1=_0x4c6d52[_0x16304e(0x9d4)],_0x46676d=_0x4c6d52[_0x16304e(0xa3b)],_0xfe4dc7=_0x4c6d52[_0x16304e(0x706)],_0x3a7309=_0x4c6d52[_0x16304e(0x283)],_0x1a3633=_0x4c6d52[_0x16304e(0x323)],_0x4ed689=_0x4c6d52[_0x16304e(0x520)];if(!_0x8e3dd9)return;for(const _0x3a5683 of _0x3d26c6){if(_0x16304e(0x230)===_0x16304e(0x230)){if(!_0x3a5683)continue;let _0x5a1cd0=_0x7e3fbf,_0x11ff80=_0x438fc1;if(_0x4d430e[_0x16304e(0x2b2)](/horz/i))_0x5a1cd0*=_0x3a5683[_0x16304e(0x4bb)]()?-0x1:0x1;if(_0x4d430e['match'](/vert/i))_0x11ff80*=_0x3a5683[_0x16304e(0x4bb)]()?-0x1:0x1;_0x3a5683['moveBattlerDistance'](_0x5a1cd0,_0x11ff80,_0x46676d,_0xfe4dc7,_0x3a7309),_0x3a5683['requestMotion'](_0x1a3633);}else{function _0x917ec6(){const _0x2f3b0d=_0x16304e;if(!_0x38cfcd[_0x2f3b0d(0xb22)]())return;_0x55a8ee['ConvertParams'](_0x5e079a,_0x456fc4);const _0x97bbe9=_0x4e0496[_0x2f3b0d(0x526)],_0x5b15a1=_0x4ce515[_0x2f3b0d(0x1ce)]&&_0x20ae38[_0x2f3b0d(0x9d2)];_0x97bbe9[_0x2f3b0d(0x807)](_0x30cd28[_0x2f3b0d(0x982)]),_0x5b15a1&&_0x33cfa8[_0x2f3b0d(0x9d2)]&&_0x4960fb[_0x2f3b0d(0xb02)](_0x2e35f8[_0x2f3b0d(0x982)]||'',_0x4a80c7[_0x2f3b0d(0xaad)]||0x0);}}}if(_0x4ed689)_0x8e3dd9['setWaitMode'](_0x16304e(0x99f));}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0x905),_0x44cb81=>{const _0x8ff791=_0x4ca73a;if(!SceneManager[_0x8ff791(0xb22)]())return;if(!$gameSystem[_0x8ff791(0x395)]())return;VisuMZ[_0x8ff791(0x8d4)](_0x44cb81,_0x44cb81);const _0xcc9f90=$gameTemp['getLastPluginCommandInterpreter'](),_0x58eb0=VisuMZ[_0x8ff791(0x871)](_0x44cb81[_0x8ff791(0x6f8)]),_0x3e0518=_0x44cb81[_0x8ff791(0x6ce)],_0xc08fb8=_0x44cb81['OffsetAdjust'],_0x25a302=_0x44cb81[_0x8ff791(0x3f3)],_0x4bfcef=_0x44cb81[_0x8ff791(0x7ad)],_0x34a745=_0x44cb81['Duration'],_0x28f697=_0x44cb81[_0x8ff791(0x706)],_0x287ccb=_0x44cb81['EasingType'],_0x545f11=_0x44cb81[_0x8ff791(0x323)],_0x3664f4=_0x44cb81['WaitForMovement'];if(!_0xcc9f90)return;for(const _0x31b1ce of _0x58eb0){if(!_0x31b1ce)continue;let _0x4988ec=_0x31b1ce[_0x8ff791(0x4f6)]()[_0x8ff791(0x9e9)],_0x3b8ba2=_0x31b1ce[_0x8ff791(0x4f6)]()[_0x8ff791(0xa56)];if(_0x3e0518[_0x8ff791(0x2b2)](/home/i))_0x4988ec=_0x31b1ce[_0x8ff791(0x4f6)]()[_0x8ff791(0x716)],_0x3b8ba2=_0x31b1ce[_0x8ff791(0x4f6)]()[_0x8ff791(0x80e)];else{if(_0x3e0518[_0x8ff791(0x2b2)](/center/i)){if('AdLbB'==='ohVsS'){function _0x78b941(){const _0xef295e=_0x8ff791;this[_0xef295e(0x7bc)]();}}else _0x4988ec=Graphics[_0x8ff791(0x83e)]/0x2,_0x3b8ba2=Graphics['boxHeight']/0x2;}else{if(_0x3e0518[_0x8ff791(0x2b2)](/point (\d+), (\d+)/i)){if(_0x8ff791(0x68d)===_0x8ff791(0x8a8)){function _0x3011a1(){const _0x476505=_0x8ff791,_0x294568=this['getAttackMotion']();return _0x294568?_0x294568[_0x476505(0x8ea)]:0x0;}}else _0x4988ec=Number(RegExp['$1']),_0x3b8ba2=Number(RegExp['$2']);}}}if(_0xc08fb8[_0x8ff791(0x2b2)](/none/i)){if(_0x8ff791(0x9f4)===_0x8ff791(0x9f4))_0x4988ec+=_0x25a302,_0x3b8ba2+=_0x4bfcef;else{function _0x37aaad(){_0x3cd027['command119']([_0x16dce5]);}}}else{if(_0xc08fb8[_0x8ff791(0x2b2)](/horz/i)&&_0xc08fb8[_0x8ff791(0x2b2)](/vert/i)){if(_0x8ff791(0x34a)===_0x8ff791(0x34a))_0x4988ec+=_0x31b1ce[_0x8ff791(0x4bb)]()?-_0x25a302:_0x25a302,_0x3b8ba2+=_0x31b1ce[_0x8ff791(0x4bb)]()?-_0x4bfcef:_0x4bfcef;else{function _0x3b3ce0(){const _0x544d17=_0x8ff791;if(!_0xa2df33[_0x544d17(0x499)][_0x544d17(0x800)]['BattleLog'][_0x544d17(0x4a3)])return;_0x2f6341['BattleCore'][_0x544d17(0x97c)][_0x544d17(0x37c)](this,_0x5738ab);}}}else{if(_0xc08fb8[_0x8ff791(0x2b2)](/horz/i))_0x4988ec+=_0x31b1ce['isActor']()?-_0x25a302:_0x25a302,_0x3b8ba2+=_0x4bfcef;else _0xc08fb8['match'](/vert/i)&&(_0x4988ec+=_0x25a302,_0x3b8ba2+=_0x31b1ce[_0x8ff791(0x4bb)]()?-_0x4bfcef:_0x4bfcef);}}_0x31b1ce[_0x8ff791(0xa02)](_0x4988ec,_0x3b8ba2,_0x34a745,_0x28f697,_0x287ccb,-0x1),_0x31b1ce[_0x8ff791(0x3b7)](_0x545f11);}if(_0x3664f4)_0xcc9f90[_0x8ff791(0x728)](_0x8ff791(0x99f));}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x908),_0x3a1384=>{const _0x46383f=_0x4ca73a;if(!SceneManager[_0x46383f(0xb22)]())return;if(!$gameSystem[_0x46383f(0x395)]())return;VisuMZ[_0x46383f(0x8d4)](_0x3a1384,_0x3a1384);const _0x565939=$gameTemp[_0x46383f(0x260)](),_0x387c65=VisuMZ[_0x46383f(0x871)](_0x3a1384[_0x46383f(0xa7d)]),_0x22292d=VisuMZ[_0x46383f(0x871)](_0x3a1384[_0x46383f(0xb21)]),_0x38677e=_0x3a1384[_0x46383f(0x43a)];let _0x2ea228=_0x3a1384[_0x46383f(0x85e)];const _0x5ba24e=_0x3a1384[_0x46383f(0xb10)],_0x5e1a45=_0x3a1384[_0x46383f(0x3f3)],_0x33a325=_0x3a1384[_0x46383f(0x7ad)],_0x4ec849=_0x3a1384[_0x46383f(0xa3b)],_0x384d47=_0x3a1384[_0x46383f(0x706)],_0x484797=_0x3a1384['EasingType'],_0x1f3747=_0x3a1384[_0x46383f(0x323)],_0x2223f4=_0x3a1384[_0x46383f(0x520)],_0x45745f=Math[_0x46383f(0x455)](..._0x22292d[_0x46383f(0x8f9)](_0x285999=>_0x285999[_0x46383f(0x4f6)]()['_baseX']-_0x285999[_0x46383f(0x4f6)]()[_0x46383f(0x745)]()/0x2)),_0xed933e=Math[_0x46383f(0x826)](..._0x22292d[_0x46383f(0x8f9)](_0x538ee7=>_0x538ee7[_0x46383f(0x4f6)]()['_baseX']+_0x538ee7[_0x46383f(0x4f6)]()['mainSpriteWidth']()/0x2)),_0x2c11dd=Math['min'](..._0x22292d[_0x46383f(0x8f9)](_0x1b0b6d=>_0x1b0b6d[_0x46383f(0x4f6)]()[_0x46383f(0xa56)]-_0x1b0b6d[_0x46383f(0x4f6)]()[_0x46383f(0x60a)]())),_0xcc9c91=Math[_0x46383f(0x826)](..._0x22292d[_0x46383f(0x8f9)](_0x3a47b7=>_0x3a47b7[_0x46383f(0x4f6)]()[_0x46383f(0xa56)])),_0x56652e=_0x22292d['filter'](_0x1d0152=>_0x1d0152['isActor']())[_0x46383f(0x73b)],_0x2d0db1=_0x22292d['filter'](_0x3c56b6=>_0x3c56b6[_0x46383f(0xa95)]())['length'];let _0x38ecce=0x0,_0x1a72cc=0x0;if(_0x38677e[_0x46383f(0x2b2)](/front/i))_0x38ecce=_0x56652e>=_0x2d0db1?_0x45745f:_0xed933e;else{if(_0x38677e[_0x46383f(0x2b2)](/middle/i)){if('SXyFf'!==_0x46383f(0x6ff))_0x38ecce=(_0x45745f+_0xed933e)/0x2,_0x2ea228=-0x1;else{function _0x4dd08c(){_0x287983=(_0x1c5e03+_0x19001a)/0x2,_0x33ad60=-0x1;}}}else{if(_0x38677e[_0x46383f(0x2b2)](/back/i)){if(_0x46383f(0x52c)!=='RAvfy'){function _0x1d5c11(){const _0xfb976a=_0x46383f;if(!_0x13ac38[_0xfb976a(0x395)]())return;const _0x487ff0=this[_0xfb976a(0x4f6)]();if(!_0x487ff0)return;if(_0x5dfb9b===_0x487ff0[_0xfb976a(0x9e9)])return;let _0xa9b275=![];if(this['isActor']()){if(_0xb178a5>_0x487ff0[_0xfb976a(0x9e9)])_0xa9b275=!![];if(_0x4908a3<_0x487ff0['_baseX'])_0xa9b275=![];}else{if(this[_0xfb976a(0xa95)]()){if(_0xdb8449>_0x487ff0[_0xfb976a(0x9e9)])_0xa9b275=![];if(_0x5af043<_0x487ff0['_baseX'])_0xa9b275=!![];}};this[_0xfb976a(0x87c)](_0x200e6a?!_0xa9b275:_0xa9b275),_0x487ff0[_0xfb976a(0x8b6)]();}}else _0x38ecce=_0x56652e>=_0x2d0db1?_0xed933e:_0x45745f;}}}if(_0x38677e[_0x46383f(0x2b2)](/head/i))_0x1a72cc=_0x2c11dd;else{if(_0x38677e['match'](/center/i))_0x1a72cc=(_0x2c11dd+_0xcc9c91)/0x2;else _0x38677e['match'](/base/i)&&(_0x1a72cc=_0xcc9c91);}if(!_0x565939)return;for(const _0x14c45b of _0x387c65){if(!_0x14c45b)continue;let _0x553a8b=_0x38ecce,_0x243b9f=_0x1a72cc;if(_0x5ba24e[_0x46383f(0x2b2)](/none/i))_0x553a8b+=_0x5e1a45,_0x243b9f+=_0x33a325;else{if(_0x5ba24e['match'](/horz/i)&&_0x5ba24e[_0x46383f(0x2b2)](/vert/i)){if('NJFgN'!==_0x46383f(0x696))_0x553a8b+=_0x14c45b[_0x46383f(0x4bb)]()?-_0x5e1a45:_0x5e1a45,_0x243b9f+=_0x14c45b[_0x46383f(0x4bb)]()?-_0x33a325:_0x33a325;else{function _0x2ccf96(){const _0x1ad1e4=_0x46383f;_0x3d48d5[_0x1ad1e4(0x90a)][_0x1ad1e4(0x46b)][_0x1ad1e4(0x37c)](this),this['enemy']()&&this['enemy']()['name']()!==this[_0x1ad1e4(0x851)]&&(this[_0x1ad1e4(0x851)]=this[_0x1ad1e4(0xa68)]()['name'](),this[_0x1ad1e4(0x705)]()),this['updateOpacity'](),this['updatePosition']();}}}else{if(_0x5ba24e['match'](/horz/i))_0x553a8b+=_0x14c45b[_0x46383f(0x4bb)]()?-_0x5e1a45:_0x5e1a45,_0x243b9f+=_0x33a325;else{if(_0x5ba24e['match'](/vert/i)){if(_0x46383f(0x99d)===_0x46383f(0xb7a)){function _0x3ed254(){const _0x2604a8=_0x46383f;this['_actorCommandWindow'][_0x2604a8(0xb62)]();}}else _0x553a8b+=_0x5e1a45,_0x243b9f+=_0x14c45b[_0x46383f(0x4bb)]()?-_0x33a325:_0x33a325;}}}}_0x14c45b[_0x46383f(0xa02)](_0x553a8b,_0x243b9f,_0x4ec849,_0x384d47,_0x484797,_0x2ea228),_0x14c45b['requestMotion'](_0x1f3747);}if(_0x2223f4)_0x565939['setWaitMode'](_0x46383f(0x99f));}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x409),_0x5b9c7f=>{const _0x172b50=_0x4ca73a;if(!SceneManager[_0x172b50(0xb22)]())return;VisuMZ[_0x172b50(0x8d4)](_0x5b9c7f,_0x5b9c7f);const _0x3ae596=$gameTemp[_0x172b50(0x260)](),_0x457321=VisuMZ[_0x172b50(0x871)](_0x5b9c7f[_0x172b50(0x6f8)]),_0x403a8f=_0x5b9c7f[_0x172b50(0x4bd)],_0x1a7bd1=_0x5b9c7f[_0x172b50(0xa3b)],_0x5f5015=_0x5b9c7f[_0x172b50(0x283)],_0x157e0c=_0x5b9c7f[_0x172b50(0x322)];if(!_0x3ae596)return;for(const _0x1dfa34 of _0x457321){if(_0x172b50(0x201)===_0x172b50(0x53b)){function _0x27d5eb(){const _0x42d9fd=_0x172b50;return _0x1b3f75[_0x42d9fd(0x499)]['Settings'][_0x42d9fd(0xa94)][_0x42d9fd(0x7ec)];}}else{if(!_0x1dfa34)continue;_0x1dfa34['changeBattlerOpacity'](_0x403a8f,_0x1a7bd1,_0x5f5015);}}if(_0x157e0c)_0x3ae596[_0x172b50(0x728)](_0x172b50(0x598));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x8ee),_0x5105d7=>{const _0x17d44c=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x17d44c(0x8d4)](_0x5105d7,_0x5105d7);const _0x5cbd16=$gameTemp['getLastPluginCommandInterpreter'](),_0x28fd5a=VisuMZ[_0x17d44c(0x871)](_0x5105d7[_0x17d44c(0x6f8)]),_0x19d307=_0x5105d7[_0x17d44c(0x5d6)],_0x269bb3=_0x5105d7[_0x17d44c(0x372)],_0x10950e=_0x5105d7[_0x17d44c(0xa3b)],_0x87fbf=_0x5105d7['EasingType'],_0x3a21cf=_0x5105d7[_0x17d44c(0x31a)];if(!_0x5cbd16)return;for(const _0xbbc409 of _0x28fd5a){if(!_0xbbc409)continue;_0xbbc409['growBattler'](_0x19d307,_0x269bb3,_0x10950e,_0x87fbf);}if(_0x3a21cf)_0x5cbd16['setWaitMode'](_0x17d44c(0x27f));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x797),_0x3a7dca=>{const _0x143e79=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x143e79(0x8d4)](_0x3a7dca,_0x3a7dca);const _0x374b07=$gameTemp[_0x143e79(0x260)](),_0x4dc714=VisuMZ[_0x143e79(0x871)](_0x3a7dca['Targets']),_0x45612b=_0x3a7dca[_0x143e79(0x5f3)],_0x406f65=_0x3a7dca[_0x143e79(0x1ef)],_0x2aeb1b=_0x3a7dca[_0x143e79(0xa3b)],_0x367726=_0x3a7dca[_0x143e79(0x283)],_0x395d91=_0x3a7dca[_0x143e79(0x6bf)];if(!_0x374b07)return;for(const _0x1550ec of _0x4dc714){if(!_0x1550ec)continue;_0x1550ec[_0x143e79(0x9ed)](_0x45612b,_0x406f65,_0x2aeb1b,_0x367726);}if(_0x395d91)_0x374b07[_0x143e79(0x728)](_0x143e79(0x3a3));}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xa0d),_0x5cc48b=>{const _0x9855c2=_0x4ca73a;if(!SceneManager[_0x9855c2(0xb22)]())return;VisuMZ[_0x9855c2(0x8d4)](_0x5cc48b,_0x5cc48b);const _0x45b3e0=$gameTemp['getLastPluginCommandInterpreter'](),_0x5f328a=VisuMZ[_0x9855c2(0x871)](_0x5cc48b['Targets']),_0x2b1887=_0x5cc48b[_0x9855c2(0x387)],_0x503bf0=_0x5cc48b[_0x9855c2(0xa3b)],_0x40c556=_0x5cc48b['EasingType'],_0x43a47e=_0x5cc48b[_0x9855c2(0x6c1)],_0x3616a3=_0x5cc48b['WaitForSpin'];if(!_0x45b3e0)return;for(const _0x52a62d of _0x5f328a){if(!_0x52a62d)continue;_0x52a62d[_0x9855c2(0xb19)](_0x2b1887,_0x503bf0,_0x40c556,_0x43a47e);}if(_0x3616a3)_0x45b3e0[_0x9855c2(0x728)](_0x9855c2(0x6bc));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x2fa),_0x34fbda=>{const _0x45170a=_0x4ca73a;if(!SceneManager[_0x45170a(0xb22)]())return;const _0x9c71d9=$gameTemp[_0x45170a(0x260)]();if(!_0x9c71d9)return;_0x9c71d9[_0x45170a(0x728)](_0x45170a(0x944));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x95f),_0x1d3314=>{const _0xbdd67c=_0x4ca73a;if(!SceneManager[_0xbdd67c(0xb22)]())return;const _0x5f5035=$gameTemp[_0xbdd67c(0x260)]();if(!_0x5f5035)return;_0x5f5035[_0xbdd67c(0x728)](_0xbdd67c(0x5dc));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x78f),_0x628854=>{const _0x30a00f=_0x4ca73a;if(!SceneManager[_0x30a00f(0xb22)]())return;const _0x156a5d=$gameTemp[_0x30a00f(0x260)]();if(!_0x156a5d)return;_0x156a5d[_0x30a00f(0x728)]('battleMove');}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0x2cd),_0x4b7e2f=>{const _0x3ca2d0=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;const _0x1199b9=$gameTemp[_0x3ca2d0(0x260)]();if(!_0x1199b9)return;_0x1199b9[_0x3ca2d0(0x728)](_0x3ca2d0(0x598));}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],'ActSeq_Movement_WaitForScale',_0x43908a=>{const _0x2904a0=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;const _0x2fe9d3=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2fe9d3)return;_0x2fe9d3[_0x2904a0(0x728)](_0x2904a0(0x27f));}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0x1f5),_0x4e6b4a=>{if(!SceneManager['isSceneBattle']())return;const _0x53fdea=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x53fdea)return;_0x53fdea['setWaitMode']('battleSpriteSkew');}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x5fb),_0x564e1a=>{const _0x2e1d85=_0x4ca73a;if(!SceneManager[_0x2e1d85(0xb22)]())return;const _0x4338d6=$gameTemp[_0x2e1d85(0x260)]();if(!_0x4338d6)return;_0x4338d6[_0x2e1d85(0x728)](_0x2e1d85(0x6bc));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x4f9),_0x28b8ad=>{const _0x291f3e=_0x4ca73a;if(!SceneManager[_0x291f3e(0xb22)]())return;if(!Imported[_0x291f3e(0x1a1)])return;VisuMZ[_0x291f3e(0x8d4)](_0x28b8ad,_0x28b8ad);const _0x179d8e=$gameTemp[_0x291f3e(0x260)](),_0xa4a3b4=_0x28b8ad[_0x291f3e(0x55e)];if(!_0x179d8e)return;const _0x4a6650=BattleManager[_0x291f3e(0xa38)];if(!_0x4a6650)return;_0x4a6650['createActionSequenceProjectile'](_0x28b8ad);if(_0xa4a3b4)_0x179d8e['setWaitMode'](_0x291f3e(0x992));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x2e2),_0xf8564e=>{const _0xd08a10=_0x4ca73a;if(!SceneManager[_0xd08a10(0xb22)]())return;if(!Imported[_0xd08a10(0x1a1)])return;VisuMZ[_0xd08a10(0x8d4)](_0xf8564e,_0xf8564e);const _0x4370ec=$gameTemp[_0xd08a10(0x260)](),_0x37bd4d=_0xf8564e[_0xd08a10(0x55e)];if(!_0x4370ec)return;const _0x2ddd4d=BattleManager[_0xd08a10(0xa38)];if(!_0x2ddd4d)return;_0x2ddd4d[_0xd08a10(0x7e2)](_0xf8564e);if(_0x37bd4d)_0x4370ec[_0xd08a10(0x728)](_0xd08a10(0x992));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x3c7),_0x527496=>{const _0x7ace72=_0x4ca73a;if(!SceneManager[_0x7ace72(0xb22)]())return;if(!Imported[_0x7ace72(0x1a1)])return;VisuMZ[_0x7ace72(0x8d4)](_0x527496,_0x527496);const _0x241db4=$gameTemp[_0x7ace72(0x260)](),_0x233efa=_0x527496['WaitForProjectile'];if(!_0x241db4)return;const _0x46f94c=BattleManager[_0x7ace72(0xa38)];if(!_0x46f94c)return;_0x46f94c['createActionSequenceProjectile'](_0x527496);if(_0x233efa)_0x241db4[_0x7ace72(0x728)](_0x7ace72(0x992));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x4d8),_0x4854f8=>{const _0x2b0802=_0x4ca73a;if(!SceneManager[_0x2b0802(0xb22)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2b0802(0x8d4)](_0x4854f8,_0x4854f8);const _0x4ffac6=$gameTemp[_0x2b0802(0x260)](),_0x16f516=_0x4854f8[_0x2b0802(0x6bf)];if(!_0x4ffac6)return;$gameScreen[_0x2b0802(0x4c8)](_0x4854f8[_0x2b0802(0x5f3)],_0x4854f8[_0x2b0802(0x1ef)],_0x4854f8[_0x2b0802(0xa3b)],_0x4854f8['EasingType']);if(_0x16f516)_0x4ffac6[_0x2b0802(0x728)](_0x2b0802(0x481));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x6e2),_0x5285e8=>{const _0x5159e3=_0x4ca73a;if(!SceneManager[_0x5159e3(0xb22)]())return;if(!Imported[_0x5159e3(0x28f)])return;VisuMZ[_0x5159e3(0x8d4)](_0x5285e8,_0x5285e8);const _0x503855=$gameTemp['getLastPluginCommandInterpreter'](),_0x48efb7=_0x5285e8[_0x5159e3(0x6bf)];if(!_0x503855)return;$gameScreen[_0x5159e3(0x4c8)](0x0,0x0,_0x5285e8[_0x5159e3(0xa3b)],_0x5285e8[_0x5159e3(0x283)]);if(_0x48efb7)_0x503855[_0x5159e3(0x728)](_0x5159e3(0x481));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Skew_WaitForSkew',_0x23ccd2=>{const _0x4e0275=_0x4ca73a;if(!SceneManager[_0x4e0275(0xb22)]())return;if(!Imported[_0x4e0275(0x28f)])return;const _0x4932b6=$gameTemp[_0x4e0275(0x260)]();if(!_0x4932b6)return;_0x4932b6[_0x4e0275(0x728)](_0x4e0275(0x481));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x73f),_0x12f38b=>{const _0x2d2f6e=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2d2f6e(0x8d4)](_0x12f38b,_0x12f38b);const _0x109295=$gameTemp[_0x2d2f6e(0x260)](),_0x3fd6c8=_0x12f38b[_0x2d2f6e(0x7a4)],_0x4eef13=_0x12f38b[_0x2d2f6e(0x26d)];if(!_0x109295)return;BattleManager[_0x2d2f6e(0x6f5)]=_0x3fd6c8,BattleManager[_0x2d2f6e(0xae2)]=BattleManager['_allTargets']?BattleManager[_0x2d2f6e(0xb63)][BattleManager[_0x2d2f6e(0x6f5)]]||null:null,BattleManager[_0x2d2f6e(0xae2)]&&_0x4eef13['toUpperCase']()[_0x2d2f6e(0x7d2)]()!==_0x2d2f6e(0x480)&&_0x109295[_0x2d2f6e(0x923)]([_0x4eef13]);}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x470),_0x31c8e9=>{const _0x5cb825=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5cb825(0x8d4)](_0x31c8e9,_0x31c8e9);const _0x27bf43=$gameTemp[_0x5cb825(0x260)](),_0x1c0cac=_0x31c8e9['JumpToLabel'];if(!_0x27bf43)return;BattleManager[_0x5cb825(0x6f5)]++,BattleManager[_0x5cb825(0xae2)]=BattleManager[_0x5cb825(0xb63)][BattleManager[_0x5cb825(0x6f5)]]||null,BattleManager[_0x5cb825(0xae2)]&&_0x1c0cac[_0x5cb825(0x941)]()[_0x5cb825(0x7d2)]()!==_0x5cb825(0x480)&&_0x27bf43[_0x5cb825(0x923)]([_0x1c0cac]);}),PluginManager['registerCommand'](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x19d),_0x13e560=>{const _0x536701=_0x4ca73a;if(!SceneManager[_0x536701(0xb22)]())return;VisuMZ[_0x536701(0x8d4)](_0x13e560,_0x13e560);const _0x44f14a=$gameTemp[_0x536701(0x260)](),_0x36650f=_0x13e560[_0x536701(0x26d)];if(!_0x44f14a)return;BattleManager[_0x536701(0x6f5)]--,BattleManager[_0x536701(0xae2)]=BattleManager[_0x536701(0xb63)][BattleManager[_0x536701(0x6f5)]]||null;if(BattleManager['_target']&&_0x36650f['toUpperCase']()[_0x536701(0x7d2)]()!==_0x536701(0x480)){if(_0x536701(0x305)===_0x536701(0x305))_0x44f14a[_0x536701(0x923)]([_0x36650f]);else{function _0x1563a4(){const _0x402fb4=_0x536701;this[_0x402fb4(0x728)](_0x402fb4(0xa58));}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData['name'],_0x4ca73a(0x9e8),_0x2cd562=>{const _0x3fb303=_0x4ca73a;if(!SceneManager[_0x3fb303(0xb22)]())return;VisuMZ['ConvertParams'](_0x2cd562,_0x2cd562);const _0xe424c9=$gameTemp[_0x3fb303(0x260)](),_0x20d80c=_0x2cd562[_0x3fb303(0xb8b)],_0x2c1a0a=_0x2cd562[_0x3fb303(0x26d)];if(!_0xe424c9)return;const _0x576f17=BattleManager[_0x3fb303(0x6f5)];for(;;){if('geewc'!=='QMXMc'){BattleManager[_0x3fb303(0x6f5)]=Math['randomInt'](BattleManager[_0x3fb303(0xb63)][_0x3fb303(0x73b)]);if(!_0x20d80c)break;if(BattleManager[_0x3fb303(0x6f5)]!==_0x576f17)break;if(BattleManager[_0x3fb303(0xb63)][_0x3fb303(0x73b)]<=0x1){BattleManager[_0x3fb303(0x6f5)]=0x0;break;}}else{function _0x50102b(){const _0x441ee8=_0x3fb303;this[_0x441ee8(0x231)](_0x26032c,'tp',_0x4ef127+(_0x1d6a98['TpGaugeOffsetX']||0x0),_0x52082c+this[_0x441ee8(0x23e)]()*0x2+(_0xa683fc['TpGaugeOffsetY']||0x0));}}}BattleManager[_0x3fb303(0xae2)]=BattleManager[_0x3fb303(0xb63)][BattleManager[_0x3fb303(0x6f5)]]||null;if(BattleManager['_target']&&_0x2c1a0a[_0x3fb303(0x941)]()[_0x3fb303(0x7d2)]()!==_0x3fb303(0x480)){if(_0x3fb303(0x521)!==_0x3fb303(0xb13))_0xe424c9[_0x3fb303(0x923)]([_0x2c1a0a]);else{function _0x4de51c(){const _0x13ffe6=_0x3fb303;this[_0x13ffe6(0x1bd)]=_0x67d1c,_0x5e3a29[_0x13ffe6(0x612)][_0x13ffe6(0x47c)]();}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x1d2),_0x59c870=>{const _0x1b031d=_0x4ca73a;if(!SceneManager[_0x1b031d(0xb22)]())return;VisuMZ[_0x1b031d(0x8d4)](_0x59c870,_0x59c870);const _0x153223=VisuMZ['CreateActionSequenceTargets'](_0x59c870[_0x1b031d(0x6f8)]);for(const _0x25620f of _0x153223){if(_0x1b031d(0x22b)===_0x1b031d(0x22b)){if(!_0x25620f)continue;if(!_0x25620f[_0x1b031d(0x4bb)]())continue;_0x25620f['clearActiveWeaponSlot']();}else{function _0x57fff7(){const _0x5d7f29=_0x1b031d;return _0x50d028['filter'](_0x3e68e1=>_0x3e68e1[_0x5d7f29(0xb34)]()&&_0x3e68e1!==_0x509250);}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x648),_0x1c088e=>{const _0x47808f=_0x4ca73a;if(!SceneManager[_0x47808f(0xb22)]())return;VisuMZ[_0x47808f(0x8d4)](_0x1c088e,_0x1c088e);const _0x304ec4=$gameTemp[_0x47808f(0x260)]();let _0x333765=![];const _0x3b7775=_0x1c088e['JumpToLabel'],_0x424a42=VisuMZ[_0x47808f(0x871)](_0x1c088e[_0x47808f(0x6f8)]);for(const _0x3d25de of _0x424a42){if(!_0x3d25de)continue;if(!_0x3d25de[_0x47808f(0x4bb)]())continue;_0x3d25de[_0x47808f(0x41e)](),_0x3d25de[_0x47808f(0x97a)]()[_0x47808f(0x73b)]>0x0?_0x333765=!![]:_0x3d25de[_0x47808f(0x8d8)]();}if(_0x333765&&_0x3b7775[_0x47808f(0x941)]()[_0x47808f(0x7d2)]()!==_0x47808f(0x480)){if('ygmau'!==_0x47808f(0x293))_0x304ec4[_0x47808f(0x923)]([_0x3b7775]);else{function _0x3e8248(){const _0x3f41ca=_0x47808f;let _0xc6465a=_0x2098b4['skillTypes'][_0x3e747a];if(!_0xc6465a)return;let _0x1bf537=_0xc6465a;const _0x42c82f=this[_0x3f41ca(0x2f7)]();if(_0x42c82f==='text')_0x1bf537=_0x1bf537[_0x3f41ca(0x301)](/\x1I\[(\d+)\]/gi,''),_0x1bf537=_0x1bf537[_0x3f41ca(0x301)](/\\I\[(\d+)\]/gi,'');else{if(!_0xc6465a[_0x3f41ca(0x2b2)](/\\I\[(\d+)\]/i)){const _0x5f57e4=_0x2c4bd3[_0x3f41ca(0x2b8)]?_0x5d16e1[_0x3f41ca(0x653)][_0x3f41ca(0x800)]['Skills']:_0xe7a721[_0x3f41ca(0x499)][_0x3f41ca(0x800)]['ActorCmd'],_0x2ed251=_0x1f341f['magicSkills'][_0x3f41ca(0x93d)](_0x30b1a5),_0x535500=_0x2ed251?_0x5f57e4['IconStypeMagic']:_0x5f57e4[_0x3f41ca(0x9c4)];_0x1bf537=_0x3f41ca(0x30a)[_0x3f41ca(0x26f)](_0x535500,_0xc6465a);}}this[_0x3f41ca(0x459)](_0x1bf537,_0x3f41ca(0x500),!![],_0x5185ca);}}}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0x630),_0x2782ae=>{const _0x17f645=_0x4ca73a;if(!SceneManager[_0x17f645(0xb22)]())return;VisuMZ['ConvertParams'](_0x2782ae,_0x2782ae);let _0x1602b2=_0x2782ae[_0x17f645(0x712)];_0x1602b2--,_0x1602b2=Math[_0x17f645(0x826)](_0x1602b2,0x0);const _0x374891=VisuMZ[_0x17f645(0x871)](_0x2782ae[_0x17f645(0x6f8)]);for(const _0x403adc of _0x374891){if(!_0x403adc)continue;if(!_0x403adc[_0x17f645(0x4bb)]())continue;_0x403adc[_0x17f645(0xb50)](_0x1602b2);}}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],_0x4ca73a(0xb7e),_0x5138e7=>{const _0x1055a1=_0x4ca73a;if(!SceneManager[_0x1055a1(0xb22)]())return;if(!Imported[_0x1055a1(0x28f)])return;VisuMZ['ConvertParams'](_0x5138e7,_0x5138e7);const _0x3dd28c=$gameTemp[_0x1055a1(0x260)](),_0xe24b63=_0x5138e7[_0x1055a1(0x22e)];if(!_0x3dd28c)return;$gameScreen[_0x1055a1(0x98c)](_0x5138e7[_0x1055a1(0x5c6)],_0x5138e7['Duration'],_0x5138e7[_0x1055a1(0x283)]);if(_0xe24b63)_0x3dd28c[_0x1055a1(0x728)](_0x1055a1(0x4cb));}),PluginManager['registerCommand'](pluginData['name'],_0x4ca73a(0x416),_0x2b4e4b=>{const _0x3ac560=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3ac560(0x28f)])return;VisuMZ['ConvertParams'](_0x2b4e4b,_0x2b4e4b);const _0x58715b=$gameTemp['getLastPluginCommandInterpreter'](),_0x2c6ec8=_0x2b4e4b[_0x3ac560(0x22e)];if(!_0x58715b)return;$gameScreen[_0x3ac560(0x98c)](0x1,_0x2b4e4b[_0x3ac560(0xa3b)],_0x2b4e4b[_0x3ac560(0x283)]);if(_0x2c6ec8)_0x58715b[_0x3ac560(0x728)](_0x3ac560(0x4cb));}),PluginManager[_0x4ca73a(0xaaf)](pluginData[_0x4ca73a(0x491)],'ActSeq_Zoom_WaitForZoom',_0xf8e6e1=>{const _0x28545c=_0x4ca73a;if(!SceneManager[_0x28545c(0xb22)]())return;if(!Imported[_0x28545c(0x28f)])return;const _0x1edfe5=$gameTemp[_0x28545c(0x260)]();if(!_0x1edfe5)return;_0x1edfe5[_0x28545c(0x728)](_0x28545c(0x4cb));}),VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x46f)]=Scene_Boot[_0x4ca73a(0x90a)]['onDatabaseLoaded'],Scene_Boot[_0x4ca73a(0x90a)][_0x4ca73a(0x9cf)]=function(){const _0x407072=_0x4ca73a;this[_0x407072(0x80d)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x407072(0xa24)](),this[_0x407072(0x346)](),VisuMZ[_0x407072(0x499)]['Scene_Boot_onDatabaseLoaded'][_0x407072(0x37c)](this),this[_0x407072(0xb5a)](),this[_0x407072(0x52a)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent']();},Scene_Boot['prototype'][_0x4ca73a(0xb5a)]=function(){const _0x10d8fd=_0x4ca73a;if(VisuMZ[_0x10d8fd(0x208)])return;this[_0x10d8fd(0x1e5)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x10d8fd(0x3cc)]();},Scene_Boot[_0x4ca73a(0x90a)][_0x4ca73a(0x80d)]=function(){const _0x807c2f=_0x4ca73a,_0x409948=$dataSystem[_0x807c2f(0x67e)][_0x807c2f(0x73b)];for(let _0x574762=0x0;_0x574762<_0x409948;_0x574762++){if(_0x807c2f(0x812)==='KodNs'){function _0x4162da(){const _0x3f6779=_0x807c2f;if(!_0x5beb8b['isSceneBattle']())return;if(!_0xac72d[_0x3f6779(0x28f)])return;_0x4f2957[_0x3f6779(0x8d4)](_0x189ca2,_0xf76b7d);const _0x23b580=_0x3b199c[_0x3f6779(0x260)](),_0x3109fd=_0x4aa271['WaitForCamera'];_0x39f8bb[_0x3f6779(0x78c)](_0x43c934[_0x3f6779(0x3f4)],_0x4300ce[_0x3f6779(0x5f0)],_0x475792[_0x3f6779(0xa3b)],_0x19c8e8[_0x3f6779(0x283)]);if(_0x3109fd)_0x23b580[_0x3f6779(0x728)](_0x3f6779(0x544));}}else{const _0x3a041f=$dataSystem['attackMotions'][_0x574762];if(_0x3a041f)continue;$dataSystem[_0x807c2f(0x7c7)][_0x574762]=JsonEx[_0x807c2f(0x7bf)]($dataSystem[_0x807c2f(0x7c7)][0x0]);}}},Scene_Boot[_0x4ca73a(0x90a)]['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x958707=_0x4ca73a,_0x308bde=VisuMZ['BattleCore']['Settings'];_0x308bde['Damage'][_0x958707(0xb3e)]===undefined&&(_0x308bde[_0x958707(0x1b8)][_0x958707(0xb3e)]='base');if(_0x308bde[_0x958707(0x4e4)][_0x958707(0x994)]===undefined){if(_0x958707(0xb7f)!==_0x958707(0x7fd))_0x308bde['Actor']['SmoothImage']=![];else{function _0x330105(){const _0x5592a9=_0x958707;_0x27fd40['prototype'][_0x5592a9(0xa47)][_0x5592a9(0x37c)](this),this[_0x5592a9(0x765)]();}}}if(_0x308bde[_0x958707(0xa94)][_0x958707(0x994)]===undefined){if(_0x958707(0x475)===_0x958707(0x475))_0x308bde[_0x958707(0xa94)][_0x958707(0x994)]=!![];else{function _0x21f2bc(){const _0x2c5850=_0x958707,_0x19ee7e=_0x27e3a9[_0x2c5850(0xa07)]();this[_0x2c5850(0x9a2)](_0xb5046,_0x5de2e7,_0x6ac150),this[_0x2c5850(0x616)](_0x149a27,_0x1e767f,_0x2399cf),this[_0x2c5850(0x1bf)](_0x31433e,_0x330449,_0x577243);}}}if(_0x308bde['Actor'][_0x958707(0x270)]===undefined){if(_0x958707(0x86c)!=='iEpNl')_0x308bde['Actor'][_0x958707(0x270)]=![];else{function _0x3b066e(){const _0x3cc433=_0x958707;this[_0x3cc433(0x59a)]();}}}_0x308bde['Actor'][_0x958707(0xb27)]===undefined&&(_0x308bde[_0x958707(0x4e4)][_0x958707(0xb27)]=!![]);},VisuMZ['DamageStyles']={},Scene_Boot[_0x4ca73a(0x90a)][_0x4ca73a(0xa24)]=function(){const _0x7ea84a=_0x4ca73a;for(const _0x38f594 of VisuMZ[_0x7ea84a(0x499)][_0x7ea84a(0x800)][_0x7ea84a(0x1b8)][_0x7ea84a(0x3e8)]){if('mafIJ'!==_0x7ea84a(0x282)){function _0x4cea2d(){const _0x5b2e3a=_0x7ea84a;return!this[_0x5b2e3a(0x8fc)]()&&!this[_0x5b2e3a(0x1d0)]();}}else{if(!_0x38f594)continue;const _0x506748=_0x38f594[_0x7ea84a(0x9c0)][_0x7ea84a(0x941)]()[_0x7ea84a(0x7d2)]();VisuMZ[_0x7ea84a(0x638)][_0x506748]=_0x38f594;}}},VisuMZ[_0x4ca73a(0x499)]['RegExp']={},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x42449a=_0x4ca73a,_0x3c7084=VisuMZ[_0x42449a(0x499)]['RegExp'],_0x517b0d=_0x42449a(0xb74),_0x2ab87e=[[_0x42449a(0x2ee),_0x42449a(0x615)],[_0x42449a(0xab3),_0x42449a(0x6a2)]],_0x4549ad=[[_0x42449a(0x399),_0x42449a(0xb82)],[_0x42449a(0xa79),_0x42449a(0x4ef)]],_0x1bf6d2=[['',''],[_0x42449a(0x465),'AS\x20USER'],[_0x42449a(0x542),'AS\x20TARGET']];for(const _0x3547e3 of _0x4549ad){for(const _0x3d509e of _0x1bf6d2){for(const _0x57939f of _0x2ab87e){if(_0x42449a(0xb4b)===_0x42449a(0x338)){function _0x347ef2(){const _0x2764b9=_0x42449a;_0x42345f[_0x2764b9(0x499)][_0x2764b9(0x600)][_0x2764b9(0x37c)](this,_0x25765b),this[_0x2764b9(0x1eb)]();}}else{const _0x54a5f6=_0x3547e3[0x0]['format'](_0x57939f[0x0],_0x3d509e[0x0]),_0x4aead4=_0x3547e3[0x1][_0x42449a(0x26f)](_0x57939f[0x1],_0x3d509e[0x1])['trim'](),_0x5f1959=new RegExp(_0x517b0d[_0x42449a(0x26f)](_0x4aead4),'i');_0x3c7084[_0x54a5f6]=_0x5f1959;}}}}const _0x46e00a=[['%1StartActionJS',_0x42449a(0x453)],[_0x42449a(0x319),_0x42449a(0x2a9)]];for(const _0x5cba78 of _0x46e00a){for(const _0xd4f933 of _0x2ab87e){const _0x23f43d=_0x5cba78[0x0]['format'](_0xd4f933[0x0]),_0x31086c=_0x5cba78[0x1][_0x42449a(0x26f)](_0xd4f933[0x1]),_0x11af0b=new RegExp(_0x517b0d[_0x42449a(0x26f)](_0x31086c),'i');_0x3c7084[_0x23f43d]=_0x11af0b;}}const _0x54b8cd=[[_0x42449a(0x4a7),_0x42449a(0xb0d)],[_0x42449a(0x796),_0x42449a(0x443)],[_0x42449a(0x46c),_0x42449a(0xb46)],[_0x42449a(0xac0),_0x42449a(0xb1b)],['EscapeSuccessJS',_0x42449a(0x539)],[_0x42449a(0x852),_0x42449a(0x3fc)],[_0x42449a(0xa7b),_0x42449a(0xb52)],[_0x42449a(0x40f),'JS\x20%1END\x20TURN'],[_0x42449a(0xb2f),_0x42449a(0x794)]];for(const _0x52eabd of _0x54b8cd){for(const _0x46a4c1 of _0x2ab87e){if(_0x42449a(0x72b)==='ksJYb'){function _0x553885(){const _0x56ce33=_0x42449a;return this[_0x56ce33(0x5ca)]()[_0x56ce33(0x457)];}}else{const _0x39ab8c=_0x52eabd[0x0][_0x42449a(0x26f)](_0x46a4c1[0x0]),_0x36ff55=_0x52eabd[0x1][_0x42449a(0x26f)](_0x46a4c1[0x1]),_0x429cc1=new RegExp(_0x517b0d[_0x42449a(0x26f)](_0x36ff55),'i');_0x3c7084[_0x39ab8c]=_0x429cc1;}}}},Scene_Boot['prototype'][_0x4ca73a(0x1e5)]=function(){const _0xe77b70=_0x4ca73a,_0x499a51=$dataSkills['concat']($dataItems);for(const _0x37bec1 of _0x499a51){if(!_0x37bec1)continue;VisuMZ[_0xe77b70(0x499)]['Parse_Notetags_Action'](_0x37bec1);}},Scene_Boot[_0x4ca73a(0x90a)]['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x5a20e6=_0x4ca73a,_0x27c3bd=$dataActors[_0x5a20e6(0x4b0)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x3bb2f1 of _0x27c3bd){if(_0x5a20e6(0x9c1)==='CHhBO'){if(!_0x3bb2f1)continue;VisuMZ['BattleCore'][_0x5a20e6(0x5a1)](_0x3bb2f1);}else{function _0x111f6c(){const _0x7020e5=_0x5a20e6,_0x58e770=_0x50996f[_0x7020e5(0x4f6)]();this[_0x7020e5(0x1ee)]('performJump',[_0xd3ab8],_0x571b40,_0xd2c5e6),this[_0x7020e5(0x1ee)](_0x7020e5(0x347),_0x2a13be,_0x58e770[_0x7020e5(0x716)],_0x58e770['_homeY'],_0x68e93,![],'Linear'),this[_0x7020e5(0x1ee)](_0x7020e5(0x3b7),[_0x2f6558],_0x7020e5(0xa0c)),this[_0x7020e5(0x1ee)](_0x7020e5(0x530)),this['push'](_0x7020e5(0x3b7),[_0x3fc599],'walk');}}}},Scene_Boot[_0x4ca73a(0x90a)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x475c34=_0x4ca73a,_0x2772ea=VisuMZ[_0x475c34(0x499)][_0x475c34(0x800)][_0x475c34(0x1a9)]['BaseTroopIDs'],_0x511e3c=[];for(const _0x5881e9 of _0x2772ea){if('SXAjr'===_0x475c34(0x5a8)){function _0x22bb03(){const _0x37785e=_0x475c34,_0x4f9240=_0x8b2344[_0x1f7111[_0x37785e(0x1a8)]],_0x4fe508=_0x4f9240['list'][_0x37785e(0x73b)]-0x2,_0x40fac5=_0x4f9240[_0x37785e(0x3c0)][_0x4fe508];if(_0x40fac5['code']!==0xe6){const _0x3fee08={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3c1dfb=_0x4f9240['list']['pop']();_0x4f9240[_0x37785e(0x3c0)][_0x37785e(0x329)](_0x3fee08),_0x4f9240[_0x37785e(0x3c0)]['unshift'](_0x3c1dfb);}}}else{const _0xcfd24c=$dataTroops[_0x5881e9];if(_0xcfd24c)_0x511e3c[_0x475c34(0x1ee)](JsonEx[_0x475c34(0x7bf)](_0xcfd24c));}}for(const _0x43a6f7 of $dataTroops){if(_0x475c34(0x73c)==='xmXIV'){function _0x1742a5(){const _0x6ac4d4=_0x475c34;if(!_0x170536)return![];if(!_0x473f7b[_0x6ac4d4(0x570)])return![];if(_0x3fa756[_0x6ac4d4(0x570)][_0x6ac4d4(0x1fb)]!==0x0)return![];if(!_0x261444[_0x6ac4d4(0xa2d)][0x0])return![];if(!_0x268e9a[_0x6ac4d4(0xa2d)][0x0][_0x6ac4d4(0x4bb)]())return![];if(_0x1ecdc6['isSideView']())return![];if(!this[_0x6ac4d4(0xb01)]())return![];return _0x5c0b0e[_0x6ac4d4(0x90a)][_0x6ac4d4(0x912)]()===_0x6ac4d4(0x61f);}}else{if(!_0x43a6f7)continue;for(const _0x276665 of _0x511e3c){if(_0x276665['id']===_0x43a6f7['id'])continue;_0x43a6f7['pages']=_0x43a6f7[_0x475c34(0x204)][_0x475c34(0x4b0)](_0x276665[_0x475c34(0x204)]);}}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0xa62a63=_0x4ca73a,_0x534aa4=VisuMZ[_0xa62a63(0x499)][_0xa62a63(0x800)][_0xa62a63(0x1a9)];if(_0x534aa4[_0xa62a63(0x1a8)]>0x0&&$dataCommonEvents[_0x534aa4[_0xa62a63(0x1a8)]]){const _0x23e9dc=$dataCommonEvents[_0x534aa4[_0xa62a63(0x1a8)]],_0x1c4a3c=_0x23e9dc[_0xa62a63(0x3c0)]['length']-0x2,_0x15ce96=_0x23e9dc['list'][_0x1c4a3c];if(_0x15ce96[_0xa62a63(0x48d)]!==0xe6){if(_0xa62a63(0xa87)!==_0xa62a63(0x1d9)){const _0x5e04d1={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x55c446=_0x23e9dc[_0xa62a63(0x3c0)][_0xa62a63(0xae4)]();_0x23e9dc['list'][_0xa62a63(0x329)](_0x5e04d1),_0x23e9dc[_0xa62a63(0x3c0)][_0xa62a63(0x329)](_0x55c446);}else{function _0x12ecb3(){const _0xa34e0e=_0xa62a63;return _0x4a7a6a[_0xa34e0e(0x499)]['Settings']['ActorCmd'][_0xa34e0e(0x1e7)];}}}}},Scene_Boot[_0x4ca73a(0x90a)]['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x74e19e=_0x4ca73a,_0x9b87d8=$dataSkills[_0x74e19e(0x4b0)]($dataItems);for(const _0x2c2801 of _0x9b87d8){if(!_0x2c2801)continue;VisuMZ[_0x74e19e(0x499)][_0x74e19e(0x328)](_0x2c2801);}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x314)]=VisuMZ[_0x4ca73a(0x314)],VisuMZ[_0x4ca73a(0x314)]=function(_0x1bb876){const _0x2973b8=_0x4ca73a;VisuMZ['BattleCore'][_0x2973b8(0x314)]&&VisuMZ['BattleCore'][_0x2973b8(0x314)][_0x2973b8(0x37c)](this,_0x1bb876),VisuMZ[_0x2973b8(0x499)]['Parse_Notetags_TraitObjects'](_0x1bb876);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x543)]=VisuMZ['ParseClassNotetags'],VisuMZ['ParseClassNotetags']=function(_0x45016d){const _0x38e171=_0x4ca73a;if(VisuMZ['BattleCore'][_0x38e171(0x543)]){if(_0x38e171(0xaa3)==='tWjEa')VisuMZ['BattleCore'][_0x38e171(0x543)][_0x38e171(0x37c)](this,_0x45016d);else{function _0x3c9df0(){const _0x1054b5=_0x38e171;if(!_0x2e326a)return![];return _0x2f6312[_0x1054b5(0x99c)]()===this[_0x1054b5(0x512)]();}}}VisuMZ[_0x38e171(0x499)][_0x38e171(0x5a1)](_0x45016d);},VisuMZ['BattleCore'][_0x4ca73a(0xb2b)]=VisuMZ[_0x4ca73a(0xb2b)],VisuMZ[_0x4ca73a(0xb2b)]=function(_0x33fa1c){const _0x47ece4=_0x4ca73a;if(VisuMZ['BattleCore'][_0x47ece4(0xb2b)]){if('IGKBw'===_0x47ece4(0x48c)){function _0x1234e3(){const _0x4c8d1a=_0x47ece4;this[_0x4c8d1a(0x1ff)]=this[_0x4c8d1a(0x1ff)]??0x1,this[_0x4c8d1a(0x654)][_0x4c8d1a(0xaed)]['x']=this['_distortionSprite'][_0x4c8d1a(0xaed)]['x']*this[_0x4c8d1a(0x1ff)],this['_shadowSprite']['scale']['y']=this[_0x4c8d1a(0x8d2)][_0x4c8d1a(0xaed)]['y']*this[_0x4c8d1a(0x1ff)];}}else VisuMZ[_0x47ece4(0x499)]['ParseSkillNotetags'][_0x47ece4(0x37c)](this,_0x33fa1c);}VisuMZ[_0x47ece4(0x499)][_0x47ece4(0x35f)](_0x33fa1c),VisuMZ[_0x47ece4(0x499)]['Parse_Notetags_Targets'](_0x33fa1c);},VisuMZ['BattleCore']['ParseItemNotetags']=VisuMZ[_0x4ca73a(0x32d)],VisuMZ['ParseItemNotetags']=function(_0x488776){const _0x1d776b=_0x4ca73a;VisuMZ['BattleCore'][_0x1d776b(0x32d)]&&VisuMZ[_0x1d776b(0x499)][_0x1d776b(0x32d)]['call'](this,_0x488776),VisuMZ[_0x1d776b(0x499)][_0x1d776b(0x35f)](_0x488776),VisuMZ['BattleCore'][_0x1d776b(0x328)](_0x488776);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xa6e)]=VisuMZ[_0x4ca73a(0xa6e)],VisuMZ[_0x4ca73a(0xa6e)]=function(_0x7a99a4){const _0x20e907=_0x4ca73a;if(VisuMZ['BattleCore'][_0x20e907(0xa6e)]){if('bqcdQ'!=='CfRKo')VisuMZ[_0x20e907(0x499)][_0x20e907(0xa6e)]['call'](this,_0x7a99a4);else{function _0x158b94(){const _0x473245=_0x20e907;return _0x5323cf['prototype'][_0x473245(0xb3a)][_0x473245(0x37c)](this)&&this['isActionSelectionValid']();}}}VisuMZ[_0x20e907(0x499)][_0x20e907(0x5a1)](_0x7a99a4);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xa0b)]=VisuMZ[_0x4ca73a(0xa0b)],VisuMZ[_0x4ca73a(0xa0b)]=function(_0x5ef02c){const _0xba29a4=_0x4ca73a;if(VisuMZ['BattleCore'][_0xba29a4(0xa0b)]){if(_0xba29a4(0x1d5)!=='YhLsh')VisuMZ[_0xba29a4(0x499)][_0xba29a4(0xa0b)][_0xba29a4(0x37c)](this,_0x5ef02c);else{function _0x77e344(){const _0x287e30=_0xba29a4;if(!_0x56d3e5['isSceneBattle']())return null;if(!_0xf237dc['_scene'][_0x287e30(0xa38)])return null;return _0x3699d9['_scene'][_0x287e30(0xa38)][_0x287e30(0x507)](this);}}}VisuMZ[_0xba29a4(0x499)][_0xba29a4(0x5a1)](_0x5ef02c);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x245)]=VisuMZ[_0x4ca73a(0x245)],VisuMZ[_0x4ca73a(0x245)]=function(_0x5d6712){const _0x7e9a74=_0x4ca73a;VisuMZ['BattleCore'][_0x7e9a74(0x245)]&&VisuMZ[_0x7e9a74(0x499)][_0x7e9a74(0x245)][_0x7e9a74(0x37c)](this,_0x5d6712),VisuMZ[_0x7e9a74(0x499)]['Parse_Notetags_TraitObjects'](_0x5d6712);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x8bc)]=VisuMZ[_0x4ca73a(0x8bc)],VisuMZ[_0x4ca73a(0x8bc)]=function(_0x19251b){const _0x2a3d3d=_0x4ca73a;if(VisuMZ[_0x2a3d3d(0x499)]['ParseStateNotetags']){if(_0x2a3d3d(0x8d1)==='wkwBX')VisuMZ[_0x2a3d3d(0x499)][_0x2a3d3d(0x8bc)][_0x2a3d3d(0x37c)](this,_0x19251b);else{function _0x409a72(){const _0x1b2827=_0x2a3d3d;this[_0x1b2827(0x1ee)](_0x1b2827(0x662),_0x13ef91);}}}VisuMZ[_0x2a3d3d(0x499)][_0x2a3d3d(0x5a1)](_0x19251b);},VisuMZ[_0x4ca73a(0x499)]['Parse_Notetags_Action']=function(_0xb17c61){const _0x11b51c=_0x4ca73a,_0x1917a1=['PreApplyJS',_0x11b51c(0x61b),_0x11b51c(0x523),'PostDamageJS',_0x11b51c(0x2ef),'PostStartActionJS','PreEndActionJS',_0x11b51c(0x835)];for(const _0x49dc91 of _0x1917a1){VisuMZ[_0x11b51c(0x499)][_0x11b51c(0x242)](_0xb17c61,_0x49dc91);}const _0x4e0a6e=_0xb17c61['note'];if(_0x4e0a6e[_0x11b51c(0x2b2)](/<ALWAYS CRITICAL/i)){if(_0x11b51c(0xa97)===_0x11b51c(0xa97))_0xb17c61['damage'][_0x11b51c(0x7d0)]=!![];else{function _0x21d7a5(){return _0x537bb8(_0x2616b7['$1']);}}}if(_0x4e0a6e['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)){if(_0x11b51c(0x972)!==_0x11b51c(0x2fc))_0xb17c61[_0x11b51c(0x7fc)]=Math[_0x11b51c(0x826)](0x1,Number(RegExp['$1']));else{function _0x31edee(){this['_enemies']['reverse']();}}}_0x4e0a6e[_0x11b51c(0x2b2)](/<TARGET:[ ](.*)>/i)&&(_0xb17c61[_0x11b51c(0x97b)]=String(RegExp['$1'])[_0x11b51c(0x941)]()['trim']());},VisuMZ['BattleCore'][_0x4ca73a(0x5a1)]=function(_0x170aa4){const _0x46d118=_0x4ca73a,_0x128b7a=[_0x46d118(0xa50),'PostApplyAsUserJS','PreDamageAsUserJS',_0x46d118(0x4e9),_0x46d118(0x58e),_0x46d118(0x6e7),_0x46d118(0x434),_0x46d118(0xa21),'PreStartActionJS',_0x46d118(0x368),'PreEndActionJS',_0x46d118(0x835),_0x46d118(0x63b),_0x46d118(0x65e),_0x46d118(0x267),_0x46d118(0x2d6),_0x46d118(0x46c),_0x46d118(0xac0),_0x46d118(0x265),'EscapeFailureJS',_0x46d118(0x1ac),_0x46d118(0x2b9),'PreEndTurnJS',_0x46d118(0x7f3),'PreRegenerateJS','PostRegenerateJS'];for(const _0x799a72 of _0x128b7a){VisuMZ['BattleCore'][_0x46d118(0x242)](_0x170aa4,_0x799a72);}},VisuMZ['BattleCore'][_0x4ca73a(0x328)]=function(_0x5dff0e){const _0x3568ab=_0x4ca73a,_0x488faa=_0x5dff0e[_0x3568ab(0xaa8)];if(_0x488faa[_0x3568ab(0x2b2)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){if(_0x3568ab(0x962)!==_0x3568ab(0x590)){const _0x5bd20a=String(RegExp['$1']),_0x1b0eea=VisuMZ[_0x3568ab(0x499)][_0x3568ab(0xa7e)](_0x5dff0e,'Targets');VisuMZ[_0x3568ab(0x499)][_0x3568ab(0x73a)](_0x5bd20a,_0x1b0eea);}else{function _0xc369bd(){const _0x500bd3=_0x3568ab;_0x59e7fd['BattleCore'][_0x500bd3(0x29e)][_0x500bd3(0x37c)](this),this[_0x500bd3(0x6e8)]()&&this[_0x500bd3(0x3d0)]()&&!this[_0x500bd3(0xa6f)]&&_0xcfef37[_0x500bd3(0x698)]()&&this[_0x500bd3(0x968)]();}}}if(_0x488faa['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if('PYTlF'!==_0x3568ab(0xb43)){const _0x4248cf=String(RegExp['$1']),_0x4c3db3=VisuMZ[_0x3568ab(0x499)][_0x3568ab(0xa7e)](_0x5dff0e,_0x3568ab(0x7d7));VisuMZ['BattleCore'][_0x3568ab(0x5b5)](_0x4248cf,_0x4c3db3);}else{function _0x3b9a3b(){const _0x24659b=_0x3568ab;_0x36e118=_0x30ed71||'',_0x514b0e=_0x479284||'';_0x467f6c===''&&_0x2dde52===''&&(_0x345fd0=this[_0x24659b(0x6ed)][_0x24659b(0xb6c)](),_0x102bb1=this[_0x24659b(0x8f3)][_0x24659b(0x7b7)]());const _0x51b89f=_0x5c5095[_0x24659b(0xb2a)](_0x1ee2a4),_0x2cd93d=_0x2821ea[_0x24659b(0x55d)](_0x1b33a1);_0x51b89f['addLoadListener'](this[_0x24659b(0x5da)][_0x24659b(0x1f3)](this,this[_0x24659b(0x6ed)],this['_back2Sprite'],_0x51b89f,_0x2cd93d));}}}},VisuMZ[_0x4ca73a(0x499)]['JS']={},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x242)]=function(_0x4778fb,_0xf181d6){const _0x163cb4=_0x4ca73a,_0x1df635=_0x4778fb[_0x163cb4(0xaa8)];if(_0x1df635[_0x163cb4(0x2b2)](VisuMZ['BattleCore'][_0x163cb4(0xa00)][_0xf181d6])){if('QtIVU'!==_0x163cb4(0x524)){const _0x4209bd=RegExp['$1'],_0x480194=_0x163cb4(0x487)['format'](_0x4209bd),_0x5015cc=VisuMZ[_0x163cb4(0x499)]['createKeyJS'](_0x4778fb,_0xf181d6);VisuMZ[_0x163cb4(0x499)]['JS'][_0x5015cc]=new Function(_0x480194);}else{function _0x4f2f79(){const _0x3d7a97=_0x163cb4;for(const _0x137a9a of this[_0x3d7a97(0x931)]){_0x137a9a['x']+=_0x40c5f5['PopupShiftX']*_0x360f4e,_0x137a9a['y']+=_0x4183a5[_0x3d7a97(0xa6d)];}}}}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xa7e)]=function(_0x4ffa14,_0xf30821){const _0x1791c5=_0x4ca73a;let _0x36b768='';if($dataActors[_0x1791c5(0x93d)](_0x4ffa14))_0x36b768=_0x1791c5(0x686)['format'](_0x4ffa14['id'],_0xf30821);if($dataClasses[_0x1791c5(0x93d)](_0x4ffa14))_0x36b768=_0x1791c5(0x2ca)['format'](_0x4ffa14['id'],_0xf30821);if($dataSkills[_0x1791c5(0x93d)](_0x4ffa14))_0x36b768=_0x1791c5(0x9cb)['format'](_0x4ffa14['id'],_0xf30821);if($dataItems['includes'](_0x4ffa14))_0x36b768='Item-%1-%2'[_0x1791c5(0x26f)](_0x4ffa14['id'],_0xf30821);if($dataWeapons[_0x1791c5(0x93d)](_0x4ffa14))_0x36b768=_0x1791c5(0x58a)[_0x1791c5(0x26f)](_0x4ffa14['id'],_0xf30821);if($dataArmors[_0x1791c5(0x93d)](_0x4ffa14))_0x36b768='Armor-%1-%2'[_0x1791c5(0x26f)](_0x4ffa14['id'],_0xf30821);if($dataEnemies[_0x1791c5(0x93d)](_0x4ffa14))_0x36b768=_0x1791c5(0xacc)[_0x1791c5(0x26f)](_0x4ffa14['id'],_0xf30821);if($dataStates[_0x1791c5(0x93d)](_0x4ffa14))_0x36b768=_0x1791c5(0x8fb)['format'](_0x4ffa14['id'],_0xf30821);return _0x36b768;},VisuMZ['BattleCore']['createTargetsJS']=function(_0x640f10,_0x5d1801){const _0x77d18=_0x4ca73a,_0x36a1bd=_0x77d18(0x816)['format'](_0x640f10);VisuMZ[_0x77d18(0x499)]['JS'][_0x5d1801]=new Function(_0x36a1bd);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x5b5)]=function(_0x82ae1d,_0x38bb9e){const _0x5cc876=_0x4ca73a,_0x36583b=_0x5cc876(0x806)[_0x5cc876(0x26f)](_0x82ae1d);VisuMZ[_0x5cc876(0x499)]['JS'][_0x38bb9e]=new Function(_0x36583b);},TextManager[_0x4ca73a(0x90c)]=VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x800)][_0x4ca73a(0x327)]['CmdTextAutoBattle'],TextManager[_0x4ca73a(0x564)]=VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x800)][_0x4ca73a(0x4f8)][_0x4ca73a(0xa39)],TextManager[_0x4ca73a(0x6b0)]=VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x800)][_0x4ca73a(0x4f8)][_0x4ca73a(0x6e4)],TextManager['visualHpGauge']=VisuMZ['BattleCore'][_0x4ca73a(0x800)][_0x4ca73a(0xb24)][_0x4ca73a(0x9c0)],ColorManager[_0x4ca73a(0x1c4)]=function(_0x3234f6){const _0x29b053=_0x4ca73a;return _0x3234f6=String(_0x3234f6),_0x3234f6['match'](/#(.*)/i)?_0x29b053(0x3b2)[_0x29b053(0x26f)](String(RegExp['$1'])):this[_0x29b053(0x650)](Number(_0x3234f6));},DataManager['getDamageStyle']=function(_0x1c72c0){const _0x1832bd=_0x4ca73a;if(_0x1c72c0[_0x1832bd(0xaa8)][_0x1832bd(0x2b2)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x130d5c=String(RegExp['$1'])[_0x1832bd(0x941)]()[_0x1832bd(0x7d2)]();if(_0x130d5c==='MANUAL')return _0x1832bd(0x776);if(VisuMZ[_0x1832bd(0x638)][_0x130d5c])return _0x130d5c;}const _0x1f9308=VisuMZ['BattleCore'][_0x1832bd(0x800)][_0x1832bd(0x1b8)][_0x1832bd(0x593)][_0x1832bd(0x941)]()[_0x1832bd(0x7d2)]();if(VisuMZ[_0x1832bd(0x638)][_0x1f9308])return _0x1f9308;return _0x1832bd(0x776);},DataManager[_0x4ca73a(0xb6e)]=function(_0x59a28e){const _0x2e7459=_0x4ca73a;_0x59a28e=_0x59a28e[_0x2e7459(0x941)]()['trim'](),this[_0x2e7459(0x56c)]=this[_0x2e7459(0x56c)]||{};if(this[_0x2e7459(0x56c)][_0x59a28e])return this[_0x2e7459(0x56c)][_0x59a28e];for(let _0x25f362=0x1;_0x25f362<0x64;_0x25f362++){if(_0x2e7459(0x901)===_0x2e7459(0x89a)){function _0x2f107f(){const _0x825542=_0x2e7459;_0x266490[_0x825542(0x499)][_0x825542(0x1be)]['call'](this),this[_0x825542(0x2f4)]();}}else{if(!$dataSystem[_0x2e7459(0xa1d)][_0x25f362])continue;let _0xec4275=$dataSystem[_0x2e7459(0xa1d)][_0x25f362][_0x2e7459(0x941)]()[_0x2e7459(0x7d2)]();_0xec4275=_0xec4275[_0x2e7459(0x301)](/\x1I\[(\d+)\]/gi,''),_0xec4275=_0xec4275[_0x2e7459(0x301)](/\\I\[(\d+)\]/gi,''),this[_0x2e7459(0x56c)][_0xec4275]=_0x25f362;}}return this[_0x2e7459(0x56c)][_0x59a28e]||0x0;},DataManager[_0x4ca73a(0x92a)]=function(_0x19857c){const _0x16f0a5=_0x4ca73a;_0x19857c=_0x19857c[_0x16f0a5(0x941)]()[_0x16f0a5(0x7d2)](),this[_0x16f0a5(0x2a0)]=this[_0x16f0a5(0x2a0)]||{};if(this['_skillIDs'][_0x19857c])return this[_0x16f0a5(0x2a0)][_0x19857c];for(const _0x185e97 of $dataSkills){if('NRWMO'!=='UMfzw'){if(!_0x185e97)continue;this[_0x16f0a5(0x2a0)][_0x185e97[_0x16f0a5(0x491)][_0x16f0a5(0x941)]()[_0x16f0a5(0x7d2)]()]=_0x185e97['id'];}else{function _0x1cbdd9(){const _0x424d3c=_0x16f0a5;this[_0x424d3c(0x968)]();}}}return this['_skillIDs'][_0x19857c]||0x0;},DataManager[_0x4ca73a(0x7e0)]=function(_0x49373f){const _0x1e389b=_0x4ca73a;_0x49373f=_0x49373f[_0x1e389b(0x941)]()[_0x1e389b(0x7d2)](),this[_0x1e389b(0x585)]=this[_0x1e389b(0x585)]||{};if(this[_0x1e389b(0x585)][_0x49373f])return this[_0x1e389b(0x585)][_0x49373f];for(const _0x1dd8fb of $dataEnemies){if(!_0x1dd8fb)continue;this[_0x1e389b(0x585)][_0x1dd8fb[_0x1e389b(0x491)][_0x1e389b(0x941)]()[_0x1e389b(0x7d2)]()]=_0x1dd8fb['id'];}return this[_0x1e389b(0x585)][_0x49373f]||0x0;},DataManager[_0x4ca73a(0x306)]=function(_0x2b853a){const _0x65fd5f=_0x4ca73a;_0x2b853a=_0x2b853a[_0x65fd5f(0x941)]()['trim'](),this['_wtypeIDs']=this[_0x65fd5f(0x2dc)]||{};if(this[_0x65fd5f(0x2dc)][_0x2b853a])return this[_0x65fd5f(0x2dc)][_0x2b853a];for(let _0x365488=0x1;_0x365488<0x64;_0x365488++){if(_0x65fd5f(0x320)==='Tsisj'){function _0x5f1c93(){const _0x1cb84b=_0x65fd5f;if(!this['_damageContainer'])return;if(!_0x2b31b4)return;this[_0x1cb84b(0x40b)]['removeChild'](_0x1defcf);}}else{if(!$dataSystem[_0x65fd5f(0x67e)][_0x365488])continue;let _0x2b889a=$dataSystem[_0x65fd5f(0x67e)][_0x365488][_0x65fd5f(0x941)]()[_0x65fd5f(0x7d2)]();_0x2b889a=_0x2b889a[_0x65fd5f(0x301)](/\x1I\[(\d+)\]/gi,''),_0x2b889a=_0x2b889a[_0x65fd5f(0x301)](/\\I\[(\d+)\]/gi,''),this[_0x65fd5f(0x2dc)][_0x2b889a]=_0x365488;}}return this[_0x65fd5f(0x2dc)][_0x65fd5f(0x899)]=0x0,this[_0x65fd5f(0x2dc)][_0x2b853a]||0x0;},DataManager[_0x4ca73a(0x3d8)]=function(_0x19c560){const _0x149ceb=_0x4ca73a,_0x3d4a64=_0x149ceb(0x30a);let _0x27b52d=_0x19c560[_0x149ceb(0x549)],_0x5674ec=_0x19c560[_0x149ceb(0x491)];const _0x462f2e=_0x19c560[_0x149ceb(0xaa8)];return _0x462f2e[_0x149ceb(0x2b2)](/<DISPLAY ICON: (\d+)>/i)&&(_0x27b52d=Number(RegExp['$1'])),_0x462f2e[_0x149ceb(0x2b2)](/<DISPLAY TEXT: (.*)>/i)&&(_0x5674ec=String(RegExp['$1'])),_0x3d4a64[_0x149ceb(0x26f)](_0x27b52d,_0x5674ec);},DataManager[_0x4ca73a(0x91c)]=function(_0x512701){const _0x3614a7=_0x4ca73a;return _0x512701['note'][_0x3614a7(0x2b2)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x512701[_0x3614a7(0x491)];},DataManager['battleCommandIcon']=function(_0x3d9b98){const _0x4e9f03=_0x4ca73a;if(_0x3d9b98['note'][_0x4e9f03(0x2b2)](/<COMMAND ICON: (\d+)>/i)){if(_0x4e9f03(0x425)!==_0x4e9f03(0x4e7))return Number(RegExp['$1']);else{function _0x67df8a(){const _0x27eb75=_0x4e9f03;_0x1594b1['prototype'][_0x27eb75(0x9b8)][_0x27eb75(0x37c)](this);const _0x2d07b3=this[_0x27eb75(0x912)]();_0x2d07b3===_0x27eb75(0x89e)&&this['showHelpWindow']();}}}else{if(_0x4e9f03(0xaaa)!==_0x4e9f03(0x71c))return _0x3d9b98[_0x4e9f03(0x549)];else{function _0x4a432f(){const _0x57740d=_0x4e9f03;if(!_0x4e30ba['isPhysical']())return![];if(!_0x5ee603['isForAll']())return![];if(!_0x3bed20[_0x57740d(0x4b8)]())return![];return _0x371bd1[_0x57740d(0x499)][_0x57740d(0x800)]['ActionSequence'][_0x57740d(0x5ec)];}}}},DataManager['swapEnemyIDs']=function(_0x37fd2f){const _0x148b90=_0x4ca73a,_0x419631=$dataEnemies[_0x37fd2f];if(_0x419631){if(_0x419631['note'][_0x148b90(0x2b2)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x4438a6=String(RegExp['$1'])[_0x148b90(0x2fb)](/[\r\n]+/)[_0x148b90(0x942)](''),_0x57b781=this[_0x148b90(0x903)](_0x4438a6);_0x37fd2f=this[_0x148b90(0x7e0)](_0x57b781)||_0x37fd2f,_0x37fd2f=DataManager['swapEnemyIDs'](_0x37fd2f);}}return _0x37fd2f;},DataManager[_0x4ca73a(0x903)]=function(_0x2a1848){const _0xb4fea5=_0x4ca73a;let _0x4b8693=0x0;const _0x1c1299={};for(const _0x5adcd5 of _0x2a1848){if(_0x5adcd5['match'](/(.*):[ ](\d+)/i)){if(_0xb4fea5(0x68a)===_0xb4fea5(0x68a)){const _0x5c69e4=String(RegExp['$1'])[_0xb4fea5(0x7d2)](),_0x5b90bd=Number(RegExp['$2']);_0x1c1299[_0x5c69e4]=_0x5b90bd,_0x4b8693+=_0x5b90bd;}else{function _0x3ce1f5(){const _0x26655a=_0xb4fea5;this[_0x26655a(0x733)][_0x26655a(0xb62)](),this[_0x26655a(0x733)]['active']&&this['_skillWindow'][_0x26655a(0xa54)](),this[_0x26655a(0x8e9)][_0x26655a(0xb62)](),this[_0x26655a(0x8e9)][_0x26655a(0x4ae)]&&this[_0x26655a(0x8e9)][_0x26655a(0xa54)]();}}}else{if(_0x5adcd5[_0xb4fea5(0x2b2)](/(.*):[ ](\d+\.?\d+)/i)){const _0x1c3e25=String(RegExp['$1'])[_0xb4fea5(0x7d2)](),_0x4b8733=Number(RegExp['$2']);_0x1c1299[_0x1c3e25]=_0x4b8733,_0x4b8693+=_0x4b8733;}else{if(_0x5adcd5!==''){if(_0xb4fea5(0x41d)!=='LQumJ')_0x1c1299[_0x5adcd5]=0x1,_0x4b8693++;else{function _0x5903ef(){const _0xd26c50=_0xb4fea5;this['push'](_0xd26c50(0x22c),_0x57b4c9);}}}}}}if(_0x4b8693<=0x0)return'';let _0x25c076=Math[_0xb4fea5(0x34e)]()*_0x4b8693;for(const _0x237776 in _0x1c1299){_0x25c076-=_0x1c1299[_0x237776];if(_0x25c076<=0x0)return _0x237776;}return'';},DataManager[_0x4ca73a(0xae7)]=function(_0x85ff2b){const _0x2ee0ad=_0x4ca73a;if(!_0x85ff2b)return![];if(!VisuMZ['BattleCore']['Settings'][_0x2ee0ad(0xb23)][_0x2ee0ad(0x43b)])return![];if(_0x85ff2b[_0x2ee0ad(0xaa8)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x85ff2b[_0x2ee0ad(0xaa8)][_0x2ee0ad(0x2b2)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x58bac5 of _0x85ff2b['effects']){if(_0x2ee0ad(0xb4d)!==_0x2ee0ad(0x7b9)){if(!_0x58bac5)continue;if(_0x58bac5['code']===Game_Action[_0x2ee0ad(0x6ec)])return!![];}else{function _0x4ae24c(){const _0x2c19d0=_0x2ee0ad;return _0x16f1e5[_0x2c19d0(0x5ba)]&&_0x2c43d6[_0x2c19d0(0x642)][_0x2c19d0(0x93d)]('['+_0x424eab+']');}}}return![];},ConfigManager[_0x4ca73a(0xa31)]=ConfigManager[_0x4ca73a(0xa31)]??![],ConfigManager[_0x4ca73a(0x840)]=ConfigManager[_0x4ca73a(0x840)]??![],ConfigManager[_0x4ca73a(0x1a6)]=ConfigManager['visualHpGauge']??!![],VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x337)]=ConfigManager[_0x4ca73a(0x3a8)],ConfigManager[_0x4ca73a(0x3a8)]=function(){const _0x12c689=_0x4ca73a,_0x3c413c=VisuMZ[_0x12c689(0x499)][_0x12c689(0x337)][_0x12c689(0x37c)](this);return _0x3c413c[_0x12c689(0xa31)]=this[_0x12c689(0xa31)],_0x3c413c[_0x12c689(0x840)]=this[_0x12c689(0x840)],_0x3c413c[_0x12c689(0x1a6)]=this[_0x12c689(0x1a6)],_0x3c413c;},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x8e1)]=ConfigManager['applyData'],ConfigManager[_0x4ca73a(0x6a1)]=function(_0x15a0ed){const _0x3849c3=_0x4ca73a;VisuMZ['BattleCore'][_0x3849c3(0x8e1)]['call'](this,_0x15a0ed);'autoBattleAtStart'in _0x15a0ed?this[_0x3849c3(0xa31)]=_0x15a0ed[_0x3849c3(0xa31)]:this[_0x3849c3(0xa31)]=![];if(_0x3849c3(0x840)in _0x15a0ed){if(_0x3849c3(0x9ca)!==_0x3849c3(0x9ca)){function _0xcc368d(){const _0x497f14=_0x3849c3;return this[_0x497f14(0x5ca)]()[_0x497f14(0x1f4)];}}else this['autoBattleUseSkills']=_0x15a0ed[_0x3849c3(0x840)];}else this[_0x3849c3(0x840)]=![];if(_0x3849c3(0x1a6)in _0x15a0ed){if(_0x3849c3(0x2ba)!=='jDNGz'){function _0x258d97(){const _0x3ea0f7=_0x3849c3;if(!this[_0x3ea0f7(0x32c)]&&this[_0x3ea0f7(0x9d8)]()['isConfused']())return![];if(this['isCustomBattleScope']())return!![];return typeof this[_0x3ea0f7(0xa07)]()[_0x3ea0f7(0x97b)]===_0x3ea0f7(0x79d);}}else this['visualHpGauge']=_0x15a0ed[_0x3849c3(0x1a6)];}else this[_0x3849c3(0x1a6)]=!![];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x611)]=BattleManager[_0x4ca73a(0xa46)],BattleManager[_0x4ca73a(0xa46)]=function(){const _0x1fa30e=_0x4ca73a;VisuMZ[_0x1fa30e(0x499)]['BattleManager_initMembers'][_0x1fa30e(0x37c)](this),this[_0x1fa30e(0xac8)]=[];},BattleManager[_0x4ca73a(0x3eb)]=function(){const _0x1c2865=_0x4ca73a;if(!SceneManager[_0x1c2865(0xb22)]())return;const _0x510345=SceneManager[_0x1c2865(0x612)][_0x1c2865(0x790)];if(_0x510345)_0x510345[_0x1c2865(0x257)]();},BattleManager[_0x4ca73a(0x6f0)]=function(){const _0x3b4c51=_0x4ca73a;if(BattleManager[_0x3b4c51(0x75d)]())return _0x3b4c51(0x51f);return _0x3b4c51(0x760);},BattleManager[_0x4ca73a(0x701)]=function(_0x30a556){const _0x57050b=_0x4ca73a;return _0x30a556=_0x30a556[_0x57050b(0x941)]()[_0x57050b(0x7d2)](),this[_0x57050b(0x6f0)]()===_0x30a556;},BattleManager['isDTB']=function(){const _0x4b9c7f=_0x4ca73a;return this['isBattleSys'](_0x4b9c7f(0x760));},BattleManager[_0x4ca73a(0x8fc)]=function(){const _0x1ea1a7=_0x4ca73a;return this[_0x1ea1a7(0x6e8)]();},BattleManager[_0x4ca73a(0x1d0)]=function(){const _0x269289=_0x4ca73a;return!this[_0x269289(0x8fc)]();},BattleManager[_0x4ca73a(0x87f)]=function(){const _0x2de4df=_0x4ca73a;return!this['isTurnBased']()&&!this[_0x2de4df(0x1d0)]();},BattleManager[_0x4ca73a(0x2fd)]=function(_0x10a891){const _0x372a4e=_0x4ca73a;$gameParty[_0x372a4e(0x2fd)](_0x10a891),$gameTroop[_0x372a4e(0x2fd)](_0x10a891);},VisuMZ[_0x4ca73a(0x499)]['BattleManager_startBattle']=BattleManager[_0x4ca73a(0x577)],BattleManager[_0x4ca73a(0x577)]=function(){const _0x145c9b=_0x4ca73a;this['_endBattle']=![],this['_autoBattle']=ConfigManager['autoBattleAtStart'],this[_0x145c9b(0x2fd)]('PreStartBattleJS'),VisuMZ[_0x145c9b(0x499)]['BattleManager_startBattle'][_0x145c9b(0x37c)](this),this[_0x145c9b(0x2fd)](_0x145c9b(0x65e));},BattleManager[_0x4ca73a(0xb54)]=function(_0x43c3e5){const _0x376d7e=_0x4ca73a,_0x249b3b=VisuMZ['BattleCore'][_0x376d7e(0x800)][_0x376d7e(0x1a9)];if(_0x249b3b['BattleEndEvent']&&VisuMZ['BattleCore'][_0x376d7e(0x6c2)](_0x249b3b['BattleEndEvent'])){if(_0x376d7e(0x3f6)!==_0x376d7e(0x9c7))$gameTemp[_0x376d7e(0x3d5)](_0x249b3b['BattleEndEvent']);else{function _0x59a4d1(){const _0x5bd82a=_0x376d7e;_0x4d44ff[_0x5bd82a(0x53c)]()&&_0x2fbef4[_0x5bd82a(0x4bb)]()&&this[_0x5bd82a(0x1ee)](_0x5bd82a(0x281),_0x17bfd9,_0x3f9393),_0x31016b[_0x5bd82a(0xa07)]()[_0x5bd82a(0x7c2)]<0x0?this[_0x5bd82a(0x7a7)](_0x9f4c85,_0x184f6c,_0x4ae801):this[_0x5bd82a(0x522)](_0xf1fc31,_0x32b571,_0x6448ec);}}}const _0x6b5cd4='%1Event'[_0x376d7e(0x26f)](_0x43c3e5);_0x249b3b[_0x6b5cd4]&&VisuMZ[_0x376d7e(0x499)][_0x376d7e(0x6c2)](_0x249b3b[_0x6b5cd4])&&$gameTemp[_0x376d7e(0x3d5)](_0x249b3b[_0x6b5cd4]);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x217)]=BattleManager[_0x4ca73a(0xb56)],BattleManager[_0x4ca73a(0xb56)]=function(){const _0x488760=_0x4ca73a;this[_0x488760(0x2fd)](_0x488760(0x46c)),VisuMZ[_0x488760(0x499)][_0x488760(0x217)][_0x488760(0x37c)](this),this[_0x488760(0xb54)](_0x488760(0xb2c));},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x5ef)]=BattleManager[_0x4ca73a(0x1fa)],BattleManager[_0x4ca73a(0x1fa)]=function(){const _0x2ca5c0=_0x4ca73a;this['processBattleCoreJS']('BattleDefeatJS'),VisuMZ[_0x2ca5c0(0x499)][_0x2ca5c0(0x5ef)][_0x2ca5c0(0x37c)](this),this[_0x2ca5c0(0xb54)](_0x2ca5c0(0x793));},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x65c)]=BattleManager['endBattle'],BattleManager[_0x4ca73a(0x666)]=function(_0x521d8d){const _0x28387d=_0x4ca73a;this[_0x28387d(0x7b3)]=!![],this[_0x28387d(0x65d)]=![],this[_0x28387d(0x2fd)]('PreEndBattleJS'),VisuMZ[_0x28387d(0x499)][_0x28387d(0x65c)][_0x28387d(0x37c)](this,_0x521d8d),this[_0x28387d(0x2fd)](_0x28387d(0x2d6));},VisuMZ[_0x4ca73a(0x499)]['BattleManager_startTurn']=BattleManager['startTurn'],BattleManager['startTurn']=function(){const _0x703cc9=_0x4ca73a;if(this[_0x703cc9(0x8fc)]())this['processBattleCoreJS'](_0x703cc9(0x1ac));VisuMZ[_0x703cc9(0x499)][_0x703cc9(0x643)][_0x703cc9(0x37c)](this);if(this[_0x703cc9(0x8fc)]())this[_0x703cc9(0x2fd)]('PostStartTurnJS');},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x249)]=BattleManager[_0x4ca73a(0x870)],BattleManager[_0x4ca73a(0x870)]=function(){const _0x29c50e=_0x4ca73a,_0x4dd676=this['_subject']['currentAction']();if(_0x4dd676)_0x4dd676[_0x29c50e(0xa9b)]('PreStartActionJS');VisuMZ[_0x29c50e(0x499)][_0x29c50e(0x249)][_0x29c50e(0x37c)](this);if(_0x4dd676)_0x4dd676[_0x29c50e(0xa9b)](_0x29c50e(0x368));},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x991)]=BattleManager[_0x4ca73a(0x510)],BattleManager[_0x4ca73a(0x510)]=function(){const _0x4179be=_0x4ca73a,_0x2d4b13=this['_action'];if(_0x2d4b13){if(_0x4179be(0x486)==='ZJHIe'){function _0x24a75e(){const _0x2f6382=_0x4179be;if(this[_0x2f6382(0x350)]<=0x0)return;const _0x50bdfd=this['_angleDuration'],_0x16311a=this['_angleWholeDuration'],_0x676bce=this[_0x2f6382(0x841)];_0x306393[_0x2f6382(0x5d1)]?this[_0x2f6382(0xa53)]=this['applyEasing'](this[_0x2f6382(0xa53)],this[_0x2f6382(0x2ed)],_0x50bdfd,_0x16311a,_0x676bce):this[_0x2f6382(0xa53)]=(this[_0x2f6382(0xa53)]*(_0x50bdfd-0x1)+this[_0x2f6382(0x2ed)])/_0x50bdfd;this['_angleDuration']--;if(this['_angleDuration']<=0x0)this['onAngleEnd']();}}else _0x2d4b13[_0x4179be(0xa9b)](_0x4179be(0x986));}VisuMZ[_0x4179be(0x499)][_0x4179be(0x991)]['call'](this),_0x2d4b13&&_0x2d4b13[_0x4179be(0xa9b)]('PostEndActionJS'),this[_0x4179be(0x2af)](this[_0x4179be(0x501)]());},BattleManager[_0x4ca73a(0x2af)]=function(_0x5c2396){const _0x3f45fc=_0x4ca73a;for(const _0x35a877 of _0x5c2396){if(_0x3f45fc(0x4c6)!==_0x3f45fc(0x4c6)){function _0x15939b(){const _0x45efe6=_0x3f45fc;return _0x7e2e80[_0x45efe6(0x499)]['Sprite_Battleback_adjustPosition'][_0x45efe6(0x37c)](this);}}else{if(!_0x35a877)continue;if(!_0x35a877[_0x3f45fc(0x4f6)]())continue;_0x35a877[_0x3f45fc(0x4f6)]()[_0x3f45fc(0x4bc)]();}}},BattleManager[_0x4ca73a(0x5f7)]=function(){const _0x58f37c=_0x4ca73a;!this['_logWindow'][_0x58f37c(0xaa4)]()&&this['endAction']();},Game_Battler[_0x4ca73a(0x90a)]['onAllActionsEnd']=function(){const _0x5a0952=_0x4ca73a;this[_0x5a0952(0x900)]();if(Imported[_0x5a0952(0x2b8)]){if('TZAYR'!=='FbVKn'){const _0xf9dfc1=VisuMZ[_0x5a0952(0x653)][_0x5a0952(0x800)][_0x5a0952(0x31f)];_0xf9dfc1&&_0xf9dfc1[_0x5a0952(0x57a)]===![]&&this[_0x5a0952(0x679)](0x1);}else{function _0x4b6468(){_0x116c70['_scene']['updateBattleProcess']();}}}else{if(_0x5a0952(0x815)!==_0x5a0952(0x815)){function _0x200a96(){const _0x3f4599=_0x5a0952;this[_0x3f4599(0x1ee)](_0x3f4599(0x2c0),_0x1d8149,[_0x37235f[_0x3f4599(0xb88)]],-0x1);}}else this[_0x5a0952(0x679)](0x1);}this[_0x5a0952(0x690)]();},BattleManager[_0x4ca73a(0x69c)]=function(){const _0x517df4=_0x4ca73a;this[_0x517df4(0x866)]=VisuMZ[_0x517df4(0x499)]['Settings'][_0x517df4(0x1a9)][_0x517df4(0xb26)][_0x517df4(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)]['BattleManager_onEscapeSuccess']=BattleManager[_0x4ca73a(0x226)],BattleManager[_0x4ca73a(0x226)]=function(){const _0x55ec83=_0x4ca73a;this['processBattleCoreJS'](_0x55ec83(0x265)),BattleManager['_spriteset'][_0x55ec83(0xa92)](),VisuMZ[_0x55ec83(0x499)][_0x55ec83(0x8a5)][_0x55ec83(0x37c)](this),this[_0x55ec83(0xb54)]('EscapeSuccess');},VisuMZ['BattleCore'][_0x4ca73a(0x6d6)]=BattleManager[_0x4ca73a(0x645)],BattleManager['onEscapeFailure']=function(){const _0x568cdb=_0x4ca73a;this['processBattleCoreJS']('EscapeFailureJS');const _0x104e40=this[_0x568cdb(0x866)];VisuMZ[_0x568cdb(0x499)]['BattleManager_onEscapeFailure'][_0x568cdb(0x37c)](this),this[_0x568cdb(0x866)]=_0x104e40+VisuMZ[_0x568cdb(0x499)][_0x568cdb(0x800)][_0x568cdb(0x1a9)][_0x568cdb(0x367)]['call'](this),this[_0x568cdb(0xb54)](_0x568cdb(0x66b));},BattleManager[_0x4ca73a(0xb00)]=function(){const _0x33314d=_0x4ca73a;let _0x5cc1f6=![];if(this[_0x33314d(0xa85)]()){if(_0x33314d(0x392)!=='iDDeD'){function _0x50fcb4(){const _0x52cff0=_0x33314d;_0x10a820[_0x52cff0(0x499)][_0x52cff0(0xb2b)][_0x52cff0(0x37c)](this,_0x18f202);}}else for(const _0x3d22ca of $gameTroop['enemyNames']()){if(_0x33314d(0x237)===_0x33314d(0x89f)){function _0x487152(){const _0x40d9af=_0x33314d;return this['currentClass']()[_0x40d9af(0xaa8)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x391f06(_0x3b5a97['$1'])[_0x40d9af(0x2fb)](/[\r\n]+/):_0x2aaff7[_0x40d9af(0x499)]['Settings'][_0x40d9af(0x7f4)][_0x40d9af(0x1e7)];}}else this[_0x33314d(0x526)][_0x33314d(0x1ee)]('addText',TextManager[_0x33314d(0x193)]['format'](_0x3d22ca)),this[_0x33314d(0x526)][_0x33314d(0x1ee)](_0x33314d(0x591)),_0x5cc1f6=!![];}}if(this[_0x33314d(0x3c3)]){if(_0x33314d(0x272)==='baEgN')this[_0x33314d(0x526)][_0x33314d(0x1ee)](_0x33314d(0x807),TextManager[_0x33314d(0x39d)]['format']($gameParty[_0x33314d(0x491)]())),this[_0x33314d(0x526)][_0x33314d(0x1ee)](_0x33314d(0x591));else{function _0x1667d5(){const _0xd0e3dd=_0x33314d,_0x452fe6=_0x4cb629[_0xd0e3dd(0x564)],_0x1679dd=_0xd0e3dd(0xa31);this['addCommand'](_0x452fe6,_0x1679dd);}}}else this['_surprise']&&(this['_logWindow']['push']('addText',TextManager[_0x33314d(0x42e)][_0x33314d(0x26f)]($gameParty[_0x33314d(0x491)]())),this[_0x33314d(0x526)][_0x33314d(0x1ee)](_0x33314d(0x591)));_0x5cc1f6&&(this[_0x33314d(0x526)][_0x33314d(0x1ee)](_0x33314d(0x591)),this[_0x33314d(0x526)]['push']('clear')),this['isTpb']()&&this['isSkipPartyCommandWindow']()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager['isDisplayEmergedEnemies']=function(){const _0x5dc414=_0x4ca73a;if(BattleManager['_autoBattle'])return![];return VisuMZ['BattleCore'][_0x5dc414(0x800)][_0x5dc414(0xa94)][_0x5dc414(0x626)];},VisuMZ['BattleCore'][_0x4ca73a(0x29e)]=BattleManager[_0x4ca73a(0x192)],BattleManager[_0x4ca73a(0x192)]=function(){const _0x5b302a=_0x4ca73a;VisuMZ[_0x5b302a(0x499)]['BattleManager_startInput'][_0x5b302a(0x37c)](this);if(this[_0x5b302a(0x6e8)]()&&this[_0x5b302a(0x3d0)]()&&!this['_surprise']&&$gameParty[_0x5b302a(0x698)]()){if(_0x5b302a(0x5dd)!==_0x5b302a(0x5dd)){function _0x4bc32a(){const _0x3696ba=_0x5b302a;_0x5a9946[_0x3696ba(0x5c8)]=[];}}else this[_0x5b302a(0x968)]();}},BattleManager[_0x4ca73a(0x3d0)]=function(){const _0x2fdced=_0x4ca73a;return VisuMZ[_0x2fdced(0x499)]['Settings'][_0x2fdced(0x327)][_0x2fdced(0xaa1)];},BattleManager['checkTpbInputOpen']=function(){const _0x10a43b=_0x4ca73a;this[_0x10a43b(0x6d0)]()&&this['selectNextCommand']();},VisuMZ[_0x4ca73a(0x499)]['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x9bc)],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x9bc)]=function(){const _0x32568d=_0x4ca73a;VisuMZ[_0x32568d(0x499)][_0x32568d(0x4eb)]['call'](this);if(BattleManager[_0x32568d(0x75d)]()&&BattleManager[_0x32568d(0x725)]){if(_0x32568d(0x609)!=='MXSXY')BattleManager['_tpbNeedsPartyCommand']=![],this[_0x32568d(0x719)]();else{function _0x5ab163(){const _0xba4dc6=_0x32568d;_0x4df088[_0xba4dc6(0x499)]['Sprite_Actor_initMembers'][_0xba4dc6(0x37c)](this),this['attachSpritesToDistortionSprite']();}}}},BattleManager[_0x4ca73a(0x6ba)]=function(_0x179bc1,_0x45817e){const _0x53d013=_0x4ca73a;this['_action'][_0x53d013(0x1e3)]=_0x45817e,this[_0x53d013(0x526)][_0x53d013(0xb6d)](_0x45817e),this[_0x53d013(0x526)][_0x53d013(0x1d3)](_0x179bc1,this[_0x53d013(0x40d)]),this['_action'][_0x53d013(0x798)](_0x179bc1),this['_logWindow'][_0x53d013(0x336)](_0x179bc1,_0x179bc1);},VisuMZ['BattleCore'][_0x4ca73a(0x4f5)]=BattleManager[_0x4ca73a(0x77e)],BattleManager[_0x4ca73a(0x77e)]=function(){const _0x3e2001=_0x4ca73a;VisuMZ['BattleCore'][_0x3e2001(0x4f5)][_0x3e2001(0x37c)](this),this[_0x3e2001(0x5ae)]=this[_0x3e2001(0x5ae)][_0x3e2001(0x5be)](_0x54b2f3=>_0x54b2f3&&_0x54b2f3[_0x3e2001(0x773)]());},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xb4c)]=BattleManager['updatePhase'],BattleManager[_0x4ca73a(0x868)]=function(_0x48ec36){const _0x10d4cb=_0x4ca73a;if(this['_phase']==='custom')this['updateCustomActionSequence']();else this[_0x10d4cb(0x421)]===_0x10d4cb(0x33b)?this[_0x10d4cb(0x5de)]():VisuMZ[_0x10d4cb(0x499)][_0x10d4cb(0xb4c)]['call'](this,_0x48ec36);},BattleManager[_0x4ca73a(0x2de)]=function(){const _0x3b629c=_0x4ca73a;this[_0x3b629c(0xb63)]=this['_targets'][_0x3b629c(0x7ef)](0x0),this[_0x3b629c(0x6f5)]=0x0,this['_target']=this[_0x3b629c(0xb63)][0x0]||null,this[_0x3b629c(0x421)]=_0x3b629c(0x76c);},BattleManager[_0x4ca73a(0x930)]=function(){const _0x4b755d=_0x4ca73a;!this[_0x4b755d(0x435)]()&&!this[_0x4b755d(0x526)]['isBusy']()&&(this['_phase']=_0x4b755d(0x7ba));},BattleManager[_0x4ca73a(0x33b)]=function(_0x1f3810){const _0x5d5178=_0x4ca73a;this[_0x5d5178(0x5ae)][_0x5d5178(0x942)](_0x1f3810);if(_0x1f3810===this['_subject'])return;const _0x8ba07a=JsonEx[_0x5d5178(0x7bf)](_0x1f3810[_0x5d5178(0x2da)]());this['_forcedBattlers'][_0x5d5178(0x1ee)]([_0x1f3810,_0x8ba07a]);},BattleManager[_0x4ca73a(0xa63)]=function(){},BattleManager[_0x4ca73a(0x452)]=function(){const _0x508efe=_0x4ca73a;if(this[_0x508efe(0x75d)]())this[_0x508efe(0x421)]='turn';else{if(this[_0x508efe(0xac8)][_0x508efe(0x73b)]>0x0){if(_0x508efe(0x19c)===_0x508efe(0x4fa)){function _0x5747bc(){_0x2f015f['removeState'](_0x5813f7);}}else this[_0x508efe(0x421)]=_0x508efe(0x5fe);}else this[_0x508efe(0x192)]();}},BattleManager[_0x4ca73a(0xb59)]=function(){const _0x59534c=_0x4ca73a,_0x3bc377=this[_0x59534c(0xb88)];_0x3bc377&&this[_0x59534c(0x75d)]()&&_0x3bc377['setActionState'](_0x59534c(0x61a));for(;;){const _0x633ba3=this[_0x59534c(0xb72)]();if(!_0x633ba3)return null;if(_0x633ba3[_0x59534c(0x808)]()&&_0x633ba3[_0x59534c(0xb34)]()){if(_0x59534c(0x976)!==_0x59534c(0x976)){function _0x4524a7(){const _0x44bbd7=_0x59534c;_0x4b5d15[_0x44bbd7(0x923)]([_0x49194a]);}}else return _0x633ba3;}}},BattleManager['getNextSubjectFromPool']=function(){const _0x54e753=_0x4ca73a;if(this['_forcedBattlers']['length']>0x0){const _0x44f470=this[_0x54e753(0xac8)][_0x54e753(0x6b6)](),_0x517a35=_0x44f470[0x0];return _0x517a35[_0x54e753(0x8d3)]=_0x517a35['_actions']||[],_0x517a35[_0x54e753(0x8d3)][0x0]=_0x44f470[0x1],_0x517a35;}else return this[_0x54e753(0x5ae)][_0x54e753(0x6b6)]();},VisuMZ[_0x4ca73a(0x499)]['Game_Battler_forceAction']=Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x33b)],Game_Battler['prototype'][_0x4ca73a(0x33b)]=function(_0x4e4087,_0x3360be){const _0x179279=_0x4ca73a;VisuMZ[_0x179279(0x499)]['Game_Battler_forceAction'][_0x179279(0x37c)](this,_0x4e4087,_0x3360be),this[_0x179279(0x8d3)][this['_actions'][_0x179279(0x73b)]-0x1][_0x179279(0x83f)]=!![];},Game_Interpreter[_0x4ca73a(0x90a)]['command339']=function(_0x1a3960){return this['iterateBattler'](_0x1a3960[0x0],_0x1a3960[0x1],_0x5a9fae=>{const _0x23dd32=_0x1c5d;if('atzDP'!==_0x23dd32(0x7fe)){function _0x1164a0(){const _0x17623f=_0x23dd32;this[_0x17623f(0xabe)](_0x4c2e69);}}else!_0x5a9fae[_0x23dd32(0x97d)]()&&(_0x5a9fae['forceAction'](_0x1a3960[0x2],_0x1a3960[0x3]),BattleManager[_0x23dd32(0x33b)](_0x5a9fae));}),!![];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x8b2)]=Game_Battler['prototype'][_0x4ca73a(0x750)],Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x750)]=function(){const _0xd95e2a=_0x4ca73a;VisuMZ['BattleCore'][_0xd95e2a(0x8b2)][_0xd95e2a(0x37c)](this),this['_actions']['length']<=0x0&&(this[_0xd95e2a(0x977)]=Number[_0xd95e2a(0x8b8)]);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x78e)]=BattleManager[_0x4ca73a(0x968)],BattleManager[_0x4ca73a(0x968)]=function(){const _0x10ec39=_0x4ca73a;if(this[_0x10ec39(0x75d)]()){if(_0x10ec39(0x713)!==_0x10ec39(0x689))this[_0x10ec39(0x3cb)]();else{function _0xcad5a0(){const _0x240508=_0x10ec39;this[_0x240508(0x3bd)]=this['_targetOpacity'];}}}else VisuMZ[_0x10ec39(0x499)][_0x10ec39(0x78e)]['call'](this);},BattleManager[_0x4ca73a(0x3cb)]=function(){const _0x263d8e=_0x4ca73a;if(this[_0x263d8e(0x605)]){if(this['_currentActor'][_0x263d8e(0x968)]())return;this[_0x263d8e(0x881)](),this[_0x263d8e(0x33c)]();if(!this[_0x263d8e(0xb88)]&&!this[_0x263d8e(0x605)]){if('LWogw'!=='LWogw'){function _0x4c3dc8(){const _0x49ec5e=_0x263d8e;this[_0x49ec5e(0x3bd)]=0x0;}}else SceneManager[_0x263d8e(0x612)]['updateBattleProcess']();}}else{if(!this[_0x263d8e(0xb88)]){if(_0x263d8e(0x984)===_0x263d8e(0x7b0)){function _0x10b073(){const _0x59696a=_0x263d8e;if(!_0x126cfc[_0x59696a(0xb22)]())return;const _0x572c48=_0x27bb31[_0x59696a(0x260)](),_0x534891=_0x10e274['_action'],_0x4d53f0=_0x2ec849[_0x59696a(0xb88)],_0x148b5f=_0xa6712e[_0x59696a(0x526)];if(!_0x572c48||!_0x534891||!_0x4d53f0)return;if(!_0x534891[_0x59696a(0xa07)]())return;_0x148b5f[_0x59696a(0x86f)](_0x4d53f0,_0x534891[_0x59696a(0xa07)]()),_0x572c48[_0x59696a(0x728)](_0x59696a(0x243));}}else this[_0x263d8e(0x4db)]();}}},BattleManager[_0x4ca73a(0x33c)]=function(){const _0x47d5f7=_0x4ca73a;if(!this[_0x47d5f7(0x6d0)]()||this[_0x47d5f7(0x763)]()){if(_0x47d5f7(0x876)===_0x47d5f7(0x876)){this['_tpbSceneChangeCacheActor']&&(!$gameParty['battleMembers']()[_0x47d5f7(0x93d)](this[_0x47d5f7(0x571)])&&(this[_0x47d5f7(0x571)]=null));if(!this['_tpbSceneChangeCacheActor'])this[_0x47d5f7(0x829)](),this[_0x47d5f7(0x605)]=null,this[_0x47d5f7(0x700)]=![];else{if('FDLWt'!==_0x47d5f7(0x82d))this[_0x47d5f7(0x71f)]();else{function _0x5a17fd(){const _0x1ca181=_0x47d5f7;_0x5616f6[_0x1ca181(0x1ee)](_0x1ca181(0x281),_0xc0bd29,_0x1198c4);}}}}else{function _0x22a85e(){return!![];}}}},BattleManager['revertTpbCachedActor']=function(){const _0x53e0a1=_0x4ca73a;if(!$gameParty['battleMembers']()['includes'](this[_0x53e0a1(0x571)])){if(_0x53e0a1(0xb69)===_0x53e0a1(0xb69))this['_tpbSceneChangeCacheActor']=null;else{function _0x1f7fb1(){const _0x300fa0=_0x53e0a1,_0x2e5be9=_0x1d56e0[this[_0x300fa0(0x463)][_0x300fa0(0x91f)]()];if(!_0x2e5be9)return;if(!this[_0x300fa0(0xb33)](_0x2e5be9))return;const _0x501299=this['commandStyle'](),_0x4c8e4e=_0x2dc8c0[_0x300fa0(0x91c)](_0x2e5be9),_0x822aa=_0x5f4db8['battleCommandIcon'](_0x2e5be9),_0x221f31=_0x501299===_0x300fa0(0x5db)?_0x4c8e4e:'\x5cI[%1]%2'[_0x300fa0(0x26f)](_0x822aa,_0x4c8e4e);this[_0x300fa0(0x459)](_0x221f31,_0x300fa0(0x386),this[_0x300fa0(0x463)]['canGuard']());}}}if(this[_0x53e0a1(0x571)]){if('YcpcJ'!==_0x53e0a1(0x38a)){function _0x30ac88(){const _0x232a36=_0x53e0a1;if(!this[_0x232a36(0x896)]()&&this!==_0x3ffb43[_0x232a36(0xb88)]){if(this[_0x232a36(0x4f6)]())this[_0x232a36(0x4f6)]()[_0x232a36(0x4bc)]();}this[_0x232a36(0xa9d)]();return;}}else this[_0x53e0a1(0x605)]=this[_0x53e0a1(0x571)],this['_currentActor']['_tpbState']=_0x53e0a1(0x25f),this['_inputting']=!![],this[_0x53e0a1(0x571)]=null;}else this[_0x53e0a1(0x829)](),this['_currentActor']=null,this[_0x53e0a1(0x700)]=![];},VisuMZ[_0x4ca73a(0x499)]['BattleManager_isTpbMainPhase']=BattleManager[_0x4ca73a(0x5d4)],BattleManager[_0x4ca73a(0x5d4)]=function(){const _0x6b4cd4=_0x4ca73a;if(this[_0x6b4cd4(0x421)]===_0x6b4cd4(0x76c))return this[_0x6b4cd4(0x67a)]();else{if(_0x6b4cd4(0x364)!==_0x6b4cd4(0x6fb))return VisuMZ[_0x6b4cd4(0x499)]['BattleManager_isTpbMainPhase'][_0x6b4cd4(0x37c)](this);else{function _0x32bb98(){const _0x2cebd0=_0x6b4cd4;this[_0x2cebd0(0x8d2)][_0x2cebd0(0x3b4)](this['_mainSprite']);}}}},BattleManager[_0x4ca73a(0x67a)]=function(){const _0x1519a9=_0x4ca73a;return this[_0x1519a9(0xae9)]();},VisuMZ['BattleCore'][_0x4ca73a(0x23a)]=BattleManager[_0x4ca73a(0x829)],BattleManager['cancelActorInput']=function(){const _0x3abc3d=_0x4ca73a;this['isTpb']()&&this['_phase']===_0x3abc3d(0x65a)&&(this['_currentActor']=null),VisuMZ['BattleCore']['BattleManager_cancelActorInput'][_0x3abc3d(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)]['BattleManager_inputtingAction']=BattleManager[_0x4ca73a(0x792)],BattleManager[_0x4ca73a(0x792)]=function(){const _0x4d6f56=_0x4ca73a,_0x461104=this[_0x4d6f56(0x605)];if(_0x461104&&!_0x461104['inputtingAction']()){const _0x587966=_0x461104[_0x4d6f56(0x7d1)];_0x461104[_0x4d6f56(0x8d3)][_0x587966]=new Game_Action(_0x461104);}return VisuMZ['BattleCore']['BattleManager_inputtingAction'][_0x4d6f56(0x37c)](this);},SceneManager[_0x4ca73a(0xb22)]=function(){const _0x11321d=_0x4ca73a;return this['_scene']&&this[_0x11321d(0x612)][_0x11321d(0x1a5)]===Scene_Battle;},SceneManager[_0x4ca73a(0x6c6)]=function(){const _0x440329=_0x4ca73a;return Spriteset_Battle[_0x440329(0x90a)][_0x440329(0x6ab)]();},SceneManager[_0x4ca73a(0x2a6)]=function(){const _0x193bb8=_0x4ca73a;if(SceneManager[_0x193bb8(0xa1c)](Scene_Options))return!![];return![];},SceneManager[_0x4ca73a(0x63d)]=function(){const _0x28e95d=_0x4ca73a;if(SceneManager[_0x28e95d(0x980)](Scene_Options))return!![];return![];},VisuMZ[_0x4ca73a(0x499)]['Game_Temp_requestAnimation']=Game_Temp[_0x4ca73a(0x90a)][_0x4ca73a(0xad9)],Game_Temp['prototype'][_0x4ca73a(0xad9)]=function(_0x38d65c,_0x22c944,_0x224671){const _0x3e0c68=_0x4ca73a;_0x38d65c=_0x38d65c[_0x3e0c68(0x5be)]((_0x812008,_0x51a329,_0x2f3bb4)=>_0x2f3bb4['indexOf'](_0x812008)===_0x51a329),SceneManager[_0x3e0c68(0xb22)]()&&SceneManager[_0x3e0c68(0x6c6)]()&&(_0x224671=!_0x224671),VisuMZ[_0x3e0c68(0x499)][_0x3e0c68(0x408)][_0x3e0c68(0x37c)](this,_0x38d65c,_0x22c944,_0x224671),SceneManager['isSceneBattle']()&&BattleManager[_0x3e0c68(0xa38)]['processAnimationRequests']();},Game_Temp['prototype'][_0x4ca73a(0x822)]=function(_0x51271f){const _0x71b393=_0x4ca73a;this[_0x71b393(0xa7f)]=_0x51271f;},Game_Temp[_0x4ca73a(0x90a)]['getLastPluginCommandInterpreter']=function(){const _0x2101e6=_0x4ca73a;return this[_0x2101e6(0xa7f)];},Game_Temp[_0x4ca73a(0x90a)][_0x4ca73a(0x623)]=function(){const _0x5e0d57=_0x4ca73a;this[_0x5e0d57(0x502)]=undefined;},Game_Temp[_0x4ca73a(0x90a)][_0x4ca73a(0x9e5)]=function(_0x1211d6){const _0x22debb=_0x4ca73a;$gameMap&&$dataMap&&$dataMap['note']&&this[_0x22debb(0x307)]($dataMap[_0x22debb(0xaa8)]);const _0x1f61b9=$dataTroops[_0x1211d6];_0x1f61b9&&this[_0x22debb(0x307)](_0x1f61b9[_0x22debb(0x491)]);},Game_Temp[_0x4ca73a(0x90a)][_0x4ca73a(0x307)]=function(_0xf90165){const _0x2365dc=_0x4ca73a;if(!_0xf90165)return;if(_0xf90165['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){if(_0x2365dc(0x8a3)===_0x2365dc(0x275)){function _0x262204(){const _0x59a3bc=_0x2365dc,_0x7d5f37=[],_0x289073=new _0x386655(this);return _0x289073[_0x59a3bc(0x22f)](),_0x7d5f37[_0x59a3bc(0x1ee)](_0x289073),_0x7d5f37;}}else{const _0x4be16d=String(RegExp['$1']);if(_0x4be16d[_0x2365dc(0x2b2)](/DEFAULT/i))this[_0x2365dc(0x502)]=_0x2365dc(0x2f9);else{if(_0x4be16d['match'](/LIST/i)){if('RIjKA'!==_0x2365dc(0xa26)){function _0x263775(){const _0x1cde3f=_0x2365dc;if(!_0x18ea6f)return;_0x428330[_0x1cde3f(0x2b8)]?_0x103eb9[_0x1cde3f(0x90a)]['drawSkillCost'][_0x1cde3f(0x37c)](this,_0x5e3706,_0x466940,_0x2b113b,_0x5645f2,_0x151094):_0x366735['prototype'][_0x1cde3f(0x3d4)]['call'](this,_0x1e053e,_0x4cd6ab,_0x3578c9,_0x932e78);}}else this[_0x2365dc(0x502)]=_0x2365dc(0x3c0);}else{if(_0x4be16d[_0x2365dc(0x2b2)](/XP/i))this[_0x2365dc(0x502)]='xp';else{if(_0x4be16d[_0x2365dc(0x2b2)](/PORTRAIT/i)){if('etmye'===_0x2365dc(0x72c)){function _0x4a8e69(){const _0x4daf02=_0x2365dc;this[_0x4daf02(0x39b)]()?(this[_0x4daf02(0x790)][_0x4daf02(0xa54)](),this['_enemyWindow'][_0x4daf02(0x929)](),this['_actorCommandWindow'][_0x4daf02(0x9b8)]()):_0x55bb08[_0x4daf02(0x499)][_0x4daf02(0x496)]['call'](this),this[_0x4daf02(0x1da)]();}}else this[_0x2365dc(0x502)]=_0x2365dc(0x61f);}else{if(_0x4be16d[_0x2365dc(0x2b2)](/BORDER/i))this[_0x2365dc(0x502)]=_0x2365dc(0x89e);else{if(_0x4be16d[_0x2365dc(0x2b2)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(_0x2365dc(0x85a)!==_0x2365dc(0x85a)){function _0x1c9c82(){const _0x54e0b9=_0x2365dc;if(!this[_0x54e0b9(0x51b)][_0x54e0b9(0x3b9)]())return;const _0x585131=_0xeb9697[_0x54e0b9(0x499)][_0x54e0b9(0x800)][_0x54e0b9(0x1b8)],_0x27c5cc=new _0x324d42();_0x27c5cc['_duration']=_0x585131[_0x54e0b9(0xb78)],this['sortDamageSprites'](_0x27c5cc),_0x27c5cc[_0x54e0b9(0x8f1)](_0x3c3fb5,_0x2c62a2,_0x6d0033),this['addDamageSprite'](_0x27c5cc);}}else Imported[_0x2365dc(0x35b)]?this[_0x2365dc(0x502)]=_0x2365dc(0x678):this[_0x2365dc(0x502)]=_0x2365dc(0x2f9);}}}}}}}}},VisuMZ[_0x4ca73a(0x499)]['Game_System_initialize']=Game_System['prototype'][_0x4ca73a(0xa47)],Game_System['prototype']['initialize']=function(){const _0x5d64f4=_0x4ca73a;VisuMZ[_0x5d64f4(0x499)][_0x5d64f4(0x21c)][_0x5d64f4(0x37c)](this),this[_0x5d64f4(0xadf)]();},Game_System[_0x4ca73a(0x90a)]['initBattleCore']=function(){const _0x6a05ab=_0x4ca73a;this['_defeatedEnemies']=this[_0x6a05ab(0x9a0)]||[];},Game_System[_0x4ca73a(0x90a)][_0x4ca73a(0xa19)]=function(){const _0x4be790=_0x4ca73a;if(this[_0x4be790(0x9a0)]===undefined)this[_0x4be790(0xadf)]();return this[_0x4be790(0x9a0)];},Game_System[_0x4ca73a(0x90a)][_0x4ca73a(0x415)]=function(_0x2c9a27){const _0x3e9cef=_0x4ca73a;if(this[_0x3e9cef(0x9a0)]===undefined)this[_0x3e9cef(0xadf)]();if(!_0x2c9a27)return;if(this[_0x3e9cef(0x9a0)][_0x3e9cef(0x93d)](_0x2c9a27))return;this[_0x3e9cef(0x9a0)][_0x3e9cef(0x1ee)](_0x2c9a27),this[_0x3e9cef(0x9a0)][_0x3e9cef(0x574)]((_0x19f3b9,_0x3fca70)=>_0x19f3b9-_0x3fca70);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xadd)]=Game_BattlerBase['prototype']['addNewState'],Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x5a0)]=function(_0x11fdb7){const _0x5c25be=_0x4ca73a,_0x3a4be9=this[_0x5c25be(0xb34)](),_0x424def=this[_0x5c25be(0x79e)]();VisuMZ[_0x5c25be(0x499)][_0x5c25be(0xadd)]['call'](this,_0x11fdb7);this['isEnemy']()&&_0x3a4be9&&this['isDead']()&&(this[_0x5c25be(0x357)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x5c25be(0x415)](this[_0x5c25be(0x6c3)]()));if(SceneManager[_0x5c25be(0xb22)]()&&_0x424def!==this[_0x5c25be(0x79e)]()){if(this['battler']()){if(_0x5c25be(0x6fd)==='cJqbb'){function _0x267715(){const _0x5a93e6=_0x5c25be;return _0x9d5ee8[_0x5a93e6(0x499)][_0x5a93e6(0x800)][_0x5a93e6(0x327)][_0x5a93e6(0xa37)];}}else this['battler']()[_0x5c25be(0x4bc)]();}}},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x9db)]=function(){const _0x2e82b2=_0x4ca73a;return $gameSystem[_0x2e82b2(0xa19)]()[_0x2e82b2(0x93d)](this['_enemyId']);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x802)]=Game_BattlerBase['prototype'][_0x4ca73a(0x732)],Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x732)]=function(_0x33d78e){const _0x912ef6=_0x4ca73a;VisuMZ['BattleCore']['Game_BattlerBase_eraseState']['call'](this,_0x33d78e),this['isEnemy']()&&_0x33d78e===this[_0x912ef6(0x49b)]()&&this[_0x912ef6(0xb34)]()&&(this[_0x912ef6(0x357)]=![]),!this[_0x912ef6(0x432)]&&!this[_0x912ef6(0x8aa)]&&SceneManager[_0x912ef6(0xb22)]()&&this[_0x912ef6(0x1b6)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x458)]=Game_Action['prototype'][_0x4ca73a(0x1c1)],Game_Action['prototype'][_0x4ca73a(0x1c1)]=function(){const _0x4040a7=_0x4ca73a;VisuMZ['BattleCore']['Game_Action_clear']['call'](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x4040a7(0x78b)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x4040a7(0x774)]=_0x4040a7(0x2f9);},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x566)]=function(_0x46d2c1,_0x3b3fb0){const _0x4f8afe=_0x4ca73a;return VisuMZ[_0x4f8afe(0x499)][_0x4f8afe(0x800)][_0x4f8afe(0x1b8)][_0x4f8afe(0xb05)][_0x4f8afe(0x37c)](this,_0x46d2c1,_0x3b3fb0);},Game_Action[_0x4ca73a(0x90a)]['applyVariance']=function(_0x396781,_0x19e14b){const _0x2e60a2=_0x4ca73a;return VisuMZ[_0x2e60a2(0x499)][_0x2e60a2(0x800)]['Damage'][_0x2e60a2(0xaab)][_0x2e60a2(0x37c)](this,_0x396781,_0x19e14b);},Game_Action[_0x4ca73a(0x90a)]['applyGuard']=function(_0x1bf57d,_0x24070c){const _0x469512=_0x4ca73a;return VisuMZ[_0x469512(0x499)]['Settings']['Damage'][_0x469512(0x8ca)][_0x469512(0x37c)](this,_0x1bf57d,_0x24070c);},VisuMZ[_0x4ca73a(0x499)]['Game_Action_itemHit']=Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x2bb)],Game_Action['prototype'][_0x4ca73a(0x2bb)]=function(_0x58c672){const _0x3fcdad=_0x4ca73a,_0x124655=this[_0x3fcdad(0xa07)]()[_0x3fcdad(0xaa8)];if(_0x124655['match'](/<ALWAYS HIT>/i)){if('ipMwq'!==_0x3fcdad(0x40a)){function _0x47f5cb(){const _0x4e49e4=_0x3fcdad;if(this[_0x4e49e4(0x4f6)]())this[_0x4e49e4(0x4f6)]()[_0x4e49e4(0x4bc)]();}}else return 0x1;}else{if(_0x124655[_0x3fcdad(0x2b2)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x4f9be5=VisuMZ[_0x3fcdad(0x499)][_0x3fcdad(0x9b9)][_0x3fcdad(0x37c)](this,_0x58c672);return _0x4f9be5=this['_multipliers']['hitRate']*_0x4f9be5+this[_0x3fcdad(0x78b)][_0x3fcdad(0x529)],_0x4f9be5;}}},Game_Action[_0x4ca73a(0x90a)]['itemCri']=function(_0x50f988){const _0x11f7cc=_0x4ca73a;if(!this['item']()[_0x11f7cc(0x2e7)][_0x11f7cc(0x7d0)])return 0x0;let _0x1b7c1d=VisuMZ['BattleCore'][_0x11f7cc(0x800)][_0x11f7cc(0x1b8)][_0x11f7cc(0xa4f)]['call'](this,_0x50f988);return _0x1b7c1d=this[_0x11f7cc(0x78b)][_0x11f7cc(0x2e5)]*_0x1b7c1d+this[_0x11f7cc(0x78b)][_0x11f7cc(0x9d6)],_0x1b7c1d;},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x5cf)]=function(_0x2abf72){const _0xad4199=_0x4ca73a;return _0x2abf72=VisuMZ[_0xad4199(0x499)][_0xad4199(0x800)][_0xad4199(0x1b8)][_0xad4199(0xa76)][_0xad4199(0x37c)](this,_0x2abf72),_0x2abf72=this['_multipliers'][_0xad4199(0x651)]*_0x2abf72+this[_0xad4199(0x78b)][_0xad4199(0x264)],_0x2abf72;},VisuMZ['BattleCore'][_0x4ca73a(0x388)]=Game_Action['prototype'][_0x4ca73a(0x533)],Game_Action[_0x4ca73a(0x90a)]['evalDamageFormula']=function(_0x86b0a5){const _0x3730fb=_0x4ca73a;if(this['_customDamageFormula']!==_0x3730fb(0x2f9))return this['customDamageFormula'](_0x86b0a5);else return DataManager[_0x3730fb(0x94c)](this[_0x3730fb(0xa07)]())===_0x3730fb(0x776)?VisuMZ[_0x3730fb(0x499)][_0x3730fb(0x388)]['call'](this,_0x86b0a5):this[_0x3730fb(0x5e7)](_0x86b0a5);},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x597)]=function(_0x2d196c){const _0x381034=_0x4ca73a;this[_0x381034(0x774)]=_0x2d196c;},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0xa4d)]=function(_0x27ff9b){const _0xdbdc2=_0x4ca73a,_0x36a5d1=this[_0xdbdc2(0xa07)](),_0x5817cf=_0x36a5d1['damage']['formula'];_0x36a5d1[_0xdbdc2(0x2e7)][_0xdbdc2(0x313)]=this['_customDamageFormula'];let _0x184c77=VisuMZ[_0xdbdc2(0x499)]['Game_Action_evalDamageFormula'][_0xdbdc2(0x37c)](this,_0x27ff9b);return _0x36a5d1[_0xdbdc2(0x2e7)][_0xdbdc2(0x313)]=_0x5817cf,_0x184c77;},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x494)]=function(){const _0x40a703=_0x4ca73a;if(this[_0x40a703(0xa07)]()[_0x40a703(0xaa8)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x40a703(0x28d)===_0x40a703(0x578)){function _0x31b9a8(){const _0x2bf077=_0x40a703;_0x4a984d[_0x2bf077(0xaed)]['x']=this[_0x2bf077(0x4d2)](),_0x566e76[_0x2bf077(0xaed)]['y']=this['mainSpriteScaleY']();}}else{const _0x248d06=String(RegExp['$1'])['toUpperCase']()[_0x40a703(0x7d2)]();return _0x248d06;}}return'MANUAL';},Game_Action['prototype'][_0x4ca73a(0x5e7)]=function(_0xb3930a){const _0x2670e8=_0x4ca73a,_0x3c8eb1=DataManager[_0x2670e8(0x94c)](this['item']()),_0x3421aa=VisuMZ[_0x2670e8(0x638)][_0x3c8eb1];try{if(_0x2670e8(0x37b)==='aapqx'){function _0x52f57f(){const _0x39072d=_0x2670e8;_0x545922[_0x39072d(0xad1)](_0xd45167['SwitchMissEvade'],![]);}}else return _0x3421aa[_0x2670e8(0x369)]['call'](this,_0xb3930a);}catch(_0x30f1ec){if(_0x2670e8(0x9f0)!==_0x2670e8(0x3db)){if($gameTemp['isPlaytest']())console[_0x2670e8(0x519)](_0x30f1ec);return VisuMZ['BattleCore'][_0x2670e8(0x388)][_0x2670e8(0x37c)](this);}else{function _0x1344cd(){const _0x19f522=_0x2670e8;this[_0x19f522(0x90b)]();}}}},Game_Action['prototype'][_0x4ca73a(0x76a)]=function(_0x13ebe7,_0x26a696){const _0x4dc340=_0x4ca73a;if(this['isCertainHit']())return _0x26a696;const _0x385bbc=this['subject'](),_0x273848=_0x13ebe7;let _0x112bf6=[],_0x29ef89=[];_0x112bf6[_0x4dc340(0x1ee)](this[_0x4dc340(0x4aa)][_0x4dc340(0x8b3)],this[_0x4dc340(0x4aa)][_0x4dc340(0x756)]),_0x29ef89['push'](this[_0x4dc340(0x4aa)][_0x4dc340(0x20c)],this[_0x4dc340(0x4aa)][_0x4dc340(0xb4f)]);const _0x35c92d=this[_0x4dc340(0x6f6)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x34ee76=this[_0x4dc340(0x6f6)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x3d4743=this[_0x4dc340(0x6f6)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x13abae=this[_0x4dc340(0x6f6)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x112bf6=_0x112bf6[_0x4dc340(0x4b0)](_0x273848[_0x4dc340(0x909)]()[_0x4dc340(0x8f9)](_0x3177d5=>_0x3177d5&&_0x3177d5[_0x4dc340(0xaa8)]['match'](_0x35c92d)?Number(RegExp['$1']):0x0)),_0x29ef89=_0x29ef89[_0x4dc340(0x4b0)](_0x273848[_0x4dc340(0x909)]()[_0x4dc340(0x8f9)](_0x1de8c2=>_0x1de8c2&&_0x1de8c2['note']['match'](_0x34ee76)?Number(RegExp['$1'])/0x64:0x0)),_0x112bf6=_0x112bf6[_0x4dc340(0x4b0)](_0x385bbc[_0x4dc340(0x909)]()[_0x4dc340(0x8f9)](_0x2b579f=>_0x2b579f&&_0x2b579f[_0x4dc340(0xaa8)][_0x4dc340(0x2b2)](_0x3d4743)?Number(RegExp['$1']):0x0)),_0x29ef89=_0x29ef89[_0x4dc340(0x4b0)](_0x385bbc[_0x4dc340(0x909)]()[_0x4dc340(0x8f9)](_0x3a90c9=>_0x3a90c9&&_0x3a90c9[_0x4dc340(0xaa8)][_0x4dc340(0x2b2)](_0x13abae)?Number(RegExp['$1'])/0x64:0x0));if(this[_0x4dc340(0xa07)]()[_0x4dc340(0xaa8)][_0x4dc340(0x2b2)](_0x3d4743)){if(_0x4dc340(0xa17)!==_0x4dc340(0xa17)){function _0x4c4c23(){const _0x56612c=_0x4dc340;_0x372d2c[_0xe37d4a][_0x56612c(0x37c)](this,_0x478743);}}else _0x112bf6['push'](Number(RegExp['$1']));}return this['item']()[_0x4dc340(0xaa8)][_0x4dc340(0x2b2)](_0x13abae)&&_0x29ef89[_0x4dc340(0x1ee)](Number(RegExp['$1'])),_0x26a696=_0x112bf6[_0x4dc340(0x93c)]((_0x3222bd,_0x5d9bac)=>_0x3222bd-_0x5d9bac,_0x26a696),_0x26a696>0x0&&(_0x26a696=_0x29ef89[_0x4dc340(0x93c)]((_0x1373dd,_0x544868)=>_0x1373dd*(0x1-_0x544868),_0x26a696)),_0x26a696;},VisuMZ['BattleCore'][_0x4ca73a(0x6aa)]=Game_Action[_0x4ca73a(0x90a)]['executeDamage'],Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x891)]=function(_0xb44707,_0x584061){const _0x38384c=_0x4ca73a;_0x584061=_0x584061*this['_multipliers']['damageRate'],_0x584061+=this[_0x38384c(0x78b)]['damageFlat']*(_0x584061>=0x0?0x1:-0x1),_0x584061=this[_0x38384c(0x997)](_0x38384c(0x887),_0xb44707,_0x584061,![]),_0x584061=this[_0x38384c(0x517)](_0x584061),_0x584061=Math[_0x38384c(0x555)](_0x584061),this[_0x38384c(0x6df)]=_0x584061,this['_totalValue']=this[_0x38384c(0xab0)]||0x0,this['_totalValue']+=_0x584061,VisuMZ[_0x38384c(0x499)]['Game_Action_executeDamage'][_0x38384c(0x37c)](this,_0xb44707,_0x584061),this[_0x38384c(0x997)](_0x38384c(0x5b8),_0xb44707,_0x584061,!![]);},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x517)]=function(_0x37aa03){const _0x2d2399=_0x4ca73a;if(this[_0x2d2399(0xa73)]())return _0x37aa03;return _0x37aa03=this['applySoftDamageCap'](_0x37aa03),_0x37aa03=this[_0x2d2399(0x80f)](_0x37aa03),_0x37aa03;},Game_Action['prototype'][_0x4ca73a(0xa73)]=function(){const _0x58951b=_0x4ca73a,_0x7ccb58=/<BYPASS DAMAGE CAP>/i;if(this[_0x58951b(0xa07)]()['note'][_0x58951b(0x2b2)](_0x7ccb58))return!![];if(this['subject']()[_0x58951b(0x909)]()[_0x58951b(0xac3)](_0x3f988e=>_0x3f988e&&_0x3f988e[_0x58951b(0xaa8)]['match'](_0x7ccb58)))return!![];return!VisuMZ[_0x58951b(0x499)][_0x58951b(0x800)][_0x58951b(0x1b8)][_0x58951b(0xac9)];},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x261)]=function(_0x43ce1e){const _0x9b5e15=_0x4ca73a;if(!VisuMZ['BattleCore'][_0x9b5e15(0x800)]['Damage'][_0x9b5e15(0x8e8)])return _0x43ce1e;const _0x5ea4e6=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x9b5e15(0xa07)]()['note'][_0x9b5e15(0x2b2)](_0x5ea4e6))return!![];if(this['subject']()[_0x9b5e15(0x909)]()[_0x9b5e15(0xac3)](_0x57acda=>_0x57acda&&_0x57acda['note'][_0x9b5e15(0x2b2)](_0x5ea4e6)))return!![];const _0x414758=_0x43ce1e<0x0?-0x1:0x1;_0x43ce1e=Math[_0x9b5e15(0x2b3)](_0x43ce1e);let _0x10ebef=this[_0x9b5e15(0x9d8)]()[_0x9b5e15(0x23f)]();this[_0x9b5e15(0xa07)]()[_0x9b5e15(0xaa8)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x10ebef+=Number(RegExp['$1'])/0x64);_0x10ebef=_0x10ebef[_0x9b5e15(0x561)](0.01,0x1);const _0x15ee04=this['getHardDamageCap'](),_0x17b442=_0x10ebef*_0x15ee04;if(_0x43ce1e>_0x17b442&&_0x15ee04>_0x17b442){_0x43ce1e-=_0x17b442;const _0x2ec413=VisuMZ[_0x9b5e15(0x499)][_0x9b5e15(0x800)][_0x9b5e15(0x1b8)]['DefaultSoftScaler'],_0x46098c=Math[_0x9b5e15(0x826)](0x1-_0x43ce1e/((_0x15ee04-_0x17b442)*_0x2ec413+_0x43ce1e),0.01);_0x43ce1e*=_0x46098c,_0x43ce1e+=_0x17b442;}return _0x43ce1e*_0x414758;},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x970)]=function(){const _0x3247bf=_0x4ca73a;if(this[_0x3247bf(0xa07)]()[_0x3247bf(0xaa8)][_0x3247bf(0x2b2)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x3247bf(0x45b)!==_0x3247bf(0x45b)){function _0xd3f977(){const _0x45eb20=_0x3247bf;_0x574b4f[_0x45eb20(0x725)]=![],this[_0x45eb20(0x719)]();}}else return Number(RegExp['$1']);}else return this[_0x3247bf(0x9d8)]()['hardDamageCap']();},Game_Action['prototype'][_0x4ca73a(0x80f)]=function(_0x510162){const _0x267826=_0x4ca73a;let _0x482e89=this[_0x267826(0x970)]();return _0x510162[_0x267826(0x561)](-_0x482e89,_0x482e89);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x40c)]=Game_Action[_0x4ca73a(0x90a)]['apply'],Game_Action[_0x4ca73a(0x90a)]['apply']=function(_0x5df5a9){const _0x1ec240=_0x4ca73a;this[_0x1ec240(0x997)]('PreApply%1JS',_0x5df5a9,0x0,!![]),VisuMZ[_0x1ec240(0x499)][_0x1ec240(0x40c)]['call'](this,_0x5df5a9),this[_0x1ec240(0x997)](_0x1ec240(0x44b),_0x5df5a9,this[_0x1ec240(0x6df)]||0x0,!![]),this[_0x1ec240(0x737)](_0x5df5a9);},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x997)]=function(_0x1e756c,_0x5a89a0,_0x9d75e2,_0x2ecedf){const _0x2498a6=_0x4ca73a;if(this[_0x2498a6(0x8aa)]||this['_tempActor'])return;_0x9d75e2=_0x9d75e2||0x0;const _0x137037=_0x9d75e2,_0x303851=VisuMZ[_0x2498a6(0x499)][_0x2498a6(0x800)]['Mechanics'],_0x2cf426=_0x1e756c[_0x2498a6(0x26f)]('');if(_0x303851[_0x2cf426]){_0x9d75e2=_0x303851[_0x2cf426][_0x2498a6(0x37c)](this,_0x9d75e2,_0x5a89a0);if(_0x2ecedf)_0x9d75e2=_0x137037;}let _0x1bac14=VisuMZ[_0x2498a6(0x499)][_0x2498a6(0xa7e)](this[_0x2498a6(0xa07)](),_0x1e756c[_0x2498a6(0x26f)](''));if(VisuMZ[_0x2498a6(0x499)]['JS'][_0x1bac14]){_0x9d75e2=VisuMZ['BattleCore']['JS'][_0x1bac14][_0x2498a6(0x37c)](this,this[_0x2498a6(0x9d8)](),_0x5a89a0,this[_0x2498a6(0xa07)](),_0x9d75e2);if(_0x2ecedf)_0x9d75e2=_0x137037;}for(const _0x410eac of this[_0x2498a6(0x9d8)]()[_0x2498a6(0x909)]()){if(!_0x410eac)continue;_0x1bac14=VisuMZ[_0x2498a6(0x499)]['createKeyJS'](_0x410eac,_0x1e756c[_0x2498a6(0x26f)]('AsUser'));if(VisuMZ[_0x2498a6(0x499)]['JS'][_0x1bac14]){if(_0x2498a6(0x1fe)===_0x2498a6(0x1fe)){_0x9d75e2=VisuMZ['BattleCore']['JS'][_0x1bac14][_0x2498a6(0x37c)](this,this['subject'](),_0x5a89a0,_0x410eac,_0x9d75e2);if(_0x2ecedf)_0x9d75e2=_0x137037;}else{function _0x192078(){const _0x77f4f2=_0x2498a6,_0x1e12aa=_0x23d7c0(_0xc1b220['$1']);return[_0x1cfc7b[_0x77f4f2(0x6c7)]()[_0x1e12aa]];}}}}for(const _0x3cd5ce of _0x5a89a0[_0x2498a6(0x909)]()){if(!_0x3cd5ce)continue;_0x1bac14=VisuMZ[_0x2498a6(0x499)][_0x2498a6(0xa7e)](_0x3cd5ce,_0x1e756c[_0x2498a6(0x26f)](_0x2498a6(0x542)));if(VisuMZ[_0x2498a6(0x499)]['JS'][_0x1bac14]){if(_0x2498a6(0xa57)!=='UuHJw'){_0x9d75e2=VisuMZ[_0x2498a6(0x499)]['JS'][_0x1bac14][_0x2498a6(0x37c)](this,this['subject'](),_0x5a89a0,_0x3cd5ce,_0x9d75e2);if(_0x2ecedf)_0x9d75e2=_0x137037;}else{function _0x46740b(){const _0x555709=_0x2498a6;_0x45fdd3[_0x555709(0x499)][_0x555709(0x422)][_0x555709(0x37c)](this),this['item']()[_0x555709(0xaa8)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x31b659[_0x555709(0x5c8)]=[]),_0x3a098a[_0x555709(0xae7)](this['item']())&&(_0x9379a1[_0x555709(0x5c8)]=[]);}}}}return _0x9d75e2;},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0xa9b)]=function(_0x2c4404){const _0x417e79=_0x4ca73a,_0x5acfc9=this[_0x417e79(0xab0)]||0x0,_0x28e979=VisuMZ[_0x417e79(0x499)][_0x417e79(0x800)][_0x417e79(0x1a9)],_0x30900d=_0x2c4404[_0x417e79(0x26f)]('');_0x28e979[_0x30900d]&&_0x28e979[_0x30900d][_0x417e79(0x37c)](this,_0x5acfc9);let _0x3f3787=VisuMZ['BattleCore'][_0x417e79(0xa7e)](this[_0x417e79(0xa07)](),_0x2c4404);VisuMZ['BattleCore']['JS'][_0x3f3787]&&VisuMZ[_0x417e79(0x499)]['JS'][_0x3f3787]['call'](this,this[_0x417e79(0x9d8)](),this[_0x417e79(0x9d8)](),this['item'](),_0x5acfc9);for(const _0x39d7b4 of this[_0x417e79(0x9d8)]()['traitObjects']()){if(!_0x39d7b4)continue;_0x3f3787=VisuMZ[_0x417e79(0x499)][_0x417e79(0xa7e)](_0x39d7b4,_0x2c4404);if(VisuMZ[_0x417e79(0x499)]['JS'][_0x3f3787]){if(_0x417e79(0x47d)!==_0x417e79(0x743))VisuMZ[_0x417e79(0x499)]['JS'][_0x3f3787]['call'](this,this[_0x417e79(0x9d8)](),this['subject'](),_0x39d7b4,_0x5acfc9);else{function _0x174508(){const _0x214e8a=_0x417e79;return this[_0x214e8a(0x40e)]>0x0;}}}}},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x253)]=function(){const _0x19617e=_0x4ca73a;return VisuMZ[_0x19617e(0x499)][_0x19617e(0x800)]['Mechanics']['CalcActionSpeedJS'][_0x19617e(0x37c)](this);},Game_Action['prototype']['allowRandomSpeed']=function(){const _0x3662d9=_0x4ca73a;return VisuMZ[_0x3662d9(0x499)][_0x3662d9(0x800)][_0x3662d9(0x1a9)]['AllowRandomSpeed'];},Game_Action[_0x4ca73a(0x90a)]['isCustomBattleScope']=function(){const _0x2d7ff5=_0x4ca73a;return this[_0x2d7ff5(0xa07)]()['note'][_0x2d7ff5(0x2b2)](/<JS TARGETS>/i);},Game_Action['prototype'][_0x4ca73a(0xb8f)]=function(){const _0x5c2c52=_0x4ca73a;if(!this[_0x5c2c52(0x32c)]&&this[_0x5c2c52(0x9d8)]()[_0x5c2c52(0x1db)]())return![];if(this[_0x5c2c52(0x84f)]())return!![];return typeof this[_0x5c2c52(0xa07)]()['scope']===_0x5c2c52(0x79d);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x917)]=Game_Action['prototype'][_0x4ca73a(0x4b8)],Game_Action['prototype'][_0x4ca73a(0x4b8)]=function(){const _0x148a78=_0x4ca73a;if(this[_0x148a78(0xb8f)]()&&!this[_0x148a78(0x84f)]())return this['isForOpponentBattleCore']();else{if(_0x148a78(0x70b)!==_0x148a78(0x70b)){function _0x56386c(){const _0x45a0e4=_0x148a78;if(_0x440b62[_0x45a0e4(0x65d)]&&!_0x575e6e[_0x45a0e4(0x840)])return this[_0x45a0e4(0x2e4)]();else{return _0x21e11e['BattleCore'][_0x45a0e4(0x1c6)][_0x45a0e4(0x37c)](this);;}}}else return VisuMZ['BattleCore'][_0x148a78(0x917)][_0x148a78(0x37c)](this);}},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x562)]=function(){const _0x573856=_0x4ca73a,_0x91d8b6=this[_0x573856(0xa07)]()[_0x573856(0x97b)];return _0x91d8b6['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x715)]=Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x9fd)],Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x9fd)]=function(){const _0x2717ff=_0x4ca73a;return this[_0x2717ff(0xb8f)]()&&!this[_0x2717ff(0x84f)]()?this[_0x2717ff(0x708)]():VisuMZ[_0x2717ff(0x499)]['Game_Action_isForFriend'][_0x2717ff(0x37c)](this);},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x708)]=function(){const _0x1959f4=_0x4ca73a,_0x584257=this['item']()[_0x1959f4(0x97b)];return _0x584257['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ['BattleCore'][_0x4ca73a(0x988)]=Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x3e4)],Game_Action[_0x4ca73a(0x90a)]['isForRandom']=function(){const _0x539942=_0x4ca73a;return this[_0x539942(0xb8f)]()&&!this[_0x539942(0x84f)]()?this['isForRandomBattleCore']():VisuMZ[_0x539942(0x499)][_0x539942(0x988)][_0x539942(0x37c)](this);},Game_Action['prototype'][_0x4ca73a(0x72d)]=function(){const _0x4acc4b=_0x4ca73a,_0x5e089c=this[_0x4acc4b(0xa07)]()[_0x4acc4b(0x97b)];return _0x5e089c[_0x4acc4b(0x2b2)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x1e1)]=Game_Action['prototype'][_0x4ca73a(0x7f6)],Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x7f6)]=function(){const _0x240544=_0x4ca73a;if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']())return this['needsSelectionBattleCore']();else{if(_0x240544(0x847)===_0x240544(0x4da)){function _0xc494ce(){this['_damageContainer']['x']=this['x'],this['_damageContainer']['y']=this['y'];}}else return VisuMZ[_0x240544(0x499)][_0x240544(0x1e1)][_0x240544(0x37c)](this);}},Game_Action[_0x4ca73a(0x90a)]['needsSelectionBattleCore']=function(){const _0xfa56fb=_0x4ca73a,_0x57e000=this['item']()[_0xfa56fb(0x97b)];if(_0x57e000['match'](/RANDOM/i))return![];if(_0x57e000['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x57e000[_0xfa56fb(0x2b2)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0xfa56fb(0x499)][_0xfa56fb(0x1e1)][_0xfa56fb(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x5c3)]=Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x8ab)],Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x8ab)]=function(){const _0x151086=_0x4ca73a;let _0x3bfa6a=[];if(this[_0x151086(0xb8f)]()){if('JvCrn'==='WszLY'){function _0x1d653f(){const _0x1729c1=_0x151086,_0x5b20b3=this[_0x1729c1(0x97a)](),_0x234785=_0x5b20b3[0x0]?_0x5b20b3[0x0][_0x1729c1(0x872)]:0x0;return _0x5e0238[_0x1729c1(0x7c7)][_0x234785];}}else _0x3bfa6a=this['makeTargetsBattleCore']();}else{if('TgKlU'===_0x151086(0x33f)){function _0x50c867(){return _0x196ced(_0x2f631f['$2']);}}else _0x3bfa6a=VisuMZ['BattleCore']['Game_Action_makeTargets'][_0x151086(0x37c)](this);}return _0x3bfa6a=this[_0x151086(0x256)](_0x3bfa6a),_0x3bfa6a;},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x488)]=function(){const _0x43013f=_0x4ca73a;let _0x49cb6e=[];const _0x113074=String(this[_0x43013f(0xa07)]()[_0x43013f(0x97b)]),_0x3cadaa=VisuMZ[_0x43013f(0x499)][_0x43013f(0xa7e)](this[_0x43013f(0xa07)](),'Targets');if(VisuMZ[_0x43013f(0x499)]['JS'][_0x3cadaa]){_0x49cb6e=VisuMZ['BattleCore'][_0x43013f(0x5c3)][_0x43013f(0x37c)](this);const _0x30c92e=VisuMZ['BattleCore'][_0x43013f(0xa7e)](this[_0x43013f(0xa07)](),'Targets');return _0x49cb6e=VisuMZ[_0x43013f(0x499)]['JS'][_0x30c92e][_0x43013f(0x37c)](this,this[_0x43013f(0x9d8)](),_0x49cb6e),this[_0x43013f(0x3c5)](_0x49cb6e);}if(_0x113074['match'](/(\d+) RANDOM ANY/i)){let _0x21e5e7=Number(RegExp['$1']);while(_0x21e5e7--){const _0x5d46ea=Math['randomInt'](0x2)===0x0?this[_0x43013f(0x99c)]():this[_0x43013f(0x512)]();_0x49cb6e[_0x43013f(0x1ee)](_0x5d46ea[_0x43013f(0x7ee)]());}return this[_0x43013f(0x3c5)](_0x49cb6e);}if(_0x113074['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x272e69=Number(RegExp['$1']);while(_0x272e69--){if(_0x43013f(0x5aa)==='JDreN'){function _0x450164(){const _0x3219f0=_0x43013f;this[_0x3219f0(0x404)]();}}else _0x49cb6e[_0x43013f(0x1ee)](this[_0x43013f(0x99c)]()['trueRandomTarget']());}return this[_0x43013f(0x3c5)](_0x49cb6e);}if(_0x113074['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x43013f(0x506)===_0x43013f(0x1ad)){function _0xc10df0(){const _0x1e0a3d=_0x43013f;_0x40b4f0=['thrust',_0x1e0a3d(0xb65),'missile'][_0x51a679['type']]||_0x1e0a3d(0xb65);}}else{let _0x31df34=Number(RegExp['$1']);while(_0x31df34--){if(_0x43013f(0x819)!==_0x43013f(0x819)){function _0x1cda78(){const _0x34c291=_0x43013f;this[_0x34c291(0x526)][_0x34c291(0x1ee)]('addText',_0x172926[_0x34c291(0x39d)]['format'](_0x2dd098[_0x34c291(0x491)]())),this['_logWindow'][_0x34c291(0x1ee)](_0x34c291(0x591));}}else _0x49cb6e[_0x43013f(0x1ee)](this[_0x43013f(0x512)]()['trueRandomTarget']());}return this[_0x43013f(0x3c5)](_0x49cb6e);}}if(_0x113074['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x43013f(0x9c3)!==_0x43013f(0x9c3)){function _0x18688a(){const _0x23942f=_0x43013f;this[_0x23942f(0xa53)]=_0x119c27,this[_0x23942f(0x207)]&&(this[_0x23942f(0x2ed)]=0x0,this[_0x23942f(0xa53)]=0x0);}}else return _0x49cb6e[_0x43013f(0x1ee)](...this[_0x43013f(0x512)]()[_0x43013f(0x1d4)]()[_0x43013f(0x5be)](_0x18590e=>_0x18590e!==this['subject']())),this[_0x43013f(0x3c5)](_0x49cb6e);}return VisuMZ[_0x43013f(0x499)]['Game_Action_makeTargets'][_0x43013f(0x37c)](this);},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x2c2)]=function(_0x51bfd8){const _0x4529df=_0x4ca73a,_0x403e8f=[];for(let _0x5c0bf7=0x0;_0x5c0bf7<this['numTargets']();_0x5c0bf7++){_0x403e8f[_0x4529df(0x1ee)](_0x51bfd8[_0x4529df(0x7ee)]());}return _0x403e8f;},Game_Action[_0x4ca73a(0x90a)]['applyTargetFilters']=function(_0x3cfe5b){const _0x563978=_0x4ca73a;if(!this[_0x563978(0xa07)]())return _0x3cfe5b;const _0x139f4f=this[_0x563978(0xa07)]()['note'];return _0x139f4f[_0x563978(0x2b2)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x3cfe5b['remove'](this[_0x563978(0x9d8)]()),_0x3cfe5b;},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x2d5)]=Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x594)],Game_Action['prototype'][_0x4ca73a(0x594)]=function(_0x6eca3,_0x2b50a8){const _0x38ec9f=_0x4ca73a,_0x295ddd=_0x6eca3[_0x38ec9f(0x625)]();this['subject']()[_0x38ec9f(0x250)]()[_0x38ec9f(0x93d)](_0x6eca3[_0x38ec9f(0x49b)]())&&_0x6eca3[_0x38ec9f(0x381)](![]),VisuMZ['BattleCore'][_0x38ec9f(0x2d5)][_0x38ec9f(0x37c)](this,_0x6eca3,_0x2b50a8),_0x6eca3[_0x38ec9f(0x381)](_0x295ddd);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x60f)]=Game_Action[_0x4ca73a(0x90a)]['itemEffectAddNormalState'],Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x4fc)]=function(_0x10fdaf,_0x2dba93){const _0x5a90f6=_0x4ca73a,_0x5839e5=_0x10fdaf[_0x5a90f6(0x625)]();_0x2dba93[_0x5a90f6(0x714)]===_0x10fdaf['deathStateId']()&&_0x10fdaf['setImmortal'](![]),VisuMZ[_0x5a90f6(0x499)][_0x5a90f6(0x60f)]['call'](this,_0x10fdaf,_0x2dba93),_0x10fdaf[_0x5a90f6(0x381)](_0x5839e5);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x9ac)]=Game_Action['prototype'][_0x4ca73a(0x748)],Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x748)]=function(){const _0x36a3f3=_0x4ca73a;VisuMZ[_0x36a3f3(0x499)][_0x36a3f3(0x9ac)][_0x36a3f3(0x37c)](this),this[_0x36a3f3(0x535)](),this['resetResultSwitches']();},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x535)]=function(){const _0x387fb5=_0x4ca73a;if(!SceneManager[_0x387fb5(0xb22)]())return;const _0x5a7d8a=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x36e0d8=this[_0x387fb5(0xa07)]()[_0x387fb5(0xaa8)][_0x387fb5(0x2b2)](_0x5a7d8a);if(_0x36e0d8){if(_0x387fb5(0x8f5)===_0x387fb5(0x7d5)){function _0x226857(){const _0x513620=_0x387fb5;if(!this['_battler'])return![];if(this['_battler'][_0x513620(0x4bb)]())return!![];const _0x2ad2b5=this['_battler'][_0x513620(0xa68)]()['note'];if(_0x2ad2b5[_0x513620(0x2b2)](/<SHOW HP GAUGE>/i))return!![];if(_0x2ad2b5[_0x513620(0x2b2)](/<HIDE HP GAUGE>/i))return![];const _0x4dc520=_0x3a07ce[_0x513620(0x499)][_0x513620(0x800)][_0x513620(0xb24)];if(_0x4dc520[_0x513620(0x6c0)]){if(_0x4dc520[_0x513620(0xb48)]&&_0x500061[_0x513620(0x97f)]())return!![];if(this[_0x513620(0x51b)][_0x513620(0x357)])return![];return this[_0x513620(0x51b)][_0x513620(0x9db)]();}return!![];}}else for(const _0x3a5a2c of _0x36e0d8){if(!_0x3a5a2c)continue;_0x3a5a2c[_0x387fb5(0x2b2)](_0x5a7d8a);const _0x2c6410=String(RegExp['$1'])[_0x387fb5(0x2fb)](',')[_0x387fb5(0x8f9)](_0x5eb618=>String(_0x5eb618)[_0x387fb5(0x7d2)]()),_0x3b24cd=_0x2c6410['map'](_0x316a38=>DataManager['getCommonEventIdWithName'](_0x316a38));for(const _0x18ffff of _0x3b24cd){const _0x181fc2=$dataCommonEvents[_0x18ffff];_0x181fc2&&$gameTemp[_0x387fb5(0x3d5)](_0x18ffff);}}}},DataManager['getCommonEventIdWithName']=function(_0x2c09e2){const _0x5a6f43=_0x4ca73a;_0x2c09e2=_0x2c09e2['toUpperCase']()['trim'](),this[_0x5a6f43(0x3fa)]=this[_0x5a6f43(0x3fa)]||{};if(this[_0x5a6f43(0x3fa)][_0x2c09e2])return this[_0x5a6f43(0x3fa)][_0x2c09e2];for(const _0x3d6516 of $dataCommonEvents){if(_0x5a6f43(0x8f7)===_0x5a6f43(0x3f9)){function _0x240821(){const _0x5f1fec=_0x5a6f43;this[_0x5f1fec(0x522)](_0x5f55c2,_0x53b409,_0x511e13);}}else{if(!_0x3d6516)continue;let _0x456507=_0x3d6516[_0x5a6f43(0x491)];_0x456507=_0x456507[_0x5a6f43(0x301)](/\x1I\[(\d+)\]/gi,''),_0x456507=_0x456507[_0x5a6f43(0x301)](/\\I\[(\d+)\]/gi,''),this[_0x5a6f43(0x3fa)][_0x456507[_0x5a6f43(0x941)]()['trim']()]=_0x3d6516['id'];}}return this[_0x5a6f43(0x3fa)][_0x2c09e2]||0x0;},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x42d)]=function(){const _0x26b27d=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;const _0x2c26db=VisuMZ[_0x26b27d(0x499)]['Settings'][_0x26b27d(0x1a9)];_0x2c26db[_0x26b27d(0xb67)]&&$gameSwitches['setValue'](_0x2c26db[_0x26b27d(0xb67)],![]),_0x2c26db['SwitchMissEvade']&&$gameSwitches['setValue'](_0x2c26db[_0x26b27d(0x492)],![]),_0x2c26db[_0x26b27d(0x6a5)]&&$gameVariables[_0x26b27d(0xad1)](_0x2c26db[_0x26b27d(0x6a5)],0x0),_0x2c26db[_0x26b27d(0x7c1)]&&$gameVariables['setValue'](_0x2c26db[_0x26b27d(0x7c1)],0x0);},Game_Action[_0x4ca73a(0x90a)][_0x4ca73a(0x737)]=function(_0x31e27e){const _0xd532d0=_0x4ca73a;if(!SceneManager['isSceneBattle']())return;if(!_0x31e27e)return;const _0x335535=_0x31e27e[_0xd532d0(0xa69)](),_0x96a326=VisuMZ[_0xd532d0(0x499)][_0xd532d0(0x800)]['Mechanics'];_0x96a326[_0xd532d0(0xb67)]&&_0x335535[_0xd532d0(0x7d0)]&&$gameSwitches[_0xd532d0(0xad1)](_0x96a326[_0xd532d0(0xb67)],!![]);_0x96a326[_0xd532d0(0x492)]&&(_0x335535[_0xd532d0(0x581)]||_0x335535[_0xd532d0(0x2e0)])&&$gameSwitches[_0xd532d0(0xad1)](_0x96a326['SwitchMissEvade'],!![]);if(_0x96a326[_0xd532d0(0x6a5)]){let _0x322aaf=$gameVariables[_0xd532d0(0x6e0)](_0x96a326[_0xd532d0(0x6a5)]);if(_0x335535['hpDamage']>0x0){if(_0xd532d0(0xa04)!==_0xd532d0(0xa04)){function _0x37fa8e(){const _0x5b9517=_0xd532d0;this[_0x5b9517(0x1ee)](_0x5b9517(0x4ad)),this[_0x5b9517(0x1ee)](_0x5b9517(0x2d9)),this[_0x5b9517(0x1ee)](_0x5b9517(0x807),_0x323868[_0x5b9517(0x26f)](_0x567b71[_0x5b9517(0x491)]())),this[_0x5b9517(0x1ee)](_0x5b9517(0x591));}}else _0x322aaf+=Math[_0xd532d0(0x2b3)](_0x335535['hpDamage']);}$gameVariables[_0xd532d0(0xad1)](_0x96a326[_0xd532d0(0x6a5)],_0x322aaf);}if(_0x96a326[_0xd532d0(0x7c1)]){let _0x3329c6=$gameVariables['value'](_0x96a326['VariableHeal']);_0x335535[_0xd532d0(0x7ab)]<0x0&&(_0x3329c6+=Math['abs'](_0x335535[_0xd532d0(0x7ab)])),$gameVariables[_0xd532d0(0xad1)](_0x96a326[_0xd532d0(0x7c1)],_0x3329c6);}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x34c)]=Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0xa46)],Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0xa46)]=function(){const _0x5ea2df=_0x4ca73a;VisuMZ['BattleCore'][_0x5ea2df(0x34c)][_0x5ea2df(0x37c)](this),this['initMembersBattleCore']();},Game_BattlerBase['prototype']['initMembersBattleCore']=function(){const _0x35fb08=_0x4ca73a;this[_0x35fb08(0x1ae)]=![];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x439)]=Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x705)],Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x705)]=function(){const _0x38ee62=_0x4ca73a;this[_0x38ee62(0x473)]={},VisuMZ[_0x38ee62(0x499)]['Game_BattlerBase_refresh'][_0x38ee62(0x37c)](this);},Game_BattlerBase[_0x4ca73a(0x90a)]['checkCacheKey']=function(_0x58720e){const _0x4ae042=_0x4ca73a;return this['_cache']=this['_cache']||{},this[_0x4ae042(0x473)][_0x58720e]!==undefined;},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x7e3)]=function(){const _0x49d435=_0x4ca73a;if(this['_cache'][_0x49d435(0x7e3)]!==undefined)return this[_0x49d435(0x473)][_0x49d435(0x7e3)];const _0x4cd573=/<DAMAGE CAP:[ ](\d+)>/i,_0x8097b1=this[_0x49d435(0x909)]()[_0x49d435(0x8f9)](_0x17261f=>_0x17261f&&_0x17261f[_0x49d435(0xaa8)][_0x49d435(0x2b2)](_0x4cd573)?Number(RegExp['$1']):0x0);let _0x5617f0=_0x8097b1[_0x49d435(0x73b)]>0x0?Math[_0x49d435(0x826)](..._0x8097b1):0x0;if(_0x5617f0<=0x0)_0x5617f0=VisuMZ[_0x49d435(0x499)][_0x49d435(0x800)][_0x49d435(0x1b8)][_0x49d435(0x6dc)];return this[_0x49d435(0x473)][_0x49d435(0x7e3)]=_0x5617f0,this[_0x49d435(0x473)][_0x49d435(0x7e3)];},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x23f)]=function(){const _0x2f4c1e=_0x4ca73a;if(this[_0x2f4c1e(0x473)]['softDamageCap']!==undefined)return this[_0x2f4c1e(0x473)]['softDamageCap'];let _0x3246d2=VisuMZ['BattleCore'][_0x2f4c1e(0x800)][_0x2f4c1e(0x1b8)][_0x2f4c1e(0x92b)];const _0x1112de=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0xc64e08=this[_0x2f4c1e(0x909)]()[_0x2f4c1e(0x8f9)](_0x490a54=>_0x490a54&&_0x490a54['note'][_0x2f4c1e(0x2b2)](_0x1112de)?Number(RegExp['$1'])/0x64:0x0);return _0x3246d2=_0xc64e08[_0x2f4c1e(0x93c)]((_0x522d3,_0x7b756b)=>_0x522d3+_0x7b756b,_0x3246d2),this[_0x2f4c1e(0x473)]['softDamageCap']=_0x3246d2,this[_0x2f4c1e(0x473)]['softDamageCap'][_0x2f4c1e(0x561)](0.01,0x1);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x889)]=Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0xa4a)],Game_BattlerBase[_0x4ca73a(0x90a)]['die']=function(){const _0x448dee=_0x4ca73a;VisuMZ[_0x448dee(0x499)][_0x448dee(0x889)]['call'](this),SceneManager['isSceneBattle']()&&this['requestMotion'](_0x448dee(0x785));},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x4f6)]=function(){const _0x28a7d7=_0x4ca73a;if(!SceneManager[_0x28a7d7(0xb22)]())return null;if(!SceneManager['_scene'][_0x28a7d7(0xa38)])return null;return SceneManager['_scene']['_spriteset']['findTargetSprite'](this);},Game_BattlerBase['prototype'][_0x4ca73a(0x325)]=function(){const _0x582fc9=_0x4ca73a;return VisuMZ['BattleCore']['Settings'][_0x582fc9(0x4e4)][_0x582fc9(0x699)];},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x9bd)]=function(){const _0x337c9a=_0x4ca73a;return VisuMZ['BattleCore'][_0x337c9a(0x800)]['Actor'][_0x337c9a(0x1a2)];},Game_BattlerBase['prototype']['svBattlerShadowVisible']=function(){const _0x60e12b=_0x4ca73a;return this['isActor']&&this['isActor']()?VisuMZ[_0x60e12b(0x499)]['Settings']['Actor'][_0x60e12b(0x3dd)]:VisuMZ['BattleCore']['Settings'][_0x60e12b(0xa94)][_0x60e12b(0x3dd)];},Game_BattlerBase[_0x4ca73a(0x90a)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase['prototype'][_0x4ca73a(0xa09)]=function(){return 0x0;},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x21d)]=function(){return 0x0;},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x786)]=function(_0xb1062){const _0x4df588=_0x4ca73a;if(!_0xb1062)return 0x0;let _0x76b857=0x0;const _0x34b895=_0xb1062[_0x4df588(0xaa8)];_0x34b895['match'](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x76b857+=Number(RegExp['$1']));if(_0x34b895['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x4df588(0xa27)===_0x4df588(0x9a4)){function _0x314dfe(){const _0xe01e18=_0x4df588;return _0x37198c[_0xe01e18(0xa59)](_0xe01e18(0x945));}}else _0x76b857+=Number(RegExp['$1']);}return _0x76b857;},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x229)]=function(_0x493e43){const _0x2431ff=_0x4ca73a;if(!_0x493e43)return 0x0;let _0x1f6baa=0x0;const _0x37d0b9=_0x493e43[_0x2431ff(0xaa8)];return _0x37d0b9[_0x2431ff(0x2b2)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x1f6baa+=Number(RegExp['$1'])),_0x37d0b9[_0x2431ff(0x2b2)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1f6baa+=Number(RegExp['$2'])),_0x1f6baa;},VisuMZ[_0x4ca73a(0x499)]['Game_BattlerBase_isStateResist']=Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x28b)],Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x28b)]=function(_0x12009e){const _0xf1b062=_0x4ca73a;if(_0x12009e===this[_0xf1b062(0x49b)]()&&this['isImmortal']())return!![];return VisuMZ['BattleCore'][_0xf1b062(0x308)]['call'](this,_0x12009e);},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x625)]=function(){const _0x512f1d=_0x4ca73a;return this[_0x512f1d(0x1ae)];},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x381)]=function(_0x20212e){const _0x6b3837=_0x4ca73a;if(_0x20212e){if('SQWIh'!==_0x6b3837(0x87e))this['addImmortal']();else{function _0x834e1(){const _0x5ea0db=_0x6b3837;this[_0x5ea0db(0x2fd)]('PreStartTurnJS'),_0x361a7f[_0x5ea0db(0x499)]['Game_Battler_startTpbTurn'][_0x5ea0db(0x37c)](this),this['processBattleCoreJS'](_0x5ea0db(0x2b9));}}}else{if(_0x6b3837(0x3e9)===_0x6b3837(0x3e9))this[_0x6b3837(0x3f0)]();else{function _0x1b9f10(){const _0x4a2bd4=_0x6b3837;_0x397882['prototype'][_0x4a2bd4(0x3d9)][_0x4a2bd4(0x37c)](this,_0x510403);if(this[_0x4a2bd4(0x804)]())this[_0x4a2bd4(0x9fc)](_0x1db387);}}}},Game_BattlerBase[_0x4ca73a(0x90a)]['addImmortal']=function(){const _0x3b0ba2=_0x4ca73a;if(this[_0x3b0ba2(0x6ee)]())return;this[_0x3b0ba2(0x1ae)]=!![];},Game_BattlerBase['prototype']['removeImmortal']=function(){const _0x5eaaee=_0x4ca73a,_0x27d8dc=this['isAlive']();this['_immortal']=![],this[_0x5eaaee(0x705)]();if(this[_0x5eaaee(0x6ee)]()&&_0x27d8dc){if(_0x5eaaee(0x3ec)!==_0x5eaaee(0x81b))this[_0x5eaaee(0xb7d)](),this[_0x5eaaee(0x1b6)]();else{function _0x2ef5d4(){const _0x3fbfbd=_0x5eaaee;for(const _0x49361c of _0x1d4003){for(const _0x4c2594 of _0x11c913){const _0x6ed63c=_0xf935d3[0x0][_0x3fbfbd(0x26f)](_0x4c2594[0x0],_0x49361c[0x0]),_0x2214e0=_0x10a66a[0x1][_0x3fbfbd(0x26f)](_0x4c2594[0x1],_0x49361c[0x1])['trim'](),_0x481244=new _0x3884df(_0x1ee5fb[_0x3fbfbd(0x26f)](_0x2214e0),'i');_0x554eca[_0x6ed63c]=_0x481244;}}}}}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x56a)]=Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x6cd)],Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x6cd)]=function(){const _0x4d95c6=_0x4ca73a;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x4d95c6(0x499)][_0x4d95c6(0x56a)][_0x4d95c6(0x37c)](this);},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x85c)]=function(){const _0x11c4d9=_0x4ca73a;for(const _0x28611e of this[_0x11c4d9(0x909)]()){if(_0x11c4d9(0x96c)===_0x11c4d9(0x6dd)){function _0x4caa37(){const _0x1310a6=_0x11c4d9;_0xef20a1[_0x1310a6(0x499)][_0x1310a6(0x848)]['call'](this),this[_0x1310a6(0x641)]();}}else{if(!_0x28611e)continue;if(_0x28611e[_0x11c4d9(0xaa8)][_0x11c4d9(0x2b2)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}}return!![];},VisuMZ['BattleCore'][_0x4ca73a(0x604)]=Game_BattlerBase['prototype'][_0x4ca73a(0x9e6)],Game_BattlerBase[_0x4ca73a(0x90a)]['canGuard']=function(){const _0x20a178=_0x4ca73a;if(!this[_0x20a178(0xafc)]())return![];return VisuMZ[_0x20a178(0x499)][_0x20a178(0x604)][_0x20a178(0x37c)](this);},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0xafc)]=function(){const _0x30e236=_0x4ca73a;for(const _0x3d197d of this[_0x30e236(0x909)]()){if('XbWXw'===_0x30e236(0x477)){function _0x2e6798(){const _0x3de993=_0x30e236,_0x4cd613=_0x52f981(_0x40f223['$1']);_0x4cd613!==_0x2755ba[_0x1cd4ab]['version']&&(_0x52a753(_0x3de993(0xb12)['format'](_0x2d5230,_0x4cd613)),_0xd95016['exit']());}}else{if(!_0x3d197d)continue;if(_0x3d197d['note'][_0x30e236(0x2b2)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}}return!![];},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x86d)]=function(){const _0x21528d=_0x4ca73a;for(const _0x2ce869 of this[_0x21528d(0x909)]()){if('Hfwat'==='PsIgR'){function _0x1313f1(){const _0x37ed9e=_0x21528d;if(this[_0x37ed9e(0x804)]()){const _0x1ed506=this[_0x37ed9e(0x911)][_0x37ed9e(0x5ca)]();this['bitmap']=new _0x57ede8(_0x1ed506['width'],_0x1ed506['height']);}else _0x2b977b[_0x37ed9e(0x499)][_0x37ed9e(0xb20)]['call'](this,_0x3cb05f);}}else{if(!_0x2ce869)continue;if(_0x2ce869[_0x21528d(0xaa8)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}}return!![];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x489)]=Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x9d9)],Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x9d9)]=function(){const _0x17a344=_0x4ca73a;if(SceneManager[_0x17a344(0xb22)]()&&$gameTroop[_0x17a344(0x4ee)]()<=0x0)return;if(SceneManager['isSceneBattle']()&&BattleManager[_0x17a344(0x75d)]()&&this['_lastRegenFrameCount']===Graphics[_0x17a344(0x993)]){if('zmBzP'!=='zmBzP'){function _0x3feda2(){const _0x256bc5=_0x17a344;this[_0x256bc5(0x348)][_0x256bc5(0xa74)]=_0xa189b1[_0x256bc5(0x334)];return;}}else return;}this[_0x17a344(0x974)]=Graphics[_0x17a344(0x993)],this[_0x17a344(0x2fd)](_0x17a344(0xb90)),VisuMZ[_0x17a344(0x499)][_0x17a344(0x489)]['call'](this),this['regenerateAllBattleCore'](),this[_0x17a344(0x2fd)](_0x17a344(0x809));},Game_Battler['prototype'][_0x4ca73a(0x854)]=function(){const _0x15ddc2=_0x4ca73a;if(SceneManager[_0x15ddc2(0xb22)]())for(const _0x3d0bc7 of this[_0x15ddc2(0x909)]()){if(!_0x3d0bc7)continue;this[_0x15ddc2(0x60d)](_0x3d0bc7);}},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x60d)]=function(_0x1bf16b){const _0x5db464=_0x4ca73a;if(!Imported[_0x5db464(0x5d1)])return;if(!SceneManager[_0x5db464(0xb22)]())return;if(this[_0x5db464(0x6ee)]())return;if(this[_0x5db464(0x55f)]())return;if(_0x1bf16b['note'][_0x5db464(0x2b2)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x26f11c=Number(RegExp['$1']);$gameTemp[_0x5db464(0x64d)]([this],_0x26f11c,![],![]);}},VisuMZ['BattleCore'][_0x4ca73a(0x8e5)]=Game_Battler[_0x4ca73a(0x90a)]['startTpbTurn'],Game_Battler[_0x4ca73a(0x90a)]['startTpbTurn']=function(){const _0x225909=_0x4ca73a;this[_0x225909(0x2fd)](_0x225909(0x1ac)),VisuMZ['BattleCore'][_0x225909(0x8e5)][_0x225909(0x37c)](this),this[_0x225909(0x2fd)](_0x225909(0x2b9));},VisuMZ[_0x4ca73a(0x499)]['Game_Battler_onTurnEnd']=Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x9d5)],Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x9d5)]=function(){const _0x5cbfe9=_0x4ca73a;this[_0x5cbfe9(0x2fd)]('PreEndTurnJS'),VisuMZ['BattleCore'][_0x5cbfe9(0xa32)][_0x5cbfe9(0x37c)](this),this[_0x5cbfe9(0x2fd)]('PostEndTurnJS');},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x2fd)]=function(_0x511051){const _0x36b3ff=_0x4ca73a;if(this[_0x36b3ff(0x8aa)]||this['_tempActor'])return;const _0x1d63cc=VisuMZ['BattleCore'][_0x36b3ff(0x800)][_0x36b3ff(0x1a9)];if(_0x1d63cc[_0x511051])_0x1d63cc[_0x511051][_0x36b3ff(0x37c)](this);for(const _0x3afe03 of this[_0x36b3ff(0x909)]()){if(!_0x3afe03)continue;key=VisuMZ[_0x36b3ff(0x499)]['createKeyJS'](_0x3afe03,_0x511051),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x36b3ff(0x499)]['JS'][key][_0x36b3ff(0x37c)](this,this,this,_0x3afe03,0x0);}},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x754)]=function(){const _0x4284c8=_0x4ca73a;return VisuMZ[_0x4284c8(0x499)][_0x4284c8(0x800)][_0x4284c8(0x4e4)][_0x4284c8(0x858)]||![];},Game_Battler['prototype'][_0x4ca73a(0x975)]=function(){const _0x2cdb57=_0x4ca73a;if(this[_0x2cdb57(0x9fe)]()){if('kVnUp'!==_0x2cdb57(0xa41)){if(this['chantStyle']()){if(_0x2cdb57(0x75c)!=='xWQFg'){if(this[_0x2cdb57(0x8d3)]['some'](_0xa1035e=>_0xa1035e['item']()&&_0xa1035e['isMagical']()))return!![];}else{function _0x17c846(){return!![];}}}else{if(this[_0x2cdb57(0x8d3)]['some'](_0x56c887=>_0x56c887[_0x2cdb57(0xa07)]()&&_0x56c887[_0x2cdb57(0x64b)]()))return!![];}}else{function _0x563dbe(){const _0x56f5b5=_0x2cdb57;return this[_0x56f5b5(0x622)]();}}}if(BattleManager[_0x2cdb57(0x75d)]()&&this[_0x2cdb57(0x59d)]==='casting')return this[_0x2cdb57(0x754)]()?this[_0x2cdb57(0x2da)]()&&this['currentAction']()['item']()&&this[_0x2cdb57(0x2da)]()[_0x2cdb57(0x640)]():this['currentAction']()&&this[_0x2cdb57(0x2da)]()[_0x2cdb57(0xa07)]()&&this[_0x2cdb57(0x2da)]()[_0x2cdb57(0x64b)]();return![];},Game_Battler['prototype'][_0x4ca73a(0x472)]=function(){const _0x1a69cf=_0x4ca73a;if(BattleManager[_0x1a69cf(0x75d)]()&&this[_0x1a69cf(0x59d)]===_0x1a69cf(0xb06))return this['chantStyle']()?this[_0x1a69cf(0x2da)]()&&this['currentAction']()[_0x1a69cf(0xa07)]()&&!this[_0x1a69cf(0x2da)]()[_0x1a69cf(0x640)]():this[_0x1a69cf(0x2da)]()&&this[_0x1a69cf(0x2da)]()[_0x1a69cf(0xa07)]()&&!this[_0x1a69cf(0x2da)]()[_0x1a69cf(0x64b)]();return![];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x762)]=Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x9ce)],Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x9ce)]=function(){const _0x57273a=_0x4ca73a;VisuMZ[_0x57273a(0x499)]['Game_Battler_clearDamagePopup'][_0x57273a(0x37c)](this),this[_0x57273a(0x6f7)]=[];},Game_Battler['prototype']['isDamagePopupRequested']=function(){const _0x414cf7=_0x4ca73a;if(!this['_damagePopupArray'])this[_0x414cf7(0x9ce)]();return this[_0x414cf7(0x6f7)]['length']>0x0;},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x454)]=function(){const _0x5b5598=_0x4ca73a;if(!SceneManager[_0x5b5598(0xb22)]())return;if(!this['_damagePopupArray'])this['clearDamagePopup']();this[_0x5b5598(0x504)]();const _0xba507b=this[_0x5b5598(0x4f6)]();if(_0xba507b)_0xba507b[_0x5b5598(0x88d)]();},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x504)]=function(){const _0x3c782b=_0x4ca73a,_0x4ee3ad=this[_0x3c782b(0xa69)]();if(_0x4ee3ad[_0x3c782b(0x581)]||_0x4ee3ad[_0x3c782b(0x2e0)]){if(_0x3c782b(0x26a)===_0x3c782b(0x26a)){const _0x1a5d76=JsonEx['makeDeepCopy'](_0x4ee3ad);_0x1a5d76[_0x3c782b(0x72e)]=![],_0x1a5d76[_0x3c782b(0x30f)]=0x0,this[_0x3c782b(0x6f7)][_0x3c782b(0x1ee)](_0x1a5d76);}else{function _0xd66648(){const _0x446cf4=_0x3c782b;_0x57ae9b['changeWeather'](_0x122335[0x0],_0x2b36b2[0x1],_0x146d5d[0x2]);if(_0x379e69[0x3])this[_0x446cf4(0x591)](_0x5471be[0x2]);return!![];}}}if(_0x4ee3ad[_0x3c782b(0x72e)]){const _0x550077=JsonEx[_0x3c782b(0x7bf)](_0x4ee3ad);_0x550077[_0x3c782b(0x581)]=![],_0x550077[_0x3c782b(0x2e0)]=![],_0x550077[_0x3c782b(0x30f)]=0x0,this['_damagePopupArray']['push'](_0x550077);}if(_0x4ee3ad[_0x3c782b(0x30f)]!==0x0){if(_0x3c782b(0x919)===_0x3c782b(0xb86)){function _0x1edc25(){const _0x2522af=_0x3c782b;_0x266906=_0x56f2bd[_0x2522af(0x83e)]/0x2,_0x434913=_0x4f3dc8['boxHeight']/0x2;}}else{const _0x14d0b8=JsonEx[_0x3c782b(0x7bf)](_0x4ee3ad);_0x14d0b8[_0x3c782b(0x581)]=![],_0x14d0b8[_0x3c782b(0x2e0)]=![],_0x14d0b8[_0x3c782b(0x72e)]=![],this[_0x3c782b(0x6f7)][_0x3c782b(0x1ee)](_0x14d0b8);}}},Game_Battler[_0x4ca73a(0x90a)]['getNextDamagePopup']=function(){const _0x32c674=_0x4ca73a;if(!this[_0x32c674(0x6f7)])this[_0x32c674(0x9ce)]();if(VisuMZ[_0x32c674(0x499)][_0x32c674(0x800)][_0x32c674(0x1b8)]['NewPopupBottom']){if(_0x32c674(0x1e9)!==_0x32c674(0x1e9)){function _0x4c8434(){const _0x1b0593=_0x32c674;if(this['_actions'][_0x1b0593(0xac3)](_0x6f68ab=>_0x6f68ab['item']()&&_0x6f68ab[_0x1b0593(0x64b)]()))return!![];}}else return this[_0x32c674(0x6f7)][_0x32c674(0x6b6)]();}else return this[_0x32c674(0x6f7)][_0x32c674(0xae4)]();},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xb0e)]=function(_0x1ff9ba,_0x4ccd9c){const _0x337fe2=_0x4ca73a;if(!SceneManager[_0x337fe2(0xb22)]())return;if(!this['battler']())return;if(_0x1ff9ba['length']<=0x0)return;_0x4ccd9c=_0x4ccd9c||{},_0x4ccd9c['textColor']=_0x4ccd9c[_0x337fe2(0x650)]||'#ffffff',_0x4ccd9c[_0x337fe2(0x99a)]=_0x4ccd9c[_0x337fe2(0x99a)]||[0x0,0x0,0x0,0x0],_0x4ccd9c['flashDuration']=_0x4ccd9c[_0x337fe2(0x957)]||0x0,this['battler']()[_0x337fe2(0xb0e)](_0x1ff9ba,_0x4ccd9c);},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x8f1)]=function(_0x3b0552,_0x4f4220,_0x42896a){const _0xd2d927=_0x4ca73a;if(!SceneManager[_0xd2d927(0xb22)]())return;if(!this[_0xd2d927(0x4f6)]())return;if(_0x4f4220[_0xd2d927(0x73b)]<=0x0)return;_0x42896a=_0x42896a||{},_0x42896a[_0xd2d927(0x650)]=_0x42896a[_0xd2d927(0x650)]||'#ffffff',_0x42896a[_0xd2d927(0x99a)]=_0x42896a[_0xd2d927(0x99a)]||[0x0,0x0,0x0,0x0],_0x42896a[_0xd2d927(0x957)]=_0x42896a[_0xd2d927(0x957)]||0x0,this[_0xd2d927(0x4f6)]()[_0xd2d927(0x8f1)](_0x3b0552,_0x4f4220,_0x42896a);},Game_Battler['prototype']['notFocusValid']=function(){const _0x27cdc6=_0x4ca73a;if(this[_0x27cdc6(0x55f)]())return![];if(this[_0x27cdc6(0xb34)]()&&this['isAppeared']())return!![];if(this['isEnemy']()&&this[_0x27cdc6(0x804)]()){if(_0x27cdc6(0x205)==='jyOrR'){if(this[_0x27cdc6(0x6ee)]()&&this[_0x27cdc6(0x71b)]())return![];}else{function _0x2660e0(){const _0x833f8f=_0x27cdc6,_0xc4d524=this[_0x833f8f(0x5ca)]()[_0x833f8f(0x872)]||0x0;return _0xf7189c[_0x833f8f(0x7c7)][_0xc4d524];}}}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x4f7)]=Game_Battler[_0x4ca73a(0x90a)]['clearMotion'],Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xb07)]=function(){const _0x55170a=_0x4ca73a;VisuMZ[_0x55170a(0x499)][_0x55170a(0x4f7)][_0x55170a(0x37c)](this),this['clearFreezeMotion']();},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xa99)]=function(){return!![];},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x268)]=function(){return![];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xa89)]=Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x511)],Game_Battler[_0x4ca73a(0x90a)]['onBattleStart']=function(_0x191a6a){const _0x3f1420=_0x4ca73a;VisuMZ['BattleCore'][_0x3f1420(0xa89)]['call'](this,_0x191a6a),this['onBattleStartBattleCore'](_0x191a6a);},Game_Battler['prototype'][_0x4ca73a(0x90f)]=function(_0x2bc17b){const _0x269dca=_0x4ca73a;this[_0x269dca(0x87c)](![]);},VisuMZ['BattleCore']['Game_Battler_performActionStart']=Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x938)],Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x938)]=function(_0x46777a){const _0x4e9671=_0x4ca73a;VisuMZ['BattleCore']['Game_Battler_performActionStart'][_0x4e9671(0x37c)](this,_0x46777a);if(!_0x46777a['isGuard']()){const _0x269ee9=this['battler']();_0x269ee9&&_0x269ee9[_0x4e9671(0x25d)]();}this[_0x4e9671(0x87c)](![]);},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x251)]=function(){const _0x4f1dc9=_0x4ca73a,_0x2a3f80=this[_0x4f1dc9(0x553)];this['_flinched']=![];if(BattleManager[_0x4f1dc9(0xae9)]()&&this[_0x4f1dc9(0x484)]()){const _0x406112=this[_0x4f1dc9(0x4f6)]();if(_0x406112&&_0x2a3f80)_0x406112[_0x4f1dc9(0x25d)]();return;}const _0x1eb5f3=this[_0x4f1dc9(0x4f6)]();if(_0x1eb5f3)_0x1eb5f3[_0x4f1dc9(0x4fe)]();this[_0x4f1dc9(0x87c)](![]),this[_0x4f1dc9(0x1b6)]();},Game_Battler['prototype']['performActionMotions']=function(_0x3abda7){const _0x57fe36=_0x4ca73a;if(_0x3abda7[_0x57fe36(0x53c)]())this[_0x57fe36(0x404)]();else{if(_0x3abda7[_0x57fe36(0x68f)]())this[_0x57fe36(0x3b7)](_0x57fe36(0x386));else{if(_0x3abda7[_0x57fe36(0x640)]())this[_0x57fe36(0x3b7)]('spell');else{if(_0x3abda7['isSkill']())_0x3abda7[_0x57fe36(0xa07)]()['damage']['type']>0x0?this[_0x57fe36(0x404)]():this['requestMotion'](_0x57fe36(0x500));else{if(_0x3abda7[_0x57fe36(0x95e)]()){if(_0x57fe36(0x9a7)!=='RLoQx'){function _0xc53db(){const _0x2403ce=_0x57fe36;this[_0x2403ce(0x781)]=_0x41e22c['width'],this[_0x2403ce(0x38c)]=_0x3aa081[_0x2403ce(0x38c)];const _0x5e10b6=_0x5573b0[_0x2403ce(0x826)](0x1,this[_0x2403ce(0x781)]/this['bitmap']['width']),_0x34ac49=_0x330a91[_0x2403ce(0x826)](0x1,this[_0x2403ce(0x38c)]/this[_0x2403ce(0xa74)][_0x2403ce(0x38c)]),_0x39f6f5=_0x5c29b1[_0x2403ce(0x826)](_0x5e10b6,_0x34ac49);this['scale']['x']=_0x39f6f5,this[_0x2403ce(0xaed)]['y']=_0x39f6f5,this['x']=(_0x395582[_0x2403ce(0x781)]-this['width'])/0x2,this['y']=_0x2caa85[_0x2403ce(0x38c)]-this[_0x2403ce(0x38c)];}}else this[_0x57fe36(0x3b7)](_0x57fe36(0xa07));}}}}}},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xb55)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x1b2)]=function(){const _0x2d7f2d=_0x4ca73a,_0x313cc8=this[_0x2d7f2d(0xb55)]();return _0x313cc8?_0x313cc8[_0x2d7f2d(0x8ea)]:0x0;},Game_Battler[_0x4ca73a(0x90a)]['performSubstitute']=function(_0x2e7ce6){const _0x26757b=_0x4ca73a;if(!$gameSystem[_0x26757b(0x395)]())return;const _0x3efc66=this[_0x26757b(0x4f6)](),_0x52a130=_0x2e7ce6[_0x26757b(0x4f6)]();if(!_0x3efc66||!_0x52a130)return;const _0x595294=_0x52a130['_baseX'],_0xff4ba3=_0x52a130[_0x26757b(0xa56)];this[_0x26757b(0xa02)](_0x595294,_0xff4ba3,0x0,![],_0x26757b(0xb91),-0x1),_0x3efc66[_0x26757b(0x92c)]();const _0x3ca0c2=VisuMZ[_0x26757b(0x499)][_0x26757b(0x800)][_0x26757b(0xb23)];let _0x2ae87a=(_0x52a130['width']+_0x3efc66[_0x26757b(0x781)])/0x2;_0x2ae87a*=this[_0x26757b(0x4bb)]()?0x1:-0x1;let _0x441779=_0x3ca0c2['StepDistanceY']*(this[_0x26757b(0x4bb)]()?0x1:-0x1);_0x2e7ce6[_0x26757b(0x8c1)](_0x2ae87a,_0x441779,0x0,![],_0x26757b(0xb91)),_0x52a130[_0x26757b(0x92c)]();},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x3b7)]=function(_0x5c8c07){const _0xc027ab=_0x4ca73a;if(SceneManager['isSceneBattle']()){const _0x21b2f7=this['battler']();_0x21b2f7&&(_0x21b2f7['forceMotion'](_0x5c8c07),[_0xc027ab(0xb65),_0xc027ab(0x677),_0xc027ab(0x777)]['includes'](_0x5c8c07)&&this[_0xc027ab(0x92d)]());}this[_0xc027ab(0xa9d)]();},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x92d)]=function(){},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x1f1)]=function(_0x5aa7e1){const _0x4f30ae=_0x4ca73a;if(SceneManager['isSceneBattle']()){const _0x1d0319=this[_0x4f30ae(0x4f6)]();if(_0x1d0319)_0x1d0319['forceWeaponAnimation'](_0x5aa7e1);}},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x619)]=function(){const _0x3aec2b=_0x4ca73a;if(SceneManager['isSceneBattle']()){if(_0x3aec2b(0x599)!==_0x3aec2b(0x599)){function _0x82521f(){const _0x19b5d3=_0x3aec2b;return _0x15b2ef['BattleCore'][_0x19b5d3(0x988)][_0x19b5d3(0x37c)](this);}}else{const _0x54f439=this[_0x3aec2b(0x1b2)]();this['startWeaponAnimation'](_0x54f439);}}},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x3c8)]=function(_0x3ef407,_0x57e500){const _0x101cd8=_0x4ca73a;if(!_0x3ef407)return;if(!_0x3ef407[_0x101cd8(0xa07)]())return;if(_0x3ef407[_0x101cd8(0x53c)]())return;if(_0x3ef407[_0x101cd8(0x68f)]())return;if(_0x3ef407[_0x101cd8(0x95e)]())return;let _0xd6143f=0x0;const _0x5d2342=VisuMZ[_0x101cd8(0x499)][_0x101cd8(0x800)][_0x101cd8(0xb23)],_0x51585e=_0x3ef407[_0x101cd8(0xa07)]()['note'];if(_0x51585e[_0x101cd8(0x2b2)](/<CAST ANIMATION: (\d+)>/i))_0xd6143f=Number(RegExp['$1']);else{if(_0x51585e['match'](/<NO CAST ANIMATION>/i))return;else{if(_0x3ef407[_0x101cd8(0x8e6)]()){if(_0x101cd8(0x950)===_0x101cd8(0x7cd)){function _0x10286e(){const _0x274529=_0x101cd8,_0x1c7ac7=_0x10d70c['BattleCore'][_0x274529(0x800)][_0x274529(0x4f8)],_0x1435e2=this['getConfigValue']('autoBattleUseSkills');return _0x1435e2?_0x1c7ac7[_0x274529(0x3cd)]:_0x1c7ac7[_0x274529(0xb15)];}}else _0xd6143f=_0x5d2342[_0x101cd8(0x9a1)];}else{if(_0x3ef407[_0x101cd8(0x6f6)]())_0xd6143f=_0x5d2342[_0x101cd8(0x215)];else{if(_0x3ef407['isMagical']()){if(_0x101cd8(0x81a)===_0x101cd8(0x81a))_0xd6143f=_0x5d2342[_0x101cd8(0x19e)];else{function _0x100cbb(){const _0x3e5f2e=_0x101cd8;_0x3bb90e[_0x3e5f2e(0xad1)](_0x533429[_0x3e5f2e(0x492)],!![]);}}}}}}}_0xd6143f>0x0&&$gameTemp[_0x101cd8(0xad9)]([this],_0xd6143f,!!_0x57e500);},Game_Battler[_0x4ca73a(0x90a)]['performReflection']=function(){const _0x46bfb5=_0x4ca73a;SoundManager['playReflection']();let _0x5bc71a=VisuMZ[_0x46bfb5(0x499)][_0x46bfb5(0x800)][_0x46bfb5(0xb23)][_0x46bfb5(0x7eb)];_0x5bc71a>0x0&&$gameTemp['requestAnimation']([this],_0x5bc71a);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x999)]=Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x662)],Game_Battler['prototype'][_0x4ca73a(0x662)]=function(){const _0x19851c=_0x4ca73a;VisuMZ[_0x19851c(0x499)][_0x19851c(0x999)][_0x19851c(0x37c)](this),this[_0x19851c(0x641)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x7c8)]=Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x6b7)],Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x6b7)]=function(){const _0x25ddf3=_0x4ca73a;VisuMZ[_0x25ddf3(0x499)]['Game_Battler_performMiss'][_0x25ddf3(0x37c)](this),this[_0x25ddf3(0x641)]();},VisuMZ['BattleCore'][_0x4ca73a(0x848)]=Game_Battler['prototype'][_0x4ca73a(0x556)],Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x556)]=function(){const _0x4d7c54=_0x4ca73a;VisuMZ[_0x4d7c54(0x499)][_0x4d7c54(0x848)]['call'](this),this[_0x4d7c54(0x641)]();},Game_Battler[_0x4ca73a(0x90a)]['performFlinch']=function(){const _0x5ea4e7=_0x4ca73a;if(!$gameSystem['isSideView']())return;if(this[_0x5ea4e7(0x553)])return;this[_0x5ea4e7(0x553)]=!![];const _0x1ad1b0=this['battler']();if(_0x1ad1b0)_0x1ad1b0[_0x5ea4e7(0x873)]();},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x1b6)]=function(){const _0x5f5735=_0x4ca73a;if(this['isDead']()&&this[_0x5f5735(0x27e)]!=='dead'){this['requestMotion'](_0x5f5735(0x785));return;}if(this['isDead']()&&this[_0x5f5735(0x27e)]==='dead')return;if(!!this[_0x5f5735(0x41b)])return;if(this[_0x5f5735(0xa95)]()){if(!this[_0x5f5735(0x896)]()&&this!==BattleManager['_subject']){if(this['battler']())this[_0x5f5735(0x4f6)]()['refreshMotion']();}this[_0x5f5735(0xa9d)]();return;}if(this[_0x5f5735(0x27e)]==='victory')return;if(this['_motionType']==='escape'&&!BattleManager[_0x5f5735(0x484)]())return;if(this['_motionType']==='guard'&&!BattleManager[_0x5f5735(0x484)]())return;this[_0x5f5735(0xb07)]();if(this[_0x5f5735(0x4f6)]()&&BattleManager[_0x5f5735(0x484)]()){if('opyol'===_0x5f5735(0xa16)){function _0x493384(){const _0x590885=_0x5f5735;this[_0x590885(0x605)]=null;}}else{this[_0x5f5735(0x4f6)]()['refreshMotion'](),this[_0x5f5735(0xa9d)]();return;}}},Game_Enemy['prototype'][_0x4ca73a(0x896)]=function(){const _0xf82534=_0x4ca73a;if(!this[_0xf82534(0x804)]())return![];const _0x12f919=this['battler']();if(!_0x12f919)return![];const _0x56c9e3=_0x12f919['_svBattlerSprite'];if(!_0x56c9e3)return![];const _0x1c9b68=_0x56c9e3[_0xf82534(0x731)];return _0x1c9b68&&!_0x1c9b68[_0xf82534(0x766)];},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x817)]=function(){const _0x12a34c=_0x4ca73a;return this[_0x12a34c(0x232)];},Game_Battler['prototype'][_0x4ca73a(0x87c)]=function(_0x4feded){const _0x44e876=_0x4ca73a;if(!$gameSystem[_0x44e876(0x395)]())return;this[_0x44e876(0x232)]=_0x4feded;const _0x529f70=this['battler']();if(_0x529f70)_0x529f70[_0x44e876(0x8b6)]();},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xb93)]=function(_0x5f46cb,_0x589f28,_0xa7ac95){const _0x324378=_0x4ca73a;if(!$gameSystem[_0x324378(0x395)]())return;const _0x3c0864=this['battler']();if(!_0x3c0864)return;if(_0x5f46cb===_0x3c0864['_baseX'])return;let _0x3d576a=![];if(this[_0x324378(0x4bb)]()){if(_0x324378(0x39c)!==_0x324378(0x1af)){if(_0x5f46cb>_0x3c0864[_0x324378(0x9e9)])_0x3d576a=!![];if(_0x5f46cb<_0x3c0864['_baseX'])_0x3d576a=![];}else{function _0x42a617(){const _0x13ca80=_0x324378;this[_0x13ca80(0x546)]+=_0x692cf9[_0x13ca80(0x1de)](),this[_0x13ca80(0x348)]['y']+=_0x3dd36a['getBattlePortraitOffsetY']();}}}else{if(this[_0x324378(0xa95)]()){if(_0x324378(0xab1)===_0x324378(0x23d)){function _0x54ed65(){const _0x3509d8=_0x324378,_0x3c3fbd=_0x637f6d[_0x5ef131];if(!_0x3c3fbd)return![];if(_0x3c3fbd[_0x3509d8(0x3c0)][_0x3509d8(0x73b)]<=0x1)return![];return!![];}}else{if(_0x5f46cb>_0x3c0864[_0x324378(0x9e9)])_0x3d576a=![];if(_0x5f46cb<_0x3c0864['_baseX'])_0x3d576a=!![];}}};this[_0x324378(0x87c)](_0xa7ac95?!_0x3d576a:_0x3d576a),_0x3c0864[_0x324378(0x8b6)]();},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x8c1)]=function(_0x57532d,_0x2caef1,_0x12a196,_0x818e3a,_0x576bf0){const _0x18c9d7=_0x4ca73a;if(!$gameSystem[_0x18c9d7(0x395)]())return;const _0x38ca43=this[_0x18c9d7(0x4f6)]();if(!_0x38ca43)return;if(_0x818e3a)this[_0x18c9d7(0xb93)](_0x57532d+_0x38ca43[_0x18c9d7(0x9e9)],_0x2caef1+_0x38ca43[_0x18c9d7(0xa56)],![]);_0x57532d+=_0x38ca43['_baseX']-_0x38ca43['_homeX'],_0x2caef1+=_0x38ca43[_0x18c9d7(0xa56)]-_0x38ca43[_0x18c9d7(0x80e)],_0x38ca43['startMove'](_0x57532d,_0x2caef1,_0x12a196);if(Imported[_0x18c9d7(0x5d1)])_0x38ca43[_0x18c9d7(0x209)](_0x576bf0||'Linear');},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xa02)]=function(_0x4edae0,_0x5808b4,_0x4d1b36,_0x2a247c,_0x471509,_0x22d10a){const _0x18700b=_0x4ca73a;if(!$gameSystem[_0x18700b(0x395)]())return;const _0xa9d766=this[_0x18700b(0x4f6)]();if(!_0xa9d766)return;_0x22d10a=_0x22d10a||0x0;if(_0x22d10a>0x0){if(_0x18700b(0x552)!==_0x18700b(0x5ab)){if(_0xa9d766[_0x18700b(0x9e9)]>_0x4edae0)_0x4edae0+=_0xa9d766[_0x18700b(0x781)]/0x2+_0x22d10a;if(_0xa9d766[_0x18700b(0x9e9)]<_0x4edae0)_0x4edae0-=_0xa9d766[_0x18700b(0x781)]/0x2+_0x22d10a;}else{function _0x1a015a(){const _0x52bc10=_0x18700b;return this[_0x52bc10(0xa72)]()[_0x52bc10(0xac3)](_0x58b566=>_0x58b566[_0x52bc10(0x2cf)]());}}}if(_0x2a247c)this[_0x18700b(0xb93)](_0x4edae0,_0x5808b4,![]);_0x4edae0-=_0xa9d766[_0x18700b(0x716)],_0x5808b4-=_0xa9d766[_0x18700b(0x80e)],_0xa9d766[_0x18700b(0x2ae)](_0x4edae0,_0x5808b4,_0x4d1b36);if(Imported[_0x18700b(0x5d1)])_0xa9d766[_0x18700b(0x209)](_0x471509||_0x18700b(0xb91));},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x88e)]=function(_0x32992d,_0xaeb8f2,_0x1e57b6){const _0x4150ca=_0x4ca73a;if(!$gameSystem[_0x4150ca(0x395)]())return;const _0x1af76c=this[_0x4150ca(0x4f6)]();if(!_0x1af76c)return;_0x1af76c[_0x4150ca(0x212)](_0x32992d,_0xaeb8f2,_0x1e57b6);},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x624)]=function(_0x29f56c,_0x36a037){const _0x58596a=_0x4ca73a;if(!$gameSystem[_0x58596a(0x395)]())return;const _0x182de9=this[_0x58596a(0x4f6)]();if(!_0x182de9)return;_0x182de9[_0x58596a(0x370)](_0x29f56c,_0x36a037);},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xb19)]=function(_0x598a88,_0x2866e7,_0x12e3b2,_0x119f29){const _0xbbd25a=_0x4ca73a;if(!$gameSystem[_0xbbd25a(0x395)]())return;const _0x652f0f=this[_0xbbd25a(0x4f6)]();if(!_0x652f0f)return;_0x652f0f[_0xbbd25a(0x6c9)](_0x598a88,_0x2866e7,_0x12e3b2,_0x119f29);},Game_Battler[_0x4ca73a(0x90a)]['skewBattler']=function(_0x41a095,_0xb473cf,_0x4eb58c,_0x5598d2){const _0x3b495a=_0x4ca73a;if(!$gameSystem[_0x3b495a(0x395)]())return;const _0x5b4880=this[_0x3b495a(0x4f6)]();if(!_0x5b4880)return;if(this[_0x3b495a(0x4bb)]()){if(_0x3b495a(0x8b5)!==_0x3b495a(0x8b5)){function _0x136d30(){const _0x55f2ca=_0x3b495a;_0x48a0c9[_0x55f2ca(0x499)]['createJS'](_0x249da1,_0x16d478);}}else _0x41a095*=-0x1,_0xb473cf*=-0x1;}_0x5b4880['startSkew'](_0x41a095,_0xb473cf,_0x4eb58c,_0x5598d2);},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xa08)]=function(_0x197fda,_0x4d879d,_0x31fb73,_0x59c81b){const _0x49a176=_0x4ca73a;if(!$gameSystem[_0x49a176(0x395)]())return;const _0x305d64=this['battler']();if(!_0x305d64)return;_0x305d64[_0x49a176(0x284)](_0x197fda,_0x4d879d,_0x31fb73,_0x59c81b);},Game_Battler['prototype'][_0x4ca73a(0xa8e)]=function(_0x292b86,_0x719154,_0x226bb3){const _0x16e7d8=_0x4ca73a;if(!$gameSystem[_0x16e7d8(0x395)]())return;const _0x1e8796=this[_0x16e7d8(0x4f6)]();if(!_0x1e8796)return;_0x1e8796[_0x16e7d8(0x461)](_0x292b86,_0x719154,_0x226bb3);},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xa9d)]=function(){const _0x37aad0=_0x4ca73a,_0x1a851c=!!this[_0x37aad0(0x41b)];this[_0x37aad0(0x41b)]=undefined;if(_0x1a851c){if(_0x37aad0(0x67b)===_0x37aad0(0x234)){function _0x3fd7dc(){const _0x110027=_0x37aad0;if(_0x22652c[_0x110027(0x2a6)]())return;if(!_0xb1eada)return;if(!_0x5d4314[_0x110027(0x894)]())return;_0x1531a5[_0x110027(0x499)]['Sprite_Actor_moveToStartPosition'][_0x110027(0x37c)](this);}}else this['requestMotionRefresh'](),this[_0x37aad0(0xad0)]();}},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xad0)]=function(){const _0x2234eb=_0x4ca73a;if(!SceneManager[_0x2234eb(0xb22)]())return;const _0x1e7f1e=this['battler']();if(!_0x1e7f1e)return;let _0x230133=this[_0x2234eb(0x4bb)]()?_0x1e7f1e[_0x2234eb(0xad7)]:_0x1e7f1e[_0x2234eb(0x3ba)][_0x2234eb(0xad7)];if(_0x230133){if(_0x2234eb(0x31e)===_0x2234eb(0x75b)){function _0xf450cf(){const _0x4e6134=_0x2234eb,_0x160717=_0x1781bd[_0x4e6134(0x6b0)],_0x411ae6=_0x4e6134(0x840);this[_0x4e6134(0x459)](_0x160717,_0x411ae6);}}else _0x230133['setup'](0x0);}},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x67f)]=function(_0x218458,_0x39405f,_0x3e59a1){const _0xb58b73=_0x4ca73a;if(this['isEnemy']()&&!this[_0xb58b73(0x804)]())return;let _0x1165b1=0x0,_0x12b8e7=0x0;_0x218458[_0xb58b73(0x2b2)](/ATTACK[ ](\d+)/i)&&(_0x12b8e7=Number(RegExp['$1']),_0x12b8e7--);if(this[_0xb58b73(0x4bb)]()){const _0x55ca84=this[_0xb58b73(0x97a)]();_0x1165b1=_0x55ca84[_0x12b8e7]?_0x55ca84[_0x12b8e7][_0xb58b73(0x872)]:0x0;}else{if(this['isEnemy']()){if('vVuLo'===_0xb58b73(0x70d)){function _0x2590cc(){const _0x270192=_0xb58b73;_0x4840db[_0x270192(0x90a)][_0x270192(0x631)][_0x270192(0x37c)](this);}}else _0x1165b1=this[_0xb58b73(0x5ca)]()['wtypeId']||0x0;}}const _0x3faff2=$dataSystem[_0xb58b73(0x7c7)][_0x1165b1];if(_0x218458['match'](/attack/i)){if(_0xb58b73(0x9b3)!=='sPhFR')_0x218458=['thrust',_0xb58b73(0xb65),_0xb58b73(0x777)][_0x3faff2[_0xb58b73(0x298)]]||_0xb58b73(0xb65);else{function _0x847677(){const _0x4c482a=_0xb58b73;return this['subject']()[_0x4c482a(0x7e3)]();}}}this[_0xb58b73(0x41b)]={'motionType':_0x218458,'weaponImageId':_0x39405f?_0x3faff2['weaponImageId']:0x0,'pattern':_0x3e59a1};},Game_Battler['prototype'][_0x4ca73a(0x4f3)]=function(_0x1fcfc5){const _0x3a2713=_0x4ca73a;if(!_0x1fcfc5)return![];return _0x1fcfc5['friendsUnit']()===this[_0x3a2713(0x512)]();},Game_Battler['prototype'][_0x4ca73a(0x3b8)]=function(_0x279645){const _0x3aa620=_0x4ca73a;if(!_0x279645)return![];return _0x279645[_0x3aa620(0x99c)]()===this[_0x3aa620(0x512)]();},VisuMZ[_0x4ca73a(0x499)]['Game_Actor_setup']=Game_Actor[_0x4ca73a(0x90a)]['setup'],Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x584)]=function(_0x56faae){const _0x25e2a5=_0x4ca73a;VisuMZ['BattleCore']['Game_Actor_setup'][_0x25e2a5(0x37c)](this,_0x56faae),this['initBattlePortrait']();},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x8d7)]=function(){const _0x34643d=_0x4ca73a;this['_battlePortrait']='',this[_0x34643d(0xb16)]()&&this[_0x34643d(0xb16)]()['note'][_0x34643d(0x2b2)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor['prototype'][_0x4ca73a(0x343)]=function(){const _0x436bd2=_0x4ca73a;if(this['getBattlePortrait']()!==''){if(_0x436bd2(0x744)!==_0x436bd2(0x744)){function _0x7b73a0(){const _0x12a4b8=_0x436bd2;_0x3bd106[_0x12a4b8(0x1ee)](_0xdaefb(_0x6289c8['$1']));}}else return this[_0x436bd2(0xacf)]();}else{if(Imported['VisuMZ_1_MainMenuCore']&&this['getMenuImage']()!=='')return this[_0x436bd2(0xb1c)]();}return'';},Game_Actor['prototype'][_0x4ca73a(0xacf)]=function(){const _0x30db46=_0x4ca73a;if(this['_battlePortrait']===undefined)this['initBattlePortrait']();return this[_0x30db46(0x711)];},Game_Actor['prototype'][_0x4ca73a(0x427)]=function(_0x2625ae){const _0x1dd8ed=_0x4ca73a;if(this[_0x1dd8ed(0x711)]===undefined)this['initBattlePortrait']();this['_battlePortrait']=_0x2625ae;if(SceneManager['isSceneBattle']()&&$gameParty['battleMembers']()['includes'](this)){if(_0x1dd8ed(0x80c)!==_0x1dd8ed(0x80c)){function _0x3b9fe5(){const _0x36b0d7=_0x1dd8ed;if(!this[_0x36b0d7(0x40b)])return;if(!_0x243ab8)return;if(!_0x315143)return;const _0x8f9195=this['itemRect'](_0x23acac['index']());_0x8f9195['x']+=_0x8f9195[_0x36b0d7(0x781)]/0x2+this[_0x36b0d7(0x949)],_0xc29d['x']=_0x8f9195['x'],_0x36536c['y']=_0x8f9195['y'],this[_0x36b0d7(0x40b)]['addChild'](_0x5a9eb4);}}else{const _0x3b40bf=SceneManager[_0x1dd8ed(0x612)]['_statusWindow'];if(_0x3b40bf)_0x3b40bf[_0x1dd8ed(0x7f7)](this);}}},Game_Actor['prototype'][_0x4ca73a(0x3b9)]=function(){return!![];},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x1f9)]=function(){const _0xd47b9=_0x4ca73a;if(!this[_0xd47b9(0x1db)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0xd47b9(0x90a)][_0xd47b9(0x1f9)][_0xd47b9(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x1c6)]=Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x7cc)],Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x7cc)]=function(){const _0x19c6ea=_0x4ca73a;if(BattleManager[_0x19c6ea(0x65d)]&&!ConfigManager[_0x19c6ea(0x840)])return this[_0x19c6ea(0x2e4)]();else{return VisuMZ[_0x19c6ea(0x499)][_0x19c6ea(0x1c6)][_0x19c6ea(0x37c)](this);;}},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x2e4)]=function(){const _0x32f1db=_0x4ca73a,_0x4d6b28=[],_0x147595=new Game_Action(this);return _0x147595[_0x32f1db(0x22f)](),_0x4d6b28['push'](_0x147595),_0x4d6b28;},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x550)]=function(){const _0x42f701=_0x4ca73a;if(this[_0x42f701(0x222)]()[_0x42f701(0xaa8)][_0x42f701(0x2b2)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i))return String(RegExp['$1'])['split'](/[\r\n]+/);else{if(_0x42f701(0x2c7)===_0x42f701(0x2c7))return VisuMZ['BattleCore']['Settings'][_0x42f701(0x7f4)][_0x42f701(0x1e7)];else{function _0x39277a(){const _0x3f3b15=_0x42f701;this[_0x3f3b15(0x502)]='xp';}}}},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x325)]=function(){const _0x752dd8=_0x4ca73a;if(this[_0x752dd8(0x473)][_0x752dd8(0x89b)]!==undefined)return this[_0x752dd8(0x473)][_0x752dd8(0x89b)];return this[_0x752dd8(0xb16)]()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x752dd8(0x473)]['svAnchorX']=eval(RegExp['$1']),this[_0x752dd8(0x473)][_0x752dd8(0x515)]=eval(RegExp['$2'])):this[_0x752dd8(0x473)][_0x752dd8(0x89b)]=Game_Battler[_0x752dd8(0x90a)][_0x752dd8(0x325)][_0x752dd8(0x37c)](this),this[_0x752dd8(0x473)][_0x752dd8(0x89b)];},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x9bd)]=function(){const _0x39b633=_0x4ca73a;if(this[_0x39b633(0x473)][_0x39b633(0x515)]!==undefined)return this[_0x39b633(0x473)][_0x39b633(0x515)];if(this[_0x39b633(0xb16)]()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x39b633(0x4a9)==='EQqQP'){function _0x256cfa(){const _0x59f0f4=_0x39b633;_0x27632d['BattleCore'][_0x59f0f4(0x4ca)][_0x59f0f4(0x37c)](this,_0x1f6ef9),this[_0x59f0f4(0x1eb)]();}}else this[_0x39b633(0x473)][_0x39b633(0x89b)]=eval(RegExp['$1']),this[_0x39b633(0x473)][_0x39b633(0x515)]=eval(RegExp['$2']);}else{if(_0x39b633(0x9ab)!=='rusWc')this['_cache'][_0x39b633(0x515)]=Game_Battler['prototype'][_0x39b633(0x9bd)][_0x39b633(0x37c)](this);else{function _0x1cd8ba(){const _0x54190c=_0x39b633;_0x1254ca=_0x3030b1[_0x54190c(0x9a1)];}}}return this[_0x39b633(0x473)][_0x39b633(0x515)];},Game_Actor[_0x4ca73a(0x90a)]['svBattlerShadowVisible']=function(){const _0x1b3d9a=_0x4ca73a;if(this[_0x1b3d9a(0x473)][_0x1b3d9a(0x8e7)]!==undefined)return this[_0x1b3d9a(0x473)][_0x1b3d9a(0x8e7)];if(this[_0x1b3d9a(0xb16)]()[_0x1b3d9a(0xaa8)][_0x1b3d9a(0x2b2)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x1b3d9a(0x473)][_0x1b3d9a(0x8e7)]=!![];else{if(this['actor']()[_0x1b3d9a(0xaa8)]['match'](/<SIDEVIEW HIDE SHADOW>/i))this['_cache'][_0x1b3d9a(0x8e7)]=![];else{if(_0x1b3d9a(0x304)==='mDrgk')this[_0x1b3d9a(0x473)][_0x1b3d9a(0x8e7)]=Game_Battler[_0x1b3d9a(0x90a)]['svBattlerShadowVisible'][_0x1b3d9a(0x37c)](this);else{function _0x49c648(){const _0x453e8f=_0x1b3d9a;this[_0x453e8f(0x9a0)]=this[_0x453e8f(0x9a0)]||[];}}}}return this['_cache'][_0x1b3d9a(0x8e7)];},Game_Actor[_0x4ca73a(0x90a)]['battlerSmoothImage']=function(){const _0x4f97d4=_0x4ca73a;return VisuMZ[_0x4f97d4(0x499)][_0x4f97d4(0x800)][_0x4f97d4(0x4e4)][_0x4f97d4(0x994)];},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x92d)]=function(){const _0x43a65f=_0x4ca73a,_0x5d7a4d=this[_0x43a65f(0x97a)](),_0x1accea=_0x5d7a4d[0x0]?_0x5d7a4d[0x0][_0x43a65f(0x872)]:0x0,_0x39202a=$dataSystem[_0x43a65f(0x7c7)][_0x1accea];_0x39202a&&this['startWeaponAnimation'](_0x39202a[_0x43a65f(0x8ea)]);},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x3d9)]=function(_0x10b47d){const _0x103e9e=_0x4ca73a;Game_Battler['prototype']['performAction']['call'](this,_0x10b47d),this[_0x103e9e(0x9fc)](_0x10b47d);},Game_Actor['prototype'][_0x4ca73a(0xb55)]=function(){const _0x2cdf44=_0x4ca73a,_0x52fc92=this[_0x2cdf44(0x97a)](),_0x4593ee=_0x52fc92[0x0]?_0x52fc92[0x0][_0x2cdf44(0x872)]:0x0;return $dataSystem[_0x2cdf44(0x7c7)][_0x4593ee];},Game_Actor['prototype']['attackAnimationIdSlot']=function(_0x1afc4b){const _0x2299e5=_0x4ca73a;_0x1afc4b=_0x1afc4b||0x1,_0x1afc4b--;const _0x1d64f1=this[_0x2299e5(0x97a)]();return _0x1d64f1[_0x1afc4b]?_0x1d64f1[_0x1afc4b]['animationId']:0x0;},Game_Actor[_0x4ca73a(0x90a)]['getAttackMotionSlot']=function(_0x29ecaf){const _0x1732aa=_0x4ca73a;_0x29ecaf=_0x29ecaf||0x1,_0x29ecaf--;const _0x4103a1=this[_0x1732aa(0x97a)](),_0xadb08a=_0x4103a1[_0x29ecaf]?_0x4103a1[_0x29ecaf][_0x1732aa(0x872)]:0x0;return $dataSystem[_0x1732aa(0x7c7)][_0xadb08a];},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x846)]=function(_0x1cb59a){const _0x2c8e76=_0x4ca73a;_0x1cb59a=_0x1cb59a||0x1,_0x1cb59a--;const _0x3fd551=this[_0x2c8e76(0x97a)](),_0x446899=_0x3fd551[_0x1cb59a]?_0x3fd551[_0x1cb59a][_0x2c8e76(0x872)]:0x0,_0x168fd8=$dataSystem[_0x2c8e76(0x7c7)][_0x446899];if(_0x168fd8){if(_0x168fd8[_0x2c8e76(0x298)]===0x0)this['requestMotion']('thrust');else{if(_0x168fd8['type']===0x1){if(_0x2c8e76(0x834)!==_0x2c8e76(0x834)){function _0xbbb3a6(){const _0x4551be=_0x2c8e76;_0xc26df0[_0x4551be(0x404)]();}}else this[_0x2c8e76(0x3b7)]('swing');}else _0x168fd8[_0x2c8e76(0x298)]===0x2&&this[_0x2c8e76(0x3b7)](_0x2c8e76(0x777));}this[_0x2c8e76(0x1f1)](_0x168fd8[_0x2c8e76(0x8ea)]);}},Game_Battler[_0x4ca73a(0x90a)]['setActiveWeaponSlot']=function(_0x305a70){const _0x2d7e07=_0x4ca73a;this[_0x2d7e07(0x59b)]=_0x305a70||0x0;},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x41e)]=function(){const _0x4e48f4=_0x4ca73a;this[_0x4e48f4(0x59b)]=this[_0x4e48f4(0x59b)]||0x0,this[_0x4e48f4(0x59b)]++;},Game_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x8d8)]=function(){this['_activeWeaponSlot']=undefined;},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xb1e)]=Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x694)],Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x694)]=function(){const _0x853029=_0x4ca73a;let _0x19f094=VisuMZ[_0x853029(0x499)]['Game_Actor_equips']['call'](this);if(this[_0x853029(0x78a)])return _0x19f094;if(this[_0x853029(0x59b)]!==undefined){if(_0x853029(0x312)===_0x853029(0x62c)){function _0x15e42a(){this['refreshMotion']();}}else{this[_0x853029(0x78a)]=!![];const _0x44aa3c=this['equipSlots']();for(let _0x480681=0x0;_0x480681<_0x44aa3c[_0x853029(0x73b)];_0x480681++){if(_0x853029(0x5b7)!==_0x853029(0x5b7)){function _0x5c7220(){const _0xc7609b=_0x853029;this[_0xc7609b(0x7f2)]=!this[_0xc7609b(0x911)][_0xc7609b(0x55f)](),!this[_0xc7609b(0x7f2)]&&(this['opacity']=0x0);}}else{if(_0x44aa3c[_0x480681]===0x1&&this[_0x853029(0x59b)]!==_0x480681){if(_0x853029(0x341)!==_0x853029(0x341)){function _0x491934(){return 0xa;}}else _0x19f094[_0x480681]=null;}}}this[_0x853029(0x78a)]=undefined;}}return _0x19f094;},Window_BattleLog[_0x4ca73a(0x90a)]['getDualWieldTimes']=function(_0x2afe20){const _0xf04a7b=_0x4ca73a;if(_0x2afe20['isActor']()){if(_0xf04a7b(0x5bf)===_0xf04a7b(0x469)){function _0x30c90e(){const _0x59b75d=_0xf04a7b;_0x49e3f4[_0x59b75d(0x90a)]['initMembers']['call'](this),this[_0x59b75d(0x3bd)]=0x0,this[_0x59b75d(0x636)]=null,this['anchor']['x']=0.5,this['anchor']['y']=0x0;}}else return _0x2afe20['weapons']()[_0xf04a7b(0x73b)]||0x1;}else return 0x1;},Window_BattleLog[_0x4ca73a(0x90a)]['setActiveWeaponSet']=function(_0x1f9e83,_0x478e05){const _0x4687ea=_0x4ca73a;_0x1f9e83&&_0x1f9e83[_0x4687ea(0x4bb)]()&&_0x1f9e83['setActiveWeaponSlot'](_0x478e05),this[_0x4687ea(0x1eb)]();},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x22c)]=function(_0x2db02a){const _0xf6cd44=_0x4ca73a;_0x2db02a&&_0x2db02a['isActor']()&&_0x2db02a[_0xf6cd44(0x8d8)](),this[_0xf6cd44(0x1eb)]();},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0xa09)]=function(){const _0x31de37=_0x4ca73a;let _0x414f53=_0x31de37(0xa09);if(this[_0x31de37(0x93f)](_0x414f53))return this[_0x31de37(0x473)][_0x414f53];return this[_0x31de37(0x473)][_0x414f53]=this[_0x31de37(0x786)](this[_0x31de37(0xb16)]()),this[_0x31de37(0x473)][_0x414f53];},Game_Actor[_0x4ca73a(0x90a)]['battleUIOffsetY']=function(){const _0x2c26d8=_0x4ca73a;let _0x3cc8f7=_0x2c26d8(0x21d);if(this[_0x2c26d8(0x93f)](_0x3cc8f7))return this[_0x2c26d8(0x473)][_0x3cc8f7];return this[_0x2c26d8(0x473)][_0x3cc8f7]=this[_0x2c26d8(0x229)](this[_0x2c26d8(0xb16)]()),this[_0x2c26d8(0x473)][_0x3cc8f7];},VisuMZ[_0x4ca73a(0x499)]['Game_Enemy_setup']=Game_Enemy[_0x4ca73a(0x90a)]['setup'],Game_Enemy[_0x4ca73a(0x90a)]['setup']=function(_0x241c97,_0x10fecf,_0x2c9aa1){const _0x1c4e2b=_0x4ca73a;_0x241c97=DataManager[_0x1c4e2b(0x5b6)](_0x241c97),VisuMZ[_0x1c4e2b(0x499)][_0x1c4e2b(0xb84)]['call'](this,_0x241c97,_0x10fecf,_0x2c9aa1),Imported[_0x1c4e2b(0x3d6)]&&this['initElementStatusCore'](),this[_0x1c4e2b(0xaa5)](),this[_0x1c4e2b(0x36a)](),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x1c4e2b(0xa81)]();},Game_Enemy[_0x4ca73a(0x90a)]['clearBattleCoreData']=function(){const _0x2bc4d9=_0x4ca73a,_0x5a77a4=VisuMZ[_0x2bc4d9(0x499)][_0x2bc4d9(0x800)][_0x2bc4d9(0xa94)];this[_0x2bc4d9(0x7c0)]=_0x5a77a4[_0x2bc4d9(0x3d2)],this[_0x2bc4d9(0xb5d)]={};},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x36a)]=function(){const _0x9ddedc=_0x4ca73a,_0x104629=VisuMZ['BattleCore'][_0x9ddedc(0x800)]['Enemy'],_0xa770ac=this['enemy']()[_0x9ddedc(0xaa8)];this['_svBattlerData']={'name':'','wtypeId':_0x104629[_0x9ddedc(0x62e)],'collapse':_0x104629['AllowCollapse'],'motionIdle':_0x104629[_0x9ddedc(0xb03)],'width':_0x104629[_0x9ddedc(0x41a)]||0x40,'height':_0x104629[_0x9ddedc(0xa34)]||0x40,'anchorX':_0x104629[_0x9ddedc(0x699)]||0x0,'anchorY':_0x104629[_0x9ddedc(0x1a2)]||0x0,'shadow':_0x104629['Shadow']};if(_0xa770ac[_0x9ddedc(0x2b2)](/<ATTACK ANIMATION:[ ](\d+)>/i)){if('ZaxeL'!==_0x9ddedc(0x9e4)){function _0x2ec46a(){const _0x528fd1=_0x9ddedc;this[_0x528fd1(0x4a1)]=!![];}}else this[_0x9ddedc(0x7c0)]=Number(RegExp['$1']);}const _0x1b16f3=this[_0x9ddedc(0xb5d)];if(_0xa770ac['match'](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x9ddedc(0xabb)===_0x9ddedc(0xabb))_0x1b16f3[_0x9ddedc(0x491)]=String(RegExp['$1']);else{function _0x3edf6f(){const _0x35f780=_0x2c3c55(_0x70df18['$1']);return[_0x27c0b9['members']()[_0x35f780]];}}}else{if(_0xa770ac[_0x9ddedc(0x2b2)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x38bdb3=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x1b16f3[_0x9ddedc(0x491)]=DataManager[_0x9ddedc(0x903)](_0x38bdb3);}}_0xa770ac[_0x9ddedc(0x2b2)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x1b16f3['anchorX']=eval(RegExp['$1']),_0x1b16f3[_0x9ddedc(0x1f4)]=eval(RegExp['$2']));if(_0xa770ac[_0x9ddedc(0x2b2)](/<SIDEVIEW COLLAPSE>/i)){if('DtQJb'!==_0x9ddedc(0xb87)){function _0x5cc794(){const _0x4663cf=_0x9ddedc,_0x1249ef=new _0x59b107();_0x1249ef[_0x4663cf(0xa74)]=_0x22c348['loadSystem'](_0x299a2a[_0x4663cf(0x56b)]),_0x1249ef['x']=_0x2149c2[_0x4663cf(0x9cc)]||0x0,_0x1249ef['y']=_0x677f25[_0x4663cf(0x659)]||0x0,this[_0x4663cf(0x5ac)](_0x1249ef),this[_0x4663cf(0x23c)]=_0x1249ef;}}else _0x1b16f3[_0x9ddedc(0x727)]=!![];}else _0xa770ac[_0x9ddedc(0x2b2)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x1b16f3['collapse']=![]);if(_0xa770ac['match'](/<SIDEVIEW SHOW SHADOW>/i)){if('xmPxR'!==_0x9ddedc(0x3b6)){function _0xc76973(){const _0x35c19f=_0x9ddedc;let _0x32cd87=_0x38f4a1['BattleCore'][_0x35c19f(0x9b9)][_0x35c19f(0x37c)](this,_0x389409);return _0x32cd87=this[_0x35c19f(0x78b)][_0x35c19f(0x228)]*_0x32cd87+this[_0x35c19f(0x78b)][_0x35c19f(0x529)],_0x32cd87;}}else _0x1b16f3[_0x9ddedc(0x943)]=!![];}else _0xa770ac[_0x9ddedc(0x2b2)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x1b16f3[_0x9ddedc(0x943)]=![]);if(_0xa770ac[_0x9ddedc(0x2b2)](/<SIDEVIEW IDLE MOTION: (.*)>/i)){if(_0x9ddedc(0x821)===_0x9ddedc(0x1dd)){function _0x799fb9(){return this['command301_PreBattleEvent'](_0x3975c0);}}else _0x1b16f3[_0x9ddedc(0x358)]=String(RegExp['$1'])[_0x9ddedc(0x3c1)]()[_0x9ddedc(0x7d2)]();}else{if(_0xa770ac[_0x9ddedc(0x2b2)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x2498ae=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x1b16f3[_0x9ddedc(0x358)]=DataManager['processRandomizedData'](_0x2498ae);}}if(_0xa770ac[_0x9ddedc(0x2b2)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)){if(_0x9ddedc(0x93b)!==_0x9ddedc(0x93b)){function _0x3ae548(){const _0x4d5aca=_0x9ddedc;return _0x152528[_0x4d5aca(0x499)]['Settings'][_0x4d5aca(0x1b8)][_0x4d5aca(0x8ca)]['call'](this,_0x46f185,_0x52badc);}}else _0x1b16f3[_0x9ddedc(0x781)]=Number(RegExp['$1']),_0x1b16f3['height']=Number(RegExp['$2']);}if(_0xa770ac[_0x9ddedc(0x2b2)](/<SIDEVIEW WEAPON: (.*)>/i)){if(_0x9ddedc(0x683)!==_0x9ddedc(0x683)){function _0x365e8a(){const _0x463cbc=_0x9ddedc;_0x110145[_0x463cbc(0x3b7)](_0x4c43b5);}}else _0x1b16f3[_0x9ddedc(0x872)]=DataManager['getWtypeIdWithName'](RegExp['$1']);}else{if(_0xa770ac[_0x9ddedc(0x2b2)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x9ddedc(0x670)!==_0x9ddedc(0x670)){function _0x5827cf(){const _0x5a4b51=_0x9ddedc;this[_0x5a4b51(0x711)]=_0x5ab6e4(_0x47128e['$1']);}}else{const _0x58405e=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x9ddedc(0x942)](''),_0x5c2fc4=DataManager[_0x9ddedc(0x903)](_0x58405e);_0x1b16f3[_0x9ddedc(0x872)]=DataManager[_0x9ddedc(0x306)](_0x5c2fc4);}}}if(Imported[_0x9ddedc(0x3d6)]){const _0x412a3a=this[_0x9ddedc(0xa40)]();for(const _0x5e80d6 of _0x412a3a){const _0x4133c5=this[_0x9ddedc(0x385)](_0x5e80d6)[_0x9ddedc(0x9c0)]['toUpperCase']()[_0x9ddedc(0x7d2)](),_0x562cd9=_0x5e80d6[_0x9ddedc(0x941)]()[_0x9ddedc(0x7d2)]();if(_0xa770ac[_0x9ddedc(0x2b2)](VisuMZ['ElementStatusCore']['RegExp'][_0x9ddedc(0x61d)[_0x9ddedc(0x26f)](_0x562cd9,_0x4133c5)])){if('RwWTZ'===_0x9ddedc(0x1ba)){function _0x294ac7(){const _0x29bbca=_0x9ddedc;_0xcf6f3a[_0x29bbca(0x3d5)](_0x5e9e37);}}else _0x1b16f3[_0x9ddedc(0x491)]=String(RegExp['$1']);}else{if(_0xa770ac[_0x9ddedc(0x2b2)](VisuMZ['ElementStatusCore'][_0x9ddedc(0xa00)][_0x9ddedc(0x5e4)[_0x9ddedc(0x26f)](_0x562cd9,_0x4133c5)])){if(_0x9ddedc(0x202)==='vYLnl'){function _0x385823(){const _0xed592b=_0x9ddedc;this[_0xed592b(0x352)]['push'](_0x54b337);}}else{const _0x33012f=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x1b16f3[_0x9ddedc(0x491)]=DataManager[_0x9ddedc(0x903)](_0x33012f);}}}if(_0xa770ac['match'](VisuMZ[_0x9ddedc(0x6ef)][_0x9ddedc(0xa00)][_0x9ddedc(0x6ad)[_0x9ddedc(0x26f)](_0x562cd9,_0x4133c5)]))_0x1b16f3[_0x9ddedc(0x872)]=DataManager[_0x9ddedc(0x306)](RegExp['$1']);else{if(_0xa770ac[_0x9ddedc(0x2b2)](VisuMZ[_0x9ddedc(0x6ef)]['RegExp']['SvWeaponMass-%1-%2'[_0x9ddedc(0x26f)](_0x562cd9,_0x4133c5)])){const _0x2031d4=String(RegExp['$1'])[_0x9ddedc(0x2fb)](/[\r\n]+/)[_0x9ddedc(0x942)](''),_0x58d080=DataManager[_0x9ddedc(0x903)](_0x2031d4);_0x1b16f3['wtypeId']=DataManager['getWtypeIdWithName'](_0x58d080);}}if(_0xa770ac[_0x9ddedc(0x2b2)](VisuMZ[_0x9ddedc(0x6ef)]['RegExp'][_0x9ddedc(0xa9e)[_0x9ddedc(0x26f)](_0x562cd9,_0x4133c5)]))_0x1b16f3[_0x9ddedc(0x358)]=String(RegExp['$1'])[_0x9ddedc(0x3c1)]()[_0x9ddedc(0x7d2)]();else{if(_0xa770ac['match'](VisuMZ[_0x9ddedc(0x6ef)][_0x9ddedc(0xa00)]['SvMotionIdleMass-%1-%2'['format'](_0x562cd9,_0x4133c5)])){const _0x166040=String(RegExp['$1'])[_0x9ddedc(0x2fb)](/[\r\n]+/)[_0x9ddedc(0x942)]('');_0x1b16f3[_0x9ddedc(0x358)]=DataManager[_0x9ddedc(0x903)](_0x166040);}}}}},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x86e)]=function(){const _0x511be6=_0x4ca73a;return this[_0x511be6(0x7c0)]||0x0;},Game_Enemy[_0x4ca73a(0x90a)]['attackAnimationId2']=function(){const _0x4e20f6=_0x4ca73a;return this[_0x4e20f6(0x86e)]();},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x3aa)]=function(_0x5b1ba5){const _0x19958b=_0x4ca73a;return this[_0x19958b(0x86e)]();},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xa99)]=function(){const _0x342007=_0x4ca73a;if(this[_0x342007(0xa68)]()[_0x342007(0xaa8)][_0x342007(0x2b2)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x342007(0x90a)][_0x342007(0xa99)][_0x342007(0x37c)](this);},Game_Enemy[_0x4ca73a(0x90a)]['isBattlerGrounded']=function(){const _0x28aaec=_0x4ca73a;if(this[_0x28aaec(0xa68)]()[_0x28aaec(0xaa8)][_0x28aaec(0x2b2)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype'][_0x4ca73a(0x5c4)]=function(){const _0x41bb72=_0x4ca73a,_0xe264ab=[];for(const _0x51d2a0 of this['enemy']()['actions']){const _0x263358=$dataSkills[_0x51d2a0[_0x41bb72(0x990)]];if(_0x263358&&!_0xe264ab[_0x41bb72(0x93d)](_0x263358))_0xe264ab[_0x41bb72(0x1ee)](_0x263358);}return _0xe264ab;},Game_Enemy['prototype'][_0x4ca73a(0xa09)]=function(){const _0x4354d5=_0x4ca73a;let _0xdfbc59=_0x4354d5(0xa09);if(this[_0x4354d5(0x93f)](_0xdfbc59))return this[_0x4354d5(0x473)][_0xdfbc59];return this['_cache'][_0xdfbc59]=this['createBattleUIOffsetX'](this['enemy']()),this[_0x4354d5(0x473)][_0xdfbc59];},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x21d)]=function(){const _0x18fd01=_0x4ca73a;let _0x1947a6='battleUIOffsetY';if(this['checkCacheKey'](_0x1947a6))return this[_0x18fd01(0x473)][_0x1947a6];return this[_0x18fd01(0x473)][_0x1947a6]=this[_0x18fd01(0x229)](this[_0x18fd01(0xa68)]()),this[_0x18fd01(0x473)][_0x1947a6];},Game_Enemy[_0x4ca73a(0x90a)]['svBattlerData']=function(){const _0x58bc2b=_0x4ca73a;if(this[_0x58bc2b(0xb5d)]!==undefined)return this[_0x58bc2b(0xb5d)];return this['setupBattleCoreData'](),this[_0x58bc2b(0xb5d)];},Game_Enemy['prototype'][_0x4ca73a(0x804)]=function(){const _0x3cc5da=_0x4ca73a;return this[_0x3cc5da(0x5ca)]()[_0x3cc5da(0x491)]!=='';},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xaec)]=function(){const _0xbdedd4=_0x4ca73a;return this['svBattlerData']()[_0xbdedd4(0x491)];},Game_Enemy['prototype'][_0x4ca73a(0x8e4)]=function(){const _0x221db5=_0x4ca73a;return this[_0x221db5(0x804)]()?VisuMZ[_0x221db5(0x499)][_0x221db5(0x800)][_0x221db5(0x4e4)][_0x221db5(0x994)]:VisuMZ['BattleCore']['Settings']['Enemy']['SmoothImage'];},Game_Enemy['prototype'][_0x4ca73a(0x3d9)]=function(_0x559068){const _0x38a538=_0x4ca73a;Game_Battler[_0x38a538(0x90a)]['performAction'][_0x38a538(0x37c)](this,_0x559068);if(this[_0x38a538(0x804)]())this[_0x38a538(0x9fc)](_0x559068);},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x404)]=function(){const _0x4684f9=_0x4ca73a,_0x57027d=this[_0x4684f9(0x5ca)]()[_0x4684f9(0x872)]||0x0,_0x469dec=$dataSystem[_0x4684f9(0x7c7)][_0x57027d];if(_0x469dec){if(_0x4684f9(0x7a5)!=='vfpBJ'){function _0x2725b4(){const _0x31b1fb=_0x4684f9;_0x2d8117[_0x31b1fb(0x90a)][_0x31b1fb(0x5d2)][_0x31b1fb(0x37c)](this);const _0x48f643=this[_0x31b1fb(0xa10)]()||this;if(!_0x48f643)return;!_0x48f643['bitmap']&&(_0x48f643[_0x31b1fb(0xa74)]=new _0x3cdffc(this['width'],this[_0x31b1fb(0x38c)])),this[_0x31b1fb(0x7c3)]===_0x31b1fb(0x462)?this[_0x31b1fb(0x286)]['setFrame'](0x0,0x0,this['_mainSprite'][_0x31b1fb(0x781)],this[_0x31b1fb(0x396)]):_0x48f643[_0x31b1fb(0x6c8)](0x0,0x0,_0x48f643[_0x31b1fb(0xa74)]['width'],this['bitmap']['height']);}}else{if(_0x469dec[_0x4684f9(0x298)]===0x0){if('peSCj'==='zNFjz'){function _0x7cca4b(){const _0x4a9cbd=_0x4684f9;this[_0x4a9cbd(0x7b3)]=!![],this[_0x4a9cbd(0x65d)]=![],this[_0x4a9cbd(0x2fd)](_0x4a9cbd(0x267)),_0x4a8efa[_0x4a9cbd(0x499)][_0x4a9cbd(0x65c)][_0x4a9cbd(0x37c)](this,_0x4554cf),this[_0x4a9cbd(0x2fd)](_0x4a9cbd(0x2d6));}}else this[_0x4684f9(0x3b7)](_0x4684f9(0x677));}else{if(_0x469dec[_0x4684f9(0x298)]===0x1)this[_0x4684f9(0x3b7)](_0x4684f9(0xb65));else{if(_0x469dec[_0x4684f9(0x298)]===0x2){if(_0x4684f9(0xb5c)!==_0x4684f9(0xb5c)){function _0x2f1e53(){const _0x12baa3=_0x4684f9;return this[_0x12baa3(0x8d2)]||this[_0x12baa3(0x286)]||this;}}else this[_0x4684f9(0x3b7)](_0x4684f9(0x777));}}}}}},Game_Enemy[_0x4ca73a(0x90a)]['performWeaponAnimation']=function(){const _0x54e5d7=_0x4ca73a,_0x59e7b0=this[_0x54e5d7(0x5ca)]()['wtypeId']||0x0,_0x5b6ded=$dataSystem[_0x54e5d7(0x7c7)][_0x59e7b0];if(_0x5b6ded){if(_0x54e5d7(0xa1f)===_0x54e5d7(0x8c5)){function _0x284140(){const _0x3dc5da=_0x54e5d7;this['commandName'](_0x3b30af)[_0x3dc5da(0x2b2)](/\\I\[(\d+)\]/i);const _0x52df41=_0x2e5098(_0x328740['$1'])||0x0,_0x1fc534=this[_0x3dc5da(0x310)](_0x24533f),_0xf5bea5=_0x1fc534['x']+_0x291938[_0x3dc5da(0x3d7)]((_0x1fc534[_0x3dc5da(0x781)]-_0x9548c['iconWidth'])/0x2),_0x2fbfe0=_0x1fc534['y']+(_0x1fc534[_0x3dc5da(0x38c)]-_0x3012c5[_0x3dc5da(0x449)])/0x2;this['drawIcon'](_0x52df41,_0xf5bea5,_0x2fbfe0);}}else this['startWeaponAnimation'](_0x5b6ded[_0x54e5d7(0x8ea)]);}},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xb55)]=function(){const _0x53fa77=_0x4ca73a,_0x18ff50=this['svBattlerData']()[_0x53fa77(0x872)]||0x0;return $dataSystem[_0x53fa77(0x7c7)][_0x18ff50];},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x20a)]=function(_0x1d2a6f){const _0x19df5c=_0x4ca73a;return this[_0x19df5c(0xb55)]();},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x662)]=function(){const _0x5dea28=_0x4ca73a;Game_Battler[_0x5dea28(0x90a)][_0x5dea28(0x662)][_0x5dea28(0x37c)](this);if(this['isSpriteVisible']()&&this[_0x5dea28(0x804)]()){if('seCTS'!==_0x5dea28(0x66d)){function _0xe780e7(){const _0x211d80=_0x5dea28;return this['_actionBattlers'][_0x211d80(0x6b6)]();}}else this[_0x5dea28(0x3b7)](_0x5dea28(0x2e7));}SoundManager[_0x5dea28(0x2a5)]();},Game_Enemy['prototype']['performEvasion']=function(){const _0x5c8aae=_0x4ca73a;Game_Battler[_0x5c8aae(0x90a)]['performEvasion'][_0x5c8aae(0x37c)](this),this[_0x5c8aae(0x3b7)](_0x5c8aae(0xa0c));},Game_Enemy['prototype'][_0x4ca73a(0x2db)]=function(){const _0x295502=_0x4ca73a;Game_Battler[_0x295502(0x90a)]['performMagicEvasion']['call'](this),this['requestMotion'](_0x295502(0xa0c));},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x4a8)]=function(){const _0x28f121=_0x4ca73a;Game_Battler['prototype'][_0x28f121(0x4a8)][_0x28f121(0x37c)](this),this[_0x28f121(0x404)]();},Game_Enemy[_0x4ca73a(0x90a)]['allowCollapse']=function(){const _0x4e4473=_0x4ca73a;if(this[_0x4e4473(0x804)]()){if(_0x4e4473(0x70c)===_0x4e4473(0x1cf)){function _0x455a10(){const _0x36da05=_0x4e4473;return _0x58338b['VisuMZ_0_CoreEngine']?_0x2e049f[_0x36da05(0xa59)](_0x36da05(0x945)):_0x535e21[_0x36da05(0x499)][_0x36da05(0x800)][_0x36da05(0x4f8)][_0x36da05(0x48a)];}}else{if(this[_0x4e4473(0xad2)]()>=0x1)return!![];return this[_0x4e4473(0x5ca)]()['collapse'];}}else{if(_0x4e4473(0x5a9)!==_0x4e4473(0x5a9)){function _0x3b057a(){const _0x5edc86=_0x4e4473;_0x3cd6ad['item']()[_0x5edc86(0x2e7)][_0x5edc86(0x298)]>0x0?this['performAttack']():this[_0x5edc86(0x3b7)](_0x5edc86(0x500));}}else return!![];}},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x325)]=function(){const _0x15ca81=_0x4ca73a;return this[_0x15ca81(0x5ca)]()[_0x15ca81(0x457)];},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x9bd)]=function(){const _0x29284a=_0x4ca73a;return this[_0x29284a(0x5ca)]()[_0x29284a(0x1f4)];},Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x778)]=function(){return this['svBattlerData']()['shadow'];},VisuMZ[_0x4ca73a(0x499)]['Game_Enemy_transform']=Game_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x24c)],Game_Enemy[_0x4ca73a(0x90a)]['transform']=function(_0xb9ef5){const _0x44d17b=_0x4ca73a;VisuMZ[_0x44d17b(0x499)][_0x44d17b(0x297)][_0x44d17b(0x37c)](this,_0xb9ef5),this[_0x44d17b(0xaa5)](),this[_0x44d17b(0x36a)]();const _0x581044=this[_0x44d17b(0x4f6)]();if(_0x581044)_0x581044[_0x44d17b(0x59c)](this);},Game_Unit['prototype'][_0x4ca73a(0x2fd)]=function(_0x3aa51e){const _0x248d47=_0x4ca73a;for(const _0x8019f7 of this['members']()){if(_0x248d47(0x428)!=='IPvgc'){function _0x302463(){const _0x338890=_0x248d47;if(this[_0x338890(0x9de)]<=0x0)return;if(!this[_0x338890(0x8d2)])return;const _0x40803a=this[_0x338890(0x9de)],_0x207005=this[_0x338890(0x7db)],_0x48679b=this[_0x338890(0x38e)],_0x4d9dad=this[_0x338890(0x8d2)];_0x521dec[_0x338890(0x5d1)]?(_0x4d9dad[_0x338890(0x6b9)]['x']=this[_0x338890(0x7e7)](_0x4d9dad[_0x338890(0x6b9)]['x'],this['_targetSkewX'],_0x40803a,_0x207005,_0x48679b),_0x4d9dad[_0x338890(0x6b9)]['y']=this[_0x338890(0x7e7)](_0x4d9dad[_0x338890(0x6b9)]['y'],this[_0x338890(0x25a)],_0x40803a,_0x207005,_0x48679b)):(_0x4d9dad[_0x338890(0x6b9)]['x']=(_0x4d9dad[_0x338890(0x6b9)]['x']*(_0x40803a-0x1)+this[_0x338890(0x442)])/_0x40803a,_0x4d9dad[_0x338890(0x6b9)]['y']=(_0x4d9dad['skew']['y']*(_0x40803a-0x1)+this['_targetSkewY'])/_0x40803a);this[_0x338890(0x9de)]--;if(this[_0x338890(0x9de)]<=0x0)this[_0x338890(0x24b)]();}}else{if(_0x8019f7)_0x8019f7[_0x248d47(0x2fd)](_0x3aa51e);}}},Game_Unit[_0x4ca73a(0x90a)][_0x4ca73a(0x7ee)]=function(){const _0x37e6a7=_0x4ca73a,_0x503358=this[_0x37e6a7(0x1d4)]();return _0x503358[Math['randomInt'](_0x503358[_0x37e6a7(0x73b)])];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x36c)]=Game_Party[_0x4ca73a(0x90a)][_0x4ca73a(0x789)],Game_Party[_0x4ca73a(0x90a)][_0x4ca73a(0x789)]=function(_0x12f165){const _0x13b37a=_0x4ca73a;VisuMZ[_0x13b37a(0x499)][_0x13b37a(0x36c)][_0x13b37a(0x37c)](this,_0x12f165),BattleManager[_0x13b37a(0x3eb)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xb25)]=Game_Party[_0x4ca73a(0x90a)][_0x4ca73a(0x588)],Game_Party[_0x4ca73a(0x90a)][_0x4ca73a(0x588)]=function(_0x3e60b3){const _0x13796c=_0x4ca73a;VisuMZ[_0x13796c(0x499)][_0x13796c(0xb25)]['call'](this,_0x3e60b3),BattleManager[_0x13796c(0x3eb)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x1b7)]=Game_Troop[_0x4ca73a(0x90a)][_0x4ca73a(0x584)],Game_Troop[_0x4ca73a(0x90a)][_0x4ca73a(0x584)]=function(_0x15be6f){const _0x5ba2b5=_0x4ca73a;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x5ba2b5(0x9e5)](_0x15be6f),VisuMZ[_0x5ba2b5(0x499)][_0x5ba2b5(0x1b7)][_0x5ba2b5(0x37c)](this,_0x15be6f);},VisuMZ['BattleCore']['Game_Map_setupBattleback']=Game_Map[_0x4ca73a(0x90a)][_0x4ca73a(0x6d1)],Game_Map[_0x4ca73a(0x90a)]['setupBattleback']=function(){const _0x21cd4b=_0x4ca73a;VisuMZ[_0x21cd4b(0x499)][_0x21cd4b(0x818)][_0x21cd4b(0x37c)](this),this[_0x21cd4b(0xafd)]();},Game_Map[_0x4ca73a(0x90a)][_0x4ca73a(0xafd)]=function(){const _0x36f102=_0x4ca73a;this[_0x36f102(0x8cb)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x3c5c12=$dataMap[_0x36f102(0xaa8)];if(!_0x3c5c12)return;const _0x548f33=_0x3c5c12[_0x36f102(0x2b2)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x548f33)for(const _0x44b8a0 of _0x548f33){_0x44b8a0['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x3cf83c=Number(RegExp['$1']),_0x4dd2ae=Number(RegExp['$2']),_0x5c24a4=_0x4dd2ae===0x1?this['_regionBattleback1']:this[_0x36f102(0x4d0)],_0x35f6dc=String(RegExp['$3']);_0x5c24a4[_0x3cf83c]=_0x35f6dc;}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x43c)]=Game_Map[_0x4ca73a(0x90a)][_0x4ca73a(0xb6c)],Game_Map[_0x4ca73a(0x90a)][_0x4ca73a(0xb6c)]=function(){const _0x31deb9=_0x4ca73a;if(!BattleManager[_0x31deb9(0x97f)]()){const _0x2420cf=$gamePlayer[_0x31deb9(0x832)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x31deb9(0x8cb)][_0x2420cf])return this[_0x31deb9(0x8cb)][_0x2420cf];}return VisuMZ[_0x31deb9(0x499)][_0x31deb9(0x43c)][_0x31deb9(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x3b0)]=Game_Map[_0x4ca73a(0x90a)][_0x4ca73a(0x7b7)],Game_Map['prototype'][_0x4ca73a(0x7b7)]=function(){const _0x326f4f=_0x4ca73a;if(!BattleManager[_0x326f4f(0x97f)]()){if(_0x326f4f(0x294)==='JDKBR'){function _0x2e08eb(){const _0x123bb8=_0x326f4f;_0x4aa3e7[_0x123bb8(0xad1)](_0x1ed4e7['SwitchCritical'],!![]);}}else{const _0x3e7441=$gamePlayer[_0x326f4f(0x832)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x326f4f(0x8cb)]&&this[_0x326f4f(0x4d0)][_0x3e7441]){if(_0x326f4f(0x1c3)==='TAUVb'){function _0x1231aa(){const _0x4375b7=_0x326f4f;if(!_0x27e325[_0x4375b7(0xb22)]())return;_0x3da73e['ConvertParams'](_0x2f5c29,_0x172a37);const _0x5a9972=_0x290ecd[_0x4375b7(0x260)](),_0x1d27d9=_0x307bdf['_subject'],_0x4e3c20=_0x5e9a22[_0x4375b7(0x26d)];if(!_0x5a9972)return;if(!_0x1d27d9)return;_0x1d27d9&&_0x1d27d9['isDead']()&&_0x4e3c20[_0x4375b7(0x941)]()[_0x4375b7(0x7d2)]()!=='UNTITLED'&&_0x5a9972['command119']([_0x4e3c20]);}}else return this[_0x326f4f(0x4d0)][_0x3e7441];}}}return VisuMZ[_0x326f4f(0x499)][_0x326f4f(0x3b0)][_0x326f4f(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x19b)]=Game_Interpreter[_0x4ca73a(0x90a)][_0x4ca73a(0x4e6)],Game_Interpreter['prototype'][_0x4ca73a(0x4e6)]=function(_0x2d47eb){const _0x8ace93=_0x4ca73a;return $gameTemp[_0x8ace93(0x822)](this),VisuMZ['BattleCore'][_0x8ace93(0x19b)]['call'](this,_0x2d47eb);},VisuMZ['BattleCore'][_0x4ca73a(0x24e)]=Game_Interpreter[_0x4ca73a(0x90a)]['updateWaitMode'],Game_Interpreter[_0x4ca73a(0x90a)][_0x4ca73a(0x7d8)]=function(){const _0x13ba2c=_0x4ca73a;if(SceneManager[_0x13ba2c(0xb22)]())switch(this['_waitMode']){case'battleAngle':if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x13ba2c(0x2a2)===_0x13ba2c(0x2a2)){if($gameScreen[_0x13ba2c(0x8af)]()[_0x13ba2c(0x5d8)]>0x0)return!![];this[_0x13ba2c(0x7e6)]='';}else{function _0xa00235(){const _0x3ab2bf=_0x13ba2c;if(!_0xfcf1b[_0x3ab2bf(0x6e0)](_0x4d38e1))return!![];}}}break;case _0x13ba2c(0x53f):if(BattleManager['_spriteset'][_0x13ba2c(0x57e)]())return!![];this[_0x13ba2c(0x7e6)]='';break;case _0x13ba2c(0x544):if(Imported[_0x13ba2c(0x28f)]){if(_0x13ba2c(0xb6f)===_0x13ba2c(0xb6f)){if($gameScreen['battleCameraData']()['cameraDuration']>0x0)return!![];if($gameScreen[_0x13ba2c(0x8af)]()['cameraOffsetDuration']>0x0)return!![];this[_0x13ba2c(0x7e6)]='';}else{function _0x15f4c6(){const _0x5e1cfa=_0x13ba2c,_0x479cc3=this['itemLineRect'](_0x521b62),_0x4bbfca=this['textSizeEx'](_0x45b528)[_0x5e1cfa(0x781)];return _0x4bbfca<=_0x479cc3['width']?_0x5e1cfa(0x747):_0x5e1cfa(0x7c5);}}}break;case'battleEffect':if(BattleManager['_spriteset']['isEffecting']())return!![];this[_0x13ba2c(0x7e6)]='';break;case _0x13ba2c(0x944):if(BattleManager[_0x13ba2c(0xa38)][_0x13ba2c(0x456)]())return!![];this['_waitMode']='';break;case _0x13ba2c(0x5dc):if(BattleManager[_0x13ba2c(0xa38)]['isAnyoneJumping']())return!![];this[_0x13ba2c(0x7e6)]='';break;case _0x13ba2c(0x243):if(BattleManager['_logWindow'][_0x13ba2c(0xaa4)]())return!![];this[_0x13ba2c(0x7e6)]='';break;case _0x13ba2c(0x99f):if(BattleManager[_0x13ba2c(0xa38)][_0x13ba2c(0x951)]())return!![];this[_0x13ba2c(0x7e6)]='';break;case _0x13ba2c(0x598):if(BattleManager[_0x13ba2c(0xa38)][_0x13ba2c(0x4fb)]())return!![];this[_0x13ba2c(0x7e6)]='';break;case'battleGrow':if(BattleManager[_0x13ba2c(0xa38)][_0x13ba2c(0x906)]())return!![];this['_waitMode']='';break;case _0x13ba2c(0x3a3):if(BattleManager['_spriteset']['isAnyoneSkewing']())return!![];this[_0x13ba2c(0x7e6)]='';break;case'battleProjectiles':if(Imported[_0x13ba2c(0x1a1)]){if(BattleManager[_0x13ba2c(0xa38)]['isAnyProjectilePresent']())return!![];this[_0x13ba2c(0x7e6)]='';}break;case _0x13ba2c(0x481):if(Imported[_0x13ba2c(0x28f)]){if($gameScreen[_0x13ba2c(0x8af)]()['skewDuration']>0x0)return!![];this['_waitMode']='';}break;case'battleSpin':if(BattleManager[_0x13ba2c(0xa38)]['isAnyoneSpinning']())return!![];this['_waitMode']='';break;case _0x13ba2c(0x4cb):if(Imported[_0x13ba2c(0x28f)]){if(_0x13ba2c(0x466)!==_0x13ba2c(0x466)){function _0x1985de(){const _0x2b402f=_0x13ba2c,_0x4ff3ca=_0x5b001e[_0x2b402f(0x826)](this[_0x2b402f(0x565)](),_0x168577[_0x2b402f(0x449)]),_0xf67711=_0x4212e6[_0x2b402f(0x3d7)](_0x4ff3ca*0x1e),_0x373409=this['createChildSprite'](_0xf67711,_0x4ff3ca),_0x346f86=_0x11460f[_0x2b402f(0x445)]/0x2,_0x5e5bb9=_0x373409['bitmap']['measureTextWidth'](_0x384d4b+'\x20');_0x373409[_0x2b402f(0xa74)][_0x2b402f(0x650)]=_0x360440[_0x2b402f(0x1c4)](_0x33b454[_0x2b402f(0x650)]),_0x373409['bitmap']['drawText'](_0x4413b7,_0x346f86,0x0,_0xf67711-_0x346f86,_0x4ff3ca,'center');const _0x559c09=_0x1f9d00[_0x2b402f(0x555)]((_0x4ff3ca-_0x442420[_0x2b402f(0x449)])/0x2),_0x1a31d8=_0xf67711/0x2-_0x3e119c['iconWidth']-_0x5e5bb9/0x2+_0x346f86/0x2,_0x2db78a=_0x5712b9['loadSystem'](_0x2b402f(0xb85)),_0x1f2b90=_0x17794c[_0x2b402f(0x445)],_0x2e1085=_0x334849[_0x2b402f(0x449)],_0x22ac81=_0x38cf6e%0x10*_0x1f2b90,_0x2197d3=_0x480389[_0x2b402f(0x3d7)](_0x3a759c/0x10)*_0x2e1085;_0x373409[_0x2b402f(0xa74)][_0x2b402f(0x844)](_0x2db78a,_0x22ac81,_0x2197d3,_0x1f2b90,_0x2e1085,_0x1a31d8,_0x559c09),this[_0x2b402f(0x5f1)]=_0x3dee54['flashColor']||[0x0,0x0,0x0,0x0],this[_0x2b402f(0x5f1)]=_0x23df2d[_0x2b402f(0x7bf)](this[_0x2b402f(0x5f1)]),this['_flashDuration']=_0x2bc6db[_0x2b402f(0x957)]||0x0,_0x373409['dy']=0x0;}}else{if($gameScreen[_0x13ba2c(0x8af)]()[_0x13ba2c(0xafa)]>0x0)return!![];this[_0x13ba2c(0x7e6)]='';}}break;}return VisuMZ['BattleCore'][_0x13ba2c(0x24e)][_0x13ba2c(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x8cd)]=Game_Interpreter[_0x4ca73a(0x90a)][_0x4ca73a(0x233)],Game_Interpreter['prototype'][_0x4ca73a(0x233)]=function(_0x3435b3){const _0x1c973a=_0x4ca73a;if(!$gameParty[_0x1c973a(0x7e1)]())return this[_0x1c973a(0x67c)](_0x3435b3);else{if(_0x1c973a(0x5c2)==='POzcb')return VisuMZ[_0x1c973a(0x499)][_0x1c973a(0x8cd)][_0x1c973a(0x37c)](this,_0x3435b3);else{function _0x57b9a6(){const _0x108ccc=_0x1c973a;return _0x4b5f5d[_0x108ccc(0x612)][_0x108ccc(0xa38)][_0x108ccc(0x973)](_0x3bdeb2[0x0],_0x4da304[0x1]),!![];}}}},Game_Interpreter[_0x4ca73a(0x90a)][_0x4ca73a(0xabc)]=function(_0x17b9ae){const _0x3e8d27=_0x4ca73a;return VisuMZ[_0x3e8d27(0x499)][_0x3e8d27(0x8cd)][_0x3e8d27(0x37c)](this,_0x17b9ae),BattleManager['setEventCallback'](_0xc49533=>{const _0x246799=_0x3e8d27;this[_0x246799(0x485)][this[_0x246799(0x82f)]]=_0xc49533;}),!![];},VisuMZ[_0x4ca73a(0x499)]['CheckMapBattleEventValid']=function(_0x8a0634){const _0xbb509c=_0x4ca73a,_0x1a1e50=$dataCommonEvents[_0x8a0634];if(!_0x1a1e50)return![];if(_0x1a1e50[_0xbb509c(0x3c0)][_0xbb509c(0x73b)]<=0x1)return![];return!![];},Game_Interpreter[_0x4ca73a(0x90a)]['command301_PreBattleEvent']=function(_0x3f7385){const _0x42b7ab=_0x4ca73a,_0xc04c7b=VisuMZ['BattleCore'][_0x42b7ab(0x800)][_0x42b7ab(0x1a9)],_0x223066=_0xc04c7b[_0x42b7ab(0x1a8)],_0x339f71=$dataCommonEvents[_0x223066];if(_0x339f71&&VisuMZ['BattleCore'][_0x42b7ab(0x6c2)](_0x223066)){const _0x43ef1f=this[_0x42b7ab(0x875)]()?this['_eventId']:0x0,_0x8b49d5=_0x339f71[_0x42b7ab(0x3c0)];this['setupChild'](_0x8b49d5,_0x43ef1f),this[_0x42b7ab(0xb66)]=JsonEx[_0x42b7ab(0x7bf)](this[_0x42b7ab(0xb66)]);const _0x1e9874={'code':0xbc3,'indent':this[_0x42b7ab(0x82f)],'parameters':JsonEx[_0x42b7ab(0x7bf)](_0x3f7385)};return this[_0x42b7ab(0xb66)][_0x42b7ab(0x64e)](this[_0x42b7ab(0x1ca)]+0x1,0x0,_0x1e9874),!![];}else{if(_0x42b7ab(0xa9a)!==_0x42b7ab(0xa8f))return VisuMZ['BattleCore'][_0x42b7ab(0x8cd)][_0x42b7ab(0x37c)](this,_0x3f7385);else{function _0x45c631(){const _0x538315=_0x42b7ab;(_0x48bd0b[_0x538315(0xb6c)]||_0x3d511b[_0x538315(0x7b7)])&&_0x2dd1d8['snapForBackground']();}}}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x32a)]=BattleManager[_0x4ca73a(0xb8c)],BattleManager[_0x4ca73a(0xb8c)]=function(){const _0x57f29d=_0x4ca73a;VisuMZ[_0x57f29d(0x499)][_0x57f29d(0x32a)][_0x57f29d(0x37c)](this),this['onEncounterBattleCore']();},BattleManager[_0x4ca73a(0xa0f)]=function(){const _0x2a3c0f=_0x4ca73a,_0x173729=VisuMZ[_0x2a3c0f(0x499)][_0x2a3c0f(0x800)][_0x2a3c0f(0x1a9)],_0x263b67=_0x173729[_0x2a3c0f(0x1a8)];if(_0x263b67&&VisuMZ[_0x2a3c0f(0x499)][_0x2a3c0f(0x6c2)](_0x263b67)){if(_0x2a3c0f(0x753)!=='lmgVS'){function _0xcf0fc(){const _0x252ac0=_0x2a3c0f;this[_0x252ac0(0x307)](_0x4c52b0[_0x252ac0(0x491)]);}}else this['_battleCoreBattleStartEvent']=!![],$gameTemp[_0x2a3c0f(0x3d5)](_0x173729[_0x2a3c0f(0x1a8)]),$gameMap[_0x2a3c0f(0x278)](),$gameMap[_0x2a3c0f(0x332)]['_preBattleCommonEvent']=!![];}if(_0x173729[_0x2a3c0f(0x862)]>0x0){if(_0x2a3c0f(0x6e3)===_0x2a3c0f(0x7da)){function _0x72c379(){const _0x273a97=_0x2a3c0f;_0x5bca67['BattleCore']['Scene_Battle_terminate'][_0x273a97(0x37c)](this);}}else this[_0x2a3c0f(0x4a1)]=!![];}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x6fe)]=Scene_Map[_0x4ca73a(0x90a)][_0x4ca73a(0x49e)],Scene_Map['prototype'][_0x4ca73a(0x49e)]=function(){const _0x29b0a3=_0x4ca73a;if(BattleManager[_0x29b0a3(0x309)])return;VisuMZ[_0x29b0a3(0x499)]['Scene_Map_updateCallMenu'][_0x29b0a3(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x4d6)]=Scene_Map[_0x4ca73a(0x90a)][_0x4ca73a(0x8a9)],Scene_Map[_0x4ca73a(0x90a)][_0x4ca73a(0x8a9)]=function(){const _0x1cd17a=_0x4ca73a;if(BattleManager[_0x1cd17a(0x309)]){if(_0x1cd17a(0x572)==='hKSLO'){function _0x2d8b41(){const _0x258901=_0x1cd17a;return _0x137131[_0x258901(0x499)][_0x258901(0x800)][_0x258901(0x1b8)][_0x258901(0xaab)][_0x258901(0x37c)](this,_0xc9b8a6,_0x3e54f0);}}else this[_0x1cd17a(0x34b)]();}else VisuMZ['BattleCore']['Scene_Map_launchBattle']['call'](this);},Scene_Map['prototype'][_0x4ca73a(0x34b)]=function(){this['_active']=!![];},VisuMZ['BattleCore'][_0x4ca73a(0x33d)]=SceneManager['isSceneChanging'],SceneManager[_0x4ca73a(0x595)]=function(){const _0x4df24e=_0x4ca73a;if(BattleManager[_0x4df24e(0x309)])return![];return VisuMZ[_0x4df24e(0x499)][_0x4df24e(0x33d)][_0x4df24e(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)]['Game_Interpreter_terminate']=Game_Interpreter['prototype'][_0x4ca73a(0x5ce)],Game_Interpreter['prototype'][_0x4ca73a(0x5ce)]=function(){const _0x27201c=_0x4ca73a;VisuMZ[_0x27201c(0x499)][_0x27201c(0x79c)][_0x27201c(0x37c)](this),this[_0x27201c(0x1bd)]&&(this[_0x27201c(0x1bd)]=undefined,SceneManager[_0x27201c(0x612)][_0x27201c(0x47c)]());},Scene_Map[_0x4ca73a(0x90a)][_0x4ca73a(0x47c)]=function(){const _0x54819e=_0x4ca73a;BattleManager[_0x54819e(0x309)]=undefined,BattleManager[_0x54819e(0x8c9)]=!![],this[_0x54819e(0x631)]();},VisuMZ[_0x4ca73a(0x499)]['Scene_Map_initializeAfter']=Scene_Map[_0x4ca73a(0x90a)][_0x4ca73a(0xa47)],Scene_Map['prototype']['initialize']=function(){const _0x40f29c=_0x4ca73a;VisuMZ[_0x40f29c(0x499)][_0x40f29c(0x451)][_0x40f29c(0x37c)](this),BattleManager[_0x40f29c(0x8c9)]&&(this[_0x40f29c(0x6d2)]=!![],BattleManager[_0x40f29c(0x8c9)]=undefined);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x9cd)]=Scene_Map[_0x4ca73a(0x90a)][_0x4ca73a(0xa47)],Scene_Map[_0x4ca73a(0x90a)]['initialize']=function(){const _0x569092=_0x4ca73a;VisuMZ[_0x569092(0x499)][_0x569092(0x9cd)][_0x569092(0x37c)](this),$gameTemp[_0x569092(0x623)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x422)]=Scene_ItemBase[_0x4ca73a(0x90a)][_0x4ca73a(0x9bb)],Scene_ItemBase[_0x4ca73a(0x90a)][_0x4ca73a(0x9bb)]=function(){const _0x55b83e=_0x4ca73a;VisuMZ[_0x55b83e(0x499)][_0x55b83e(0x422)][_0x55b83e(0x37c)](this);if(this[_0x55b83e(0xa07)]()[_0x55b83e(0xaa8)][_0x55b83e(0x2b2)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x55b83e(0x752)===_0x55b83e(0x752))$gameTemp[_0x55b83e(0x5c8)]=[];else{function _0x2a9eb9(){const _0x24795b=_0x55b83e;this[_0x24795b(0x1f1)](_0x1c0b4c[_0x24795b(0x8ea)]);}}}if(DataManager[_0x55b83e(0xae7)](this[_0x55b83e(0xa07)]())){if(_0x55b83e(0x259)==='NSyhB'){function _0x201bde(){const _0x5e1f09=_0x55b83e;this[_0x5e1f09(0x357)]=!this[_0x5e1f09(0x9db)](),_0x862b99['registerDefeatedEnemy'](this[_0x5e1f09(0x6c3)]());}}else $gameTemp[_0x55b83e(0x5c8)]=[];}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x684)]=Scene_Options['prototype'][_0x4ca73a(0x3b1)],Scene_Options[_0x4ca73a(0x90a)][_0x4ca73a(0x3b1)]=function(){const _0x23d947=_0x4ca73a;let _0x4f8459=VisuMZ[_0x23d947(0x499)][_0x23d947(0x684)]['call'](this);const _0x18f7c8=VisuMZ[_0x23d947(0x499)][_0x23d947(0x800)];if(_0x18f7c8[_0x23d947(0x4f8)][_0x23d947(0x38b)]&&_0x18f7c8[_0x23d947(0x4f8)][_0x23d947(0x94d)])_0x4f8459+=0x2;if(_0x18f7c8[_0x23d947(0xb24)]['AddOption']&&_0x18f7c8[_0x23d947(0xb24)]['AdjustRect'])_0x4f8459+=0x1;return _0x4f8459;},VisuMZ['BattleCore'][_0x4ca73a(0x6ac)]=Scene_Battle['prototype'][_0x4ca73a(0x2d3)],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x2d3)]=function(){const _0x23a9d4=_0x4ca73a;if(SceneManager['isPreviousSceneBattleTransitionable']()){Scene_Message['prototype'][_0x23a9d4(0x2d3)]['call'](this);this[_0x23a9d4(0xa38)]&&this[_0x23a9d4(0xa38)][_0x23a9d4(0x46b)]();if(BattleManager[_0x23a9d4(0x571)]){if(_0x23a9d4(0x5f6)!==_0x23a9d4(0x5f6)){function _0x22c0e7(){const _0x3e3593=_0x23a9d4;_0x3af93f['wtypeId']=_0x1c1110[_0x3e3593(0x306)](_0x30b25f['$1']);}}else BattleManager[_0x23a9d4(0x71f)]();}}else VisuMZ['BattleCore'][_0x23a9d4(0x6ac)][_0x23a9d4(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x8e3)]=Scene_Battle[_0x4ca73a(0x90a)]['stop'],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x631)]=function(){const _0x58a7f0=_0x4ca73a;if(SceneManager[_0x58a7f0(0x63d)]()){if(_0x58a7f0(0x36e)!=='vTVWB'){function _0x585d10(){return this['getMenuImage']();}}else Scene_Message['prototype'][_0x58a7f0(0x631)][_0x58a7f0(0x37c)](this);}else{if(_0x58a7f0(0x965)===_0x58a7f0(0x54e)){function _0x516cd8(){const _0x133010=_0x58a7f0;if(!_0x203461['isSideView']())return;const _0x37a750=this[_0x133010(0x4f6)]();if(!_0x37a750)return;this[_0x133010(0x4bb)]()&&(_0x2e6d8c*=-0x1,_0x3f9f1f*=-0x1),_0x37a750[_0x133010(0x412)](_0x23a9ad,_0x2c6c50,_0x14cc3d,_0xe5a3cd);}}else VisuMZ[_0x58a7f0(0x499)]['Scene_Battle_stop'][_0x58a7f0(0x37c)](this);}},VisuMZ['BattleCore'][_0x4ca73a(0x444)]=Scene_Battle['prototype'][_0x4ca73a(0x5ce)],Scene_Battle['prototype'][_0x4ca73a(0x5ce)]=function(){const _0x4bef6d=_0x4ca73a;SceneManager[_0x4bef6d(0x63d)]()?Scene_Message[_0x4bef6d(0x90a)][_0x4bef6d(0x5ce)]['call'](this):VisuMZ['BattleCore'][_0x4bef6d(0x444)][_0x4bef6d(0x37c)](this);},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xa51)]=function(){const _0x45d462=_0x4ca73a;if(ConfigManager[_0x45d462(0x7ed)]&&ConfigManager[_0x45d462(0x96e)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x45d462(0x912)]()===_0x45d462(0x89e))return![];else{return Scene_Message[_0x45d462(0x90a)][_0x45d462(0xa51)][_0x45d462(0x37c)](this);;}}},VisuMZ[_0x4ca73a(0x499)]['Scene_Battle_createAllWindows']=Scene_Battle['prototype'][_0x4ca73a(0x41f)],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x41f)]=function(){const _0x5a26e4=_0x4ca73a;this[_0x5a26e4(0x7d3)](),VisuMZ[_0x5a26e4(0x499)][_0x5a26e4(0x9ae)][_0x5a26e4(0x37c)](this),this[_0x5a26e4(0x277)]();},VisuMZ[_0x4ca73a(0x499)]['Scene_Battle_createCancelButton']=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x97e)],Scene_Battle['prototype'][_0x4ca73a(0x97e)]=function(){const _0x48bf92=_0x4ca73a;VisuMZ[_0x48bf92(0x499)][_0x48bf92(0x96d)][_0x48bf92(0x37c)](this),this['battleLayoutStyle']()===_0x48bf92(0x89e)&&this[_0x48bf92(0xb0a)]();},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x503)]=function(_0x4a7b7a){const _0x1187e1=_0x4ca73a;if(_0x4a7b7a){if('bwRGz'===_0x1187e1(0x351)){function _0x3cf1da(){const _0x2aa105=_0x1187e1;_0x5c4d09[_0x2aa105(0x381)](![]);}}else this[_0x1187e1(0x85d)]['x']=(Graphics[_0x1187e1(0x781)]-Graphics[_0x1187e1(0x83e)])/0x2,this['_windowLayer']['y']=(Graphics[_0x1187e1(0x38c)]-Graphics['boxHeight'])/0x2;}else this['_windowLayer']['x']=Graphics[_0x1187e1(0x781)]*0xa,this['_windowLayer']['y']=Graphics[_0x1187e1(0x38c)]*0xa;},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xb5e)]=Scene_Battle['prototype']['selectNextCommand'],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x968)]=function(){const _0x2869e8=_0x4ca73a,_0x5cc906=BattleManager[_0x2869e8(0xb16)]();VisuMZ['BattleCore'][_0x2869e8(0xb5e)][_0x2869e8(0x37c)](this);if(_0x5cc906){if(_0x2869e8(0x2d8)===_0x2869e8(0x2d8)){if(_0x5cc906===BattleManager[_0x2869e8(0xb16)]())return;if(_0x5cc906===BattleManager[_0x2869e8(0xb88)])return;if(_0x5cc906[_0x2869e8(0x4f6)]())_0x5cc906['battler']()['stepBack']();}else{function _0x43ecef(){const _0x1102eb=_0x2869e8;if(!_0x155097)return;if(!this[_0x1102eb(0x286)])return;this['_mainSprite'][_0x1102eb(0x342)]['x']=this['_actor'][_0x1102eb(0x325)](),this[_0x1102eb(0x286)][_0x1102eb(0x342)]['y']=this[_0x1102eb(0x463)][_0x1102eb(0x9bd)](),this['updateShadowVisibility']();}}}},VisuMZ['BattleCore'][_0x4ca73a(0x59e)]=Scene_Battle[_0x4ca73a(0x90a)]['selectPreviousCommand'],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x90e)]=function(){const _0x4895ac=_0x4ca73a,_0x3352ef=BattleManager[_0x4895ac(0xb16)]();if(_0x3352ef&&_0x3352ef[_0x4895ac(0x4f6)])_0x3352ef[_0x4895ac(0x4f6)]()[_0x4895ac(0x4fe)]();VisuMZ[_0x4895ac(0x499)][_0x4895ac(0x59e)][_0x4895ac(0x37c)](this);},VisuMZ['BattleCore'][_0x4ca73a(0xa70)]=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x224)],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x224)]=function(){const _0x1e5923=_0x4ca73a;if(VisuMZ[_0x1e5923(0x499)][_0x1e5923(0x800)][_0x1e5923(0x1b1)]['BattleLogRectJS'])return VisuMZ[_0x1e5923(0x499)][_0x1e5923(0x800)][_0x1e5923(0x1b1)][_0x1e5923(0x9d3)][_0x1e5923(0x37c)](this);return VisuMZ[_0x1e5923(0x499)][_0x1e5923(0xa70)][_0x1e5923(0x37c)](this);},VisuMZ['BattleCore'][_0x4ca73a(0xb28)]=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x4ec)],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x4ec)]=function(){const _0x825331=_0x4ca73a;VisuMZ[_0x825331(0x499)][_0x825331(0xb28)][_0x825331(0x37c)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x287)]=function(){const _0x38b6c0=_0x4ca73a,_0x39a60e=this['_partyCommandWindow'];_0x39a60e[_0x38b6c0(0xabf)]('autoBattle',this[_0x38b6c0(0xa98)][_0x38b6c0(0x1f3)](this)),_0x39a60e[_0x38b6c0(0xabf)](_0x38b6c0(0x47e),this[_0x38b6c0(0x498)][_0x38b6c0(0x1f3)](this));const _0x1efe80=this[_0x38b6c0(0x912)]();switch(_0x1efe80){case'xp':case _0x38b6c0(0x61f):return this[_0x38b6c0(0x589)][_0x38b6c0(0x7f8)](0x1);break;}},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xa98)]=function(){const _0x36fc7a=_0x4ca73a;BattleManager[_0x36fc7a(0x65d)]=!![],$gameParty[_0x36fc7a(0x20b)](),this['selectNextCommand'](),BattleManager['isTpb']()&&(BattleManager['_inputting']=![]);},Scene_Battle['prototype'][_0x4ca73a(0x498)]=function(){const _0x5b2bb5=_0x4ca73a;if(this['isQueueOptionsMenu']()){if(_0x5b2bb5(0x8f6)==='tHOFt'){function _0xca9c9a(){const _0xae668d=_0x5b2bb5;if(this[_0xae668d(0x8df)]&&this[_0xae668d(0xb1a)][_0xae668d(0x93d)](this[_0xae668d(0x8df)])){const _0xc9738c=this[_0xae668d(0xb1a)][_0xae668d(0x621)](this[_0xae668d(0x8df)]);this[_0xae668d(0x8bd)](_0xc9738c);}else this[_0xae668d(0x3ff)]();}}else this[_0x5b2bb5(0x6a9)]=!![],this[_0x5b2bb5(0x526)][_0x5b2bb5(0x1ee)](_0x5b2bb5(0x807),VisuMZ[_0x5b2bb5(0x499)][_0x5b2bb5(0x800)][_0x5b2bb5(0x327)][_0x5b2bb5(0x863)]);}else{if(_0x5b2bb5(0x981)===_0x5b2bb5(0x981))this[_0x5b2bb5(0x90b)]();else{function _0x1ec1e7(){const _0x1e0f53=_0x5b2bb5;_0x3ff651[_0x1e0f53(0x499)][_0x1e0f53(0x557)]['call'](this),this['addAutoBattleCommands'](),this[_0x1e0f53(0x9c6)]();}}}},Scene_Battle['prototype'][_0x4ca73a(0x7cf)]=function(){const _0x7248cf=_0x4ca73a;return BattleManager[_0x7248cf(0xae9)]();},Scene_Battle[_0x4ca73a(0x90a)]['callOptions']=function(){const _0x3aa408=_0x4ca73a;this['_callSceneOptions']=![],this[_0x3aa408(0xa38)][_0x3aa408(0x46b)](),this[_0x3aa408(0x85d)][_0x3aa408(0x4b2)]=![];if(BattleManager[_0x3aa408(0x97f)]()){if(_0x3aa408(0x4b4)===_0x3aa408(0x4b4))($dataSystem[_0x3aa408(0xb6c)]||$dataSystem[_0x3aa408(0x7b7)])&&SceneManager[_0x3aa408(0x1aa)]();else{function _0x383537(){const _0xd2dc10=_0x3aa408,_0x5ba333=this[_0xd2dc10(0x2bc)],_0x3d9cc9=this[_0xd2dc10(0x348)];_0x3d9cc9['x']=(_0x3d9cc9['x']*(_0x5ba333-0x1)+this[_0xd2dc10(0x546)])/_0x5ba333,_0x3d9cc9[_0xd2dc10(0x3bd)]=(_0x3d9cc9['opacity']*(_0x5ba333-0x1)+0xff)/_0x5ba333,this['_borderPortraitDuration']--;}}}else($gameMap[_0x3aa408(0xb6c)]()||$gameMap['battleback2Name']())&&SceneManager[_0x3aa408(0x1aa)]();SceneManager[_0x3aa408(0x1ee)](Scene_Options),BattleManager['isTpb']()&&(BattleManager[_0x3aa408(0x571)]=BattleManager['actor']());},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x7ce)]=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x9e3)],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x9e3)]=function(){const _0x8a91e=_0x4ca73a;VisuMZ['BattleCore'][_0x8a91e(0x7ce)][_0x8a91e(0x37c)](this);if(this[_0x8a91e(0x6a9)]&&!BattleManager[_0x8a91e(0xb88)])this[_0x8a91e(0x90b)]();},Scene_Battle[_0x4ca73a(0x90a)]['createAutoBattleWindow']=function(){const _0x39ea95=_0x4ca73a,_0x27abb8=this['autoBattleWindowRect']();this[_0x39ea95(0x3a4)]=new Window_AutoBattleCancel(_0x27abb8),this[_0x39ea95(0x3a4)][_0x39ea95(0x929)](),this[_0x39ea95(0x3b4)](this[_0x39ea95(0x3a4)]);},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xaeb)]=function(){const _0xa29ca3=_0x4ca73a;return VisuMZ['BattleCore'][_0xa29ca3(0x800)][_0xa29ca3(0x4f8)][_0xa29ca3(0x545)][_0xa29ca3(0x37c)](this);},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x21f)]=function(){const _0x493185=_0x4ca73a;return VisuMZ[_0x493185(0x499)]['Settings'][_0x493185(0x327)][_0x493185(0x47a)];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x433)]=Scene_Battle[_0x4ca73a(0x90a)]['startPartyCommandSelection'],Scene_Battle['prototype'][_0x4ca73a(0x3fe)]=function(){const _0x4cbbac=_0x4ca73a;if(this['isPartyCommandWindowDisabled']()){if(_0x4cbbac(0x8b0)===_0x4cbbac(0x468)){function _0x485260(){let _0x225a1f=0x0;return _0x225a1f;}}else this['onDisabledPartyCommandSelection']();}else VisuMZ['BattleCore'][_0x4cbbac(0x433)][_0x4cbbac(0x37c)](this);},Scene_Battle['prototype']['onDisabledPartyCommandSelection']=function(){const _0x53c358=_0x4ca73a;if(BattleManager[_0x53c358(0x6e8)]()){if('cSIaj'!=='cQCaY')this['selectNextCommand']();else{function _0xd5d12a(){const _0x11d52e=_0x53c358;if(!_0x3bb5f7[_0x11d52e(0xb22)]())return;if(!_0x5454e5['VisuMZ_3_ActSeqCamera'])return;_0x34b95d[_0x11d52e(0x8d4)](_0x436dde,_0x1bdfa8);const _0x59e0a7=_0x98b33c[_0x11d52e(0x260)](),_0x1b3970=_0x500cb1[_0x11d52e(0x9d0)];_0x437429[_0x11d52e(0x9a6)](_0x40b3d5[_0x11d52e(0x3f3)],_0x40ac17['OffsetY'],_0xa20851[_0x11d52e(0xa3b)],_0x3bff21['EasingType']);if(_0x1b3970)_0x59e0a7['setWaitMode']('battleCamera');}}}else{if(BattleManager[_0x53c358(0x75d)]()){if(_0x53c358(0x239)===_0x53c358(0xa20)){function _0xc8b0c6(){const _0x2952bd=_0x53c358;return this[_0x2952bd(0x72d)]();}}else VisuMZ[_0x53c358(0x499)][_0x53c358(0x433)][_0x53c358(0x37c)](this);}}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x9f9)]=Scene_Battle[_0x4ca73a(0x90a)]['commandFight'],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x7b6)]=function(){const _0x3c9ff4=_0x4ca73a;if(BattleManager[_0x3c9ff4(0x75d)]()){if('tyMjj'===_0x3c9ff4(0x853))this[_0x3c9ff4(0x8c0)](),this[_0x3c9ff4(0x9bc)]();else{function _0x42eda2(){const _0x2d8d50=_0x3c9ff4;this[_0x2d8d50(0x473)]={},_0x284779[_0x2d8d50(0x499)][_0x2d8d50(0x439)][_0x2d8d50(0x37c)](this);}}}else{if(_0x3c9ff4(0x6fc)==='DtBnr')VisuMZ['BattleCore'][_0x3c9ff4(0x9f9)][_0x3c9ff4(0x37c)](this);else{function _0x47276b(){const _0xc9729e=_0x3c9ff4;if(!_0x5c7db2[_0xc9729e(0xb22)]())return;if(!_0x18eea0[_0xc9729e(0x28f)])return;_0x5270bc[_0xc9729e(0x8d4)](_0x5d393e,_0x516ca0);const _0x1daf9e=_0x3ba2dc[_0xc9729e(0x260)](),_0x13d47a=_0x1ef5c3['WaitForSkew'];if(!_0x1daf9e)return;_0x1dad40[_0xc9729e(0x4c8)](0x0,0x0,_0x4e7a96[_0xc9729e(0xa3b)],_0x3af76d['EasingType']);if(_0x13d47a)_0x1daf9e['setWaitMode'](_0xc9729e(0x481));}}}},Scene_Battle['prototype'][_0x4ca73a(0x8c0)]=function(){const _0x2d93e3=_0x4ca73a;if(!VisuMZ[_0x2d93e3(0x499)]['TpbActiveChangeEnabled'])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x2d93e3(0x746)]())return;const _0x397ce1=$gameParty[_0x2d93e3(0x1d4)]()[_0x2d93e3(0x5be)](_0x5ab380=>_0x5ab380['isTpbCharged']()&&_0x5ab380[_0x2d93e3(0x698)]());BattleManager[_0x2d93e3(0x605)]=_0x397ce1[0x0]||null,BattleManager[_0x2d93e3(0x605)]&&BattleManager[_0x2d93e3(0x605)]['setActionState'](_0x2d93e3(0x410));},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xa5a)]=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xa5e)],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xa5e)]=function(){const _0x557a1f=_0x4ca73a;VisuMZ[_0x557a1f(0x499)][_0x557a1f(0xa5a)][_0x557a1f(0x37c)](this),this[_0x557a1f(0x418)]();},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x418)]=function(){const _0x3dc551=_0x4ca73a,_0x45cc60=this[_0x3dc551(0x961)];_0x45cc60[_0x3dc551(0xabf)](_0x3dc551(0x656),this[_0x3dc551(0x405)]['bind'](this)),_0x45cc60[_0x3dc551(0xabf)](_0x3dc551(0x90c),this['actorCommandAutoBattle'][_0x3dc551(0x1f3)](this)),_0x45cc60[_0x3dc551(0xabf)](_0x3dc551(0x532),this[_0x3dc551(0x42f)][_0x3dc551(0x1f3)](this));if(BattleManager[_0x3dc551(0x75d)]()){if(_0x3dc551(0x37f)===_0x3dc551(0x37f))this[_0x3dc551(0x21f)]()?delete _0x45cc60[_0x3dc551(0x527)][_0x3dc551(0x945)]:_0x45cc60['setHandler'](_0x3dc551(0x945),this[_0x3dc551(0x719)][_0x3dc551(0x1f3)](this));else{function _0x614267(){const _0x2f6aee=_0x3dc551,_0x533044=[];for(let _0x4be38d=0x0;_0x4be38d<this['numTargets']();_0x4be38d++){_0x533044[_0x2f6aee(0x1ee)](_0x36871e[_0x2f6aee(0x7ee)]());}return _0x533044;}}}},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x405)]=function(){const _0x5310c1=_0x4ca73a;this[_0x5310c1(0x5fc)]();},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x1ed)]=function(){const _0x2453f3=_0x4ca73a;BattleManager['actor']()[_0x2453f3(0x757)](),BattleManager[_0x2453f3(0x881)](),BattleManager[_0x2453f3(0x4db)](),this[_0x2453f3(0x8bb)]();},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x42f)]=function(){const _0x3a4399=_0x4ca73a,_0x3b68c5=BattleManager['inputtingAction']();_0x3b68c5[_0x3a4399(0x635)](this[_0x3a4399(0x961)][_0x3a4399(0x824)]()),this['onSelectAction']();},Scene_Battle['prototype'][_0x4ca73a(0x719)]=function(){const _0xbc5f8f=_0x4ca73a;if(this[_0xbc5f8f(0x95d)]()){if('fBBUU'===_0xbc5f8f(0x5c7))this[_0xbc5f8f(0x4f1)]();else{function _0x3eecca(){const _0x51d70a=_0xbc5f8f;_0x21f939[_0x51d70a(0x943)]=![];}}}else this[_0xbc5f8f(0x2b4)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x921)]=![],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x95d)]=function(){const _0x4c35c1=_0x4ca73a;if(Imported[_0x4c35c1(0x850)]&&BattleManager[_0x4c35c1(0x746)]())return![];else{if(!VisuMZ[_0x4c35c1(0x499)][_0x4c35c1(0x921)])return![];const _0x4d5d45=$gameParty[_0x4c35c1(0x1d4)]()[_0x4c35c1(0x5be)](_0xf757d9=>_0xf757d9[_0x4c35c1(0x85f)]()&&_0xf757d9[_0x4c35c1(0x698)]());return _0x4d5d45[_0x4c35c1(0x73b)]>0x0&&BattleManager[_0x4c35c1(0xb16)]()!==_0x4d5d45[_0x4d5d45['length']-0x1];}},Scene_Battle[_0x4ca73a(0x90a)]['performTpbActiveCheckSwitch']=function(){const _0x4381f8=_0x4ca73a,_0x54c1b1=BattleManager[_0x4381f8(0xb16)](),_0x1fa81f=_0x54c1b1['battler']();if(_0x1fa81f)_0x1fa81f['stepBack']();const _0xf80061=$gameParty[_0x4381f8(0x1d4)]()[_0x4381f8(0x5be)](_0x333990=>_0x333990[_0x4381f8(0x85f)]()&&_0x333990['canInput']()),_0x16ab84=_0xf80061[_0x4381f8(0x621)](_0x54c1b1),_0x2fdc35=_0xf80061[_0x16ab84+0x1];BattleManager[_0x4381f8(0x605)]=_0x2fdc35||null;if(_0x2fdc35)_0x2fdc35[_0x4381f8(0x9a3)](_0x4381f8(0x410));_0x54c1b1['setActionState'](_0x4381f8(0x61a)),this[_0x4381f8(0x8bb)]();},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x2b4)]=function(){const _0x30553c=_0x4ca73a;this[_0x30553c(0x589)][_0x30553c(0x584)](),this[_0x30553c(0x961)]['close']();if(!VisuMZ[_0x30553c(0x499)]['TpbActiveChangeEnabled'])return;if(Imported[_0x30553c(0x850)]&&BattleManager[_0x30553c(0x746)]())return;if(BattleManager[_0x30553c(0x605)]){if(_0x30553c(0x50f)==='VhxOp'){function _0x4a0cdb(){const _0x5df7ad=_0x30553c;if(this[_0x5df7ad(0x8d3)][_0x5df7ad(0xac3)](_0x4bfcd6=>_0x4bfcd6[_0x5df7ad(0xa07)]()&&_0x4bfcd6['isMagical']()))return!![];}}else{BattleManager[_0x30553c(0x605)][_0x30553c(0x9a3)](_0x30553c(0x61a));const _0x1106ca=BattleManager['_currentActor'][_0x30553c(0x4f6)]();if(_0x1106ca)_0x1106ca[_0x30553c(0x4fe)]();}}BattleManager[_0x30553c(0x605)]=null;},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x6c5)]=Scene_Battle['prototype'][_0x4ca73a(0x5df)],Scene_Battle['prototype'][_0x4ca73a(0x5df)]=function(){const _0x33839e=_0x4ca73a;VisuMZ['BattleCore'][_0x33839e(0x6c5)][_0x33839e(0x37c)](this),this[_0x33839e(0x4b1)]();},Scene_Battle['prototype'][_0x4ca73a(0x4b1)]=function(){const _0x4e606b=_0x4ca73a;this['_actorCommandWindow'][_0x4e606b(0x26c)](this[_0x4e606b(0xb09)]),this[_0x4e606b(0x589)]['setHelpWindow'](this[_0x4e606b(0xb09)]);},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x912)]=function(){const _0x269f18=_0x4ca73a;if($gameTemp[_0x269f18(0x502)]!==undefined)return $gameTemp[_0x269f18(0x502)];if(this[_0x269f18(0x383)])return this['_battleLayoutStyle'];this[_0x269f18(0x383)]=VisuMZ[_0x269f18(0x499)][_0x269f18(0x800)]['BattleLayout'][_0x269f18(0x843)]['toLowerCase']()[_0x269f18(0x7d2)]();if(this[_0x269f18(0x383)]==='sideview_ui'&&!Imported[_0x269f18(0x35b)]){if('YlTGM'===_0x269f18(0x24a))this['_battleLayoutStyle']=_0x269f18(0x2f9);else{function _0x303b77(){const _0x50fc4d=_0x269f18;if(this[_0x50fc4d(0x383)])return this[_0x50fc4d(0x383)];return this[_0x50fc4d(0x383)]=_0x5643b9[_0x50fc4d(0x612)][_0x50fc4d(0x912)](),this['_battleLayoutStyle'];}}}return this['_battleLayoutStyle'];},VisuMZ[_0x4ca73a(0x499)]['Scene_Battle_windowAreaHeight']=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x5cd)],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x5cd)]=function(){const _0x432311=_0x4ca73a,_0x4bab51=this[_0x432311(0x912)]();switch(_0x4bab51){case _0x432311(0x3c0):return this[_0x432311(0x54d)](Math[_0x432311(0x826)](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ[_0x432311(0x499)][_0x432311(0xb0b)][_0x432311(0x37c)](this);break;}},VisuMZ[_0x4ca73a(0x499)]['Scene_Battle_helpWindowRect']=Scene_Battle[_0x4ca73a(0x90a)]['helpWindowRect'],Scene_Battle['prototype'][_0x4ca73a(0x311)]=function(){const _0x3b86a7=_0x4ca73a,_0x47f2d7=this[_0x3b86a7(0x912)]();switch(_0x47f2d7){case'border':return this[_0x3b86a7(0xa33)]();break;case _0x3b86a7(0x2f9):case _0x3b86a7(0x3c0):case'xp':case'portrait':default:return VisuMZ[_0x3b86a7(0x499)][_0x3b86a7(0x291)][_0x3b86a7(0x37c)](this);break;}},Scene_Battle['prototype'][_0x4ca73a(0x68b)]=function(){const _0x544b3a=_0x4ca73a,_0x3b0762=this[_0x544b3a(0x912)]();switch(_0x3b0762){case'xp':case _0x544b3a(0x61f):return this[_0x544b3a(0x3c6)]();break;case _0x544b3a(0x89e):return this[_0x544b3a(0x895)]();break;case _0x544b3a(0x2f9):case _0x544b3a(0x3c0):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x4ca73a(0x499)]['Scene_Battle_partyCommandWindowRect']=Scene_Battle['prototype'][_0x4ca73a(0x225)],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x225)]=function(){const _0x4264cc=_0x4ca73a,_0x2f3507=this[_0x4264cc(0x912)]();switch(_0x2f3507){case'xp':case _0x4264cc(0x61f):return this[_0x4264cc(0x258)]();break;case _0x4264cc(0x89e):return this[_0x4264cc(0xaef)]();case _0x4264cc(0x2f9):case _0x4264cc(0x3c0):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x3f8)]=function(){const _0x303ddf=_0x4ca73a,_0x16da97=VisuMZ[_0x303ddf(0x499)]['Settings'][_0x303ddf(0x1f0)],_0x15fb2f=_0x16da97[_0x303ddf(0x23b)]||0xc0,_0x45a5f8=this[_0x303ddf(0x5cd)](),_0x5a352c=this['isRightInputMode']()?Graphics[_0x303ddf(0x83e)]-_0x15fb2f:0x0,_0x3b6c41=Graphics['boxHeight']-_0x45a5f8;return new Rectangle(_0x5a352c,_0x3b6c41,_0x15fb2f,_0x45a5f8);},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x554)]=function(){const _0x4a1e42=_0x4ca73a;return this[_0x4a1e42(0x225)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x660)]=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xae0)],Scene_Battle['prototype'][_0x4ca73a(0xae0)]=function(){const _0x40a815=_0x4ca73a,_0x3db828=this[_0x40a815(0x912)]();switch(_0x3db828){case'xp':case _0x40a815(0x61f):case _0x40a815(0x89e):break;case _0x40a815(0x2f9):case _0x40a815(0x3c0):default:VisuMZ[_0x40a815(0x499)]['Scene_Battle_updateStatusWindowPosition'][_0x40a815(0x37c)](this);break;}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x1be)]=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x537)],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x537)]=function(){const _0x3e8f11=_0x4ca73a;VisuMZ[_0x3e8f11(0x499)][_0x3e8f11(0x1be)][_0x3e8f11(0x37c)](this),this[_0x3e8f11(0x2f4)]();},VisuMZ[_0x4ca73a(0x499)]['Scene_Battle_startEnemySelection']=Scene_Battle[_0x4ca73a(0x90a)]['startEnemySelection'],Scene_Battle['prototype'][_0x4ca73a(0x8a1)]=function(){const _0x32b413=_0x4ca73a;VisuMZ[_0x32b413(0x499)][_0x32b413(0x7a3)]['call'](this),this[_0x32b413(0x928)][_0x32b413(0x4b7)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x2f4)]=function(){const _0x4e2085=_0x4ca73a,_0x433b26=this['battleLayoutStyle']();if(['xp',_0x4e2085(0x61f),_0x4e2085(0x89e)][_0x4e2085(0x93d)](_0x433b26)){if('osRKp'!==_0x4e2085(0x360))this[_0x4e2085(0x961)][_0x4e2085(0x820)]();else{function _0x57eae1(){const _0x206691=_0x4e2085,_0x4efde5=this['battler']();if(_0x4efde5)_0x4efde5[_0x206691(0x540)](_0x4b2d53);}}}(_0x433b26==='border'||this[_0x4e2085(0x98e)]())&&(this[_0x4e2085(0x733)]['close'](),this[_0x4e2085(0x8e9)][_0x4e2085(0x820)]());},VisuMZ['BattleCore'][_0x4ca73a(0x64c)]=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x9a5)],Scene_Battle['prototype'][_0x4ca73a(0x9a5)]=function(){const _0xf9678b=_0x4ca73a;VisuMZ[_0xf9678b(0x499)]['Scene_Battle_onActorOk'][_0xf9678b(0x37c)](this),this[_0xf9678b(0x1c0)]();},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x39b)]=function(){const _0x327906=_0x4ca73a;return[_0x327906(0x9ea),'guard',_0x327906(0x532)][_0x327906(0x93d)](this[_0x327906(0x961)]['currentSymbol']());},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x76d)]=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x8db)],Scene_Battle['prototype'][_0x4ca73a(0x8db)]=function(){const _0x4e51ea=_0x4ca73a;this[_0x4e51ea(0x39b)]()?(this[_0x4e51ea(0x790)][_0x4e51ea(0xa54)](),this[_0x4e51ea(0x20e)][_0x4e51ea(0x929)](),this[_0x4e51ea(0x961)]['activate']()):VisuMZ[_0x4e51ea(0x499)]['Scene_Battle_onActorCancel']['call'](this),this['cancelTargetSelectionVisibility']();},VisuMZ[_0x4ca73a(0x499)]['Scene_Battle_onEnemyOk']=Scene_Battle[_0x4ca73a(0x90a)]['onEnemyOk'],Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x52e)]=function(){const _0x308383=_0x4ca73a;VisuMZ[_0x308383(0x499)][_0x308383(0x7dd)][_0x308383(0x37c)](this),this[_0x308383(0x1c0)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x496)]=Scene_Battle['prototype'][_0x4ca73a(0x697)],Scene_Battle['prototype']['onEnemyCancel']=function(){const _0x54bfb2=_0x4ca73a;if(this[_0x54bfb2(0x39b)]()){if(_0x54bfb2(0x717)===_0x54bfb2(0x547)){function _0x1aaade(){const _0x273e53=_0x54bfb2;_0x5900be['BattleCore'][_0x273e53(0x692)]['call'](this,_0x4e4e33),this[_0x273e53(0x1eb)]();}}else this['_statusWindow']['show'](),this[_0x54bfb2(0x928)]['hide'](),this[_0x54bfb2(0x961)][_0x54bfb2(0x9b8)]();}else VisuMZ[_0x54bfb2(0x499)][_0x54bfb2(0x496)]['call'](this);this[_0x54bfb2(0x1da)]();},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x1c0)]=function(){const _0x207e42=_0x4ca73a,_0x2c9824=this[_0x207e42(0x912)]();if(_0x2c9824===_0x207e42(0x89e)||this[_0x207e42(0x98e)]()){this[_0x207e42(0x733)][_0x207e42(0xb62)]();if(this[_0x207e42(0x733)][_0x207e42(0x4ae)]){if(_0x207e42(0x4ba)===_0x207e42(0x4ba))this['_skillWindow'][_0x207e42(0xa54)]();else{function _0x423592(){const _0x351120=_0x207e42;_0x37a0b6[_0x351120(0x499)]['Game_Battler_clearDamagePopup']['call'](this),this['_damagePopupArray']=[];}}}this['_itemWindow'][_0x207e42(0xb62)]();if(this[_0x207e42(0x8e9)][_0x207e42(0x4ae)]){if(_0x207e42(0x1f8)===_0x207e42(0x1f8))this['_itemWindow'][_0x207e42(0xa54)]();else{function _0xe49dbd(){const _0x180737=_0x207e42;if(_0x286554['type']===0x0)this['requestMotion'](_0x180737(0x677));else{if(_0x758251[_0x180737(0x298)]===0x1)this[_0x180737(0x3b7)](_0x180737(0xb65));else _0x16137e[_0x180737(0x298)]===0x2&&this['requestMotion'](_0x180737(0x777));}}}}}},Scene_Battle['prototype'][_0x4ca73a(0x1da)]=function(){const _0x3cbd3d=_0x4ca73a,_0x55a153=this[_0x3cbd3d(0x912)]();if(['xp',_0x3cbd3d(0x61f),'border'][_0x3cbd3d(0x93d)](_0x55a153)){if('gwwwP'!==_0x3cbd3d(0x534)){function _0x4fa9a2(){const _0x4da08e=_0x3cbd3d;_0xc14a7c['setHandler'](_0x4da08e(0x945),this['actorCommandCancelTPB'][_0x4da08e(0x1f3)](this));}}else this[_0x3cbd3d(0x961)]['open']();}this[_0x3cbd3d(0x1c0)]();},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x288)]=function(){const _0x5d87fd=_0x4ca73a,_0x2f2b99=VisuMZ['BattleCore'][_0x5d87fd(0x800)][_0x5d87fd(0x1f0)],_0x9736f9=Window_BattleStatus[_0x5d87fd(0x90a)]['extraHeight'](),_0x460a97=Graphics[_0x5d87fd(0x83e)]-(_0x2f2b99[_0x5d87fd(0x23b)]||0xc0),_0x2370f9=this[_0x5d87fd(0x5cd)]()+_0x9736f9,_0x4e21d2=this[_0x5d87fd(0xa51)]()?0x0:Graphics[_0x5d87fd(0x83e)]-_0x460a97,_0x5d0860=Graphics['boxHeight']-_0x2370f9+_0x9736f9;return new Rectangle(_0x4e21d2,_0x5d0860,_0x460a97,_0x2370f9);},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x3c6)]=function(){const _0x24e895=_0x4ca73a,_0x4b725f=Window_BattleStatus[_0x24e895(0x90a)]['extraHeight'](),_0xb4023=Graphics[_0x24e895(0x83e)],_0x519fc7=this[_0x24e895(0x5cd)]()+_0x4b725f,_0x27501d=0x0,_0x32946f=Graphics[_0x24e895(0x6cb)]-_0x519fc7+_0x4b725f;return new Rectangle(_0x27501d,_0x32946f,_0xb4023,_0x519fc7);},Scene_Battle['prototype'][_0x4ca73a(0x258)]=function(){const _0x3db865=_0x4ca73a,_0x16f6c8=Graphics[_0x3db865(0x83e)]/0x2,_0x2af943=this[_0x3db865(0x54d)](VisuMZ[_0x3db865(0x499)]['Settings']['BattleLayout'][_0x3db865(0x4f4)],!![]),_0x541380=Math[_0x3db865(0x555)]((Graphics[_0x3db865(0x83e)]-_0x16f6c8)/0x2),_0x354d5d=Graphics['boxHeight']-_0x2af943-this[_0x3db865(0x3c6)]()[_0x3db865(0x38c)];return new Rectangle(_0x541380,_0x354d5d,_0x16f6c8,_0x2af943);},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xa33)]=function(){const _0x16d97e=_0x4ca73a,_0x57c4f5=Graphics[_0x16d97e(0x781)],_0x5cbf7d=Math[_0x16d97e(0x555)]((Graphics[_0x16d97e(0x83e)]-_0x57c4f5)/0x2),_0x27d8eb=this[_0x16d97e(0x84a)](),_0x59c680=(Graphics[_0x16d97e(0x38c)]-Graphics[_0x16d97e(0x6cb)])/-0x2;return new Rectangle(_0x5cbf7d,_0x59c680,_0x57c4f5,_0x27d8eb);},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x895)]=function(){const _0x257b43=_0x4ca73a,_0x5e938d=Graphics[_0x257b43(0x781)],_0x132655=Math['round']((Graphics[_0x257b43(0x83e)]-_0x5e938d)/0x2),_0x178f9f=this[_0x257b43(0x54d)](0x4,!![]),_0xd2c2df=Graphics['boxHeight']-_0x178f9f+(Graphics[_0x257b43(0x38c)]-Graphics[_0x257b43(0x6cb)])/0x2;return new Rectangle(_0x132655,_0xd2c2df,_0x5e938d,_0x178f9f);},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xaef)]=function(){const _0x16d422=_0x4ca73a,_0x15d518=Math[_0x16d422(0x3d7)](Graphics[_0x16d422(0x781)]/0x3),_0x2d9500=this[_0x16d422(0xa51)]()?(Graphics[_0x16d422(0x781)]+Graphics[_0x16d422(0x83e)])/0x2-_0x15d518:(Graphics[_0x16d422(0x781)]-Graphics[_0x16d422(0x83e)])/-0x2,_0x523525=this[_0x16d422(0xa33)](),_0x2b5bde=_0x523525['y']+_0x523525[_0x16d422(0x38c)],_0x3ef1ad=this[_0x16d422(0x895)](),_0x27da33=_0x3ef1ad['y']-_0x2b5bde;return new Rectangle(_0x2d9500,_0x2b5bde,_0x15d518,_0x27da33);},Scene_Battle['prototype'][_0x4ca73a(0x622)]=function(){const _0x17d101=_0x4ca73a,_0x11f8c3=Math['ceil'](Graphics['width']/0x3),_0x23d458=Math['round']((Graphics[_0x17d101(0x83e)]-_0x11f8c3)/0x2),_0x423cea=this[_0x17d101(0xaef)](),_0x2c94e1=_0x423cea['y'],_0x4fdebb=_0x423cea[_0x17d101(0x38c)];return new Rectangle(_0x23d458,_0x2c94e1,_0x11f8c3,_0x4fdebb);},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xb0a)]=function(){const _0x4d6bf7=_0x4ca73a;this[_0x4d6bf7(0x3e7)]['y']=this[_0x4d6bf7(0xb09)]['y']+this[_0x4d6bf7(0xb09)][_0x4d6bf7(0x38c)];if(this[_0x4d6bf7(0xa51)]()){if(_0x4d6bf7(0x932)===_0x4d6bf7(0x9dc)){function _0x16210d(){const _0x8a7f18=_0x4d6bf7;_0x4df3b3[_0x8a7f18(0xac4)]();let _0x186782=_0x1ef6af[_0x8a7f18(0x499)][_0x8a7f18(0x800)][_0x8a7f18(0xb23)][_0x8a7f18(0x7eb)];_0x186782>0x0&&_0x279b8[_0x8a7f18(0xad9)]([this],_0x186782);}}else this[_0x4d6bf7(0x912)]()===_0x4d6bf7(0x89e)?this['_cancelButton']['x']=0x8:this[_0x4d6bf7(0x3e7)]['x']=-this[_0x4d6bf7(0x3e7)][_0x4d6bf7(0x781)]-0x4;}else{if(_0x4d6bf7(0xa29)==='OdkDp')this[_0x4d6bf7(0x3e7)]['x']=Graphics['width']-(Graphics['width']-Graphics[_0x4d6bf7(0x83e)])/0x2-this[_0x4d6bf7(0x3e7)][_0x4d6bf7(0x781)]-0x4;else{function _0x30c5f8(){const _0x165c42=_0x4d6bf7,_0x338c92=_0x5cae2f[_0x165c42(0x4f6)]();this[_0x165c42(0x1ee)]('performJump',[_0x57e27a],_0x27d4cd,_0x596d75),this[_0x165c42(0x1ee)](_0x165c42(0x347),_0x4689a3,_0x338c92[_0x165c42(0x716)],_0x338c92[_0x165c42(0x80e)],_0x3a2eb7,![],_0x165c42(0xb91)),this[_0x165c42(0x1ee)](_0x165c42(0x3b7),[_0x39fc29],_0x165c42(0xa0c)),this[_0x165c42(0x1ee)](_0x165c42(0x530)),this[_0x165c42(0x1ee)](_0x165c42(0x3b7),[_0x24980f],_0x165c42(0xb79));}}}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x52d)]=Scene_Battle['prototype'][_0x4ca73a(0x6e1)],Scene_Battle['prototype'][_0x4ca73a(0x6e1)]=function(){const _0x48bb02=_0x4ca73a;if(this[_0x48bb02(0x912)]()==='border'){if(_0x48bb02(0xb0f)===_0x48bb02(0xb0f))return this[_0x48bb02(0x622)]();else{function _0x41156f(){const _0x2a9ebf=_0x48bb02;return this['currentAction']()&&this['currentAction']()[_0x2a9ebf(0xa07)]()&&this['currentAction']()[_0x2a9ebf(0x64b)]();}}}else{if(this['isSkillItemWindowsMiddle']()){if(_0x48bb02(0xada)===_0x48bb02(0xada))return this['skillItemWindowRectMiddle']();else{function _0x15562e(){const _0x168edf=_0x48bb02,_0x530491=_0x583113(_0x218366['$1']);return[_0x2c74f9[_0x168edf(0x99c)]()['members']()[_0x530491]];}}}else return VisuMZ[_0x48bb02(0x499)]['Scene_Battle_skillWindowRect'][_0x48bb02(0x37c)](this);}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x2ac)]=Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x3a5)],Scene_Battle['prototype']['itemWindowRect']=function(){const _0x2770da=_0x4ca73a;if(this['battleLayoutStyle']()===_0x2770da(0x89e)){if(_0x2770da(0xa66)===_0x2770da(0x7ff)){function _0x45fc1f(){const _0x123a39=_0x2770da;this[_0x123a39(0x1ee)]('addText',this[_0x123a39(0x9d7)](_0x33d631));}}else return this[_0x2770da(0x622)]();}else{if(this[_0x2770da(0x98e)]()){if(_0x2770da(0x36b)===_0x2770da(0x6e5)){function _0x721306(){_0x17c8f6=(_0x4f52c0+_0x6fbbee)/0x2,_0x467baa=-0x1;}}else return this['skillItemWindowRectMiddle']();}else return VisuMZ['BattleCore'][_0x2770da(0x2ac)][_0x2770da(0x37c)](this);}},Scene_Battle['prototype'][_0x4ca73a(0x98e)]=function(){const _0x82e368=_0x4ca73a;return VisuMZ[_0x82e368(0x499)][_0x82e368(0x800)]['BattleLayout']['SkillItemMiddleLayout'];},Scene_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x8dc)]=function(){const _0x791438=_0x4ca73a,_0x530b05=Sprite_Button['prototype'][_0x791438(0xa71)]()*0x2+0x4;let _0x5b54f0=Graphics[_0x791438(0x83e)]-_0x530b05;Imported['VisuMZ_0_CoreEngine']&&SceneManager[_0x791438(0x366)]()&&(_0x5b54f0+=_0x530b05);const _0xd9ce86=this[_0x791438(0x8d9)](),_0x4bed07=Graphics[_0x791438(0x6cb)]-_0xd9ce86-this[_0x791438(0x68b)]()[_0x791438(0x38c)]+Window_BattleStatus[_0x791438(0x90a)][_0x791438(0x857)](),_0x2c7510=0x0;return new Rectangle(_0x2c7510,_0xd9ce86,_0x5b54f0,_0x4bed07);},Scene_Battle['prototype'][_0x4ca73a(0x7d3)]=function(){const _0x44aca2=_0x4ca73a;if(!VisuMZ[_0x44aca2(0x499)]['Settings'][_0x44aca2(0xa94)][_0x44aca2(0x1a3)])return;this[_0x44aca2(0x315)]=new Sprite(),this['_enemyNameContainer']['x']=this[_0x44aca2(0x85d)]['x'],this['_enemyNameContainer']['y']=this['_windowLayer']['y'];const _0x4b149e=this['children'][_0x44aca2(0x621)](this[_0x44aca2(0x85d)]);this[_0x44aca2(0x579)](this[_0x44aca2(0x315)],_0x4b149e);for(let _0x11998b=0x0;_0x11998b<0x8;_0x11998b++){const _0xa37587=new Window_EnemyName(_0x11998b);this[_0x44aca2(0x315)][_0x44aca2(0x3b4)](_0xa37587);}},Sprite_Battler[_0x4ca73a(0xaf9)]=VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x800)]['Actor'][_0x4ca73a(0x30d)],VisuMZ['BattleCore'][_0x4ca73a(0x4a4)]=Sprite_Battler[_0x4ca73a(0x90a)]['initMembers'],Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xa46)]=function(){const _0x2ab693=_0x4ca73a;VisuMZ[_0x2ab693(0x499)]['Sprite_Battler_initMembers'][_0x2ab693(0x37c)](this),this[_0x2ab693(0x729)]();if(this[_0x2ab693(0x1a5)]===Sprite_Enemy)this[_0x2ab693(0x5f8)]();this[_0x2ab693(0x44f)]();},Sprite_Battler['prototype'][_0x4ca73a(0x729)]=function(){const _0x2dd88b=_0x4ca73a;this['_baseX']=0x0,this['_baseY']=0x0,this[_0x2dd88b(0x4ac)]=0x0,this[_0x2dd88b(0x8da)]=0x0,this['_floatDuration']=0x0,this[_0x2dd88b(0xb70)]=0x0,this[_0x2dd88b(0x89c)]=_0x2dd88b(0xb91),this[_0x2dd88b(0x603)]=0x0,this[_0x2dd88b(0x3f5)]=0x0,this[_0x2dd88b(0x4be)]=0x0,this[_0x2dd88b(0x926)]=0x0,this[_0x2dd88b(0x20f)]=0xff,this[_0x2dd88b(0x71a)]=0x0,this[_0x2dd88b(0x904)]=0x0,this[_0x2dd88b(0xb1d)]=_0x2dd88b(0xb91),this[_0x2dd88b(0xa53)]=0x0,this[_0x2dd88b(0x2ed)]=0x0,this[_0x2dd88b(0x350)]=0x0,this[_0x2dd88b(0x9f7)]=0x0,this[_0x2dd88b(0x841)]=_0x2dd88b(0xb91),this[_0x2dd88b(0x207)]=!![],this['_skewX']=0x0,this[_0x2dd88b(0x1b3)]=0x0,this['_targetSkewX']=0x0,this['_targetSkewY']=0x0,this['_skewDuration']=0x0,this[_0x2dd88b(0x7db)]=0x0,this[_0x2dd88b(0x38e)]=_0x2dd88b(0xb91),this[_0x2dd88b(0x199)]=0x1,this['_growY']=0x1,this[_0x2dd88b(0x531)]=0x1,this[_0x2dd88b(0x8fe)]=0x1,this[_0x2dd88b(0x40e)]=0x0,this['_growWholeDuration']=0x0,this[_0x2dd88b(0x74e)]=_0x2dd88b(0xb91),this[_0x2dd88b(0xa60)]=0x1;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x5f8)]=function(){const _0x198848=_0x4ca73a;this['_shadowSprite']=new Sprite(),this[_0x198848(0x654)][_0x198848(0xa74)]=ImageManager[_0x198848(0x4c4)](_0x198848(0x769)),this[_0x198848(0x654)][_0x198848(0xa74)][_0x198848(0x7f0)]=VisuMZ[_0x198848(0x499)][_0x198848(0x800)][_0x198848(0x4e4)]['SmoothImage'],this[_0x198848(0x654)][_0x198848(0x342)]['x']=0.5,this[_0x198848(0x654)]['anchor']['y']=0.5,this[_0x198848(0x654)]['y']=-0x2,this[_0x198848(0x654)][_0x198848(0x4b2)]=![],this[_0x198848(0x3b4)](this[_0x198848(0x654)]);},Sprite_Battler['prototype']['createDistortionSprite']=function(){const _0x26c4df=_0x4ca73a;this[_0x26c4df(0x8d2)]=new Sprite(),this[_0x26c4df(0x8d2)]['anchor']['x']=0.5,this['_distortionSprite'][_0x26c4df(0x342)]['y']=0.5,this[_0x26c4df(0x3b4)](this[_0x26c4df(0x8d2)]);},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xb5f)]=function(){const _0x402fd3=_0x4ca73a;if(!this[_0x402fd3(0x8d2)])return;if(this['_shadowSprite']){const _0x46999f=this[_0x402fd3(0x60e)](this[_0x402fd3(0x8d2)]);this[_0x402fd3(0x579)](this[_0x402fd3(0x654)],_0x46999f),this[_0x402fd3(0x96b)]();}this[_0x402fd3(0x3ba)]&&this[_0x402fd3(0x8d2)][_0x402fd3(0x3b4)](this[_0x402fd3(0x3ba)]);if(this['_weaponSprite']){if(_0x402fd3(0x7a1)===_0x402fd3(0x7a1))this[_0x402fd3(0x8d2)]['addChild'](this[_0x402fd3(0xad7)]);else{function _0x245532(){const _0xb2278f=_0x402fd3;return _0x34b4e8[_0xb2278f(0x502)];}}}if(this[_0x402fd3(0x286)]){if(_0x402fd3(0x25b)==='mBtyC')this[_0x402fd3(0x8d2)][_0x402fd3(0x3b4)](this[_0x402fd3(0x286)]);else{function _0x36a2a6(){const _0x1e55ec=_0x402fd3;return this[_0x1e55ec(0x232)];}}}this[_0x402fd3(0x3a1)]&&this[_0x402fd3(0x8d2)]['addChild'](this[_0x402fd3(0x3a1)]);},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x96b)]=function(){const _0x23402c=_0x4ca73a;if(!this[_0x23402c(0x654)])return;if(this[_0x23402c(0x51b)]&&this[_0x23402c(0x51b)]['svBattlerShadowVisible']()){const _0x487dbb=this[_0x23402c(0x654)][_0x23402c(0xa74)];this[_0x23402c(0x654)][_0x23402c(0x6c8)](0x0,0x0,_0x487dbb[_0x23402c(0x781)],_0x487dbb['height']);}else{if(_0x23402c(0x420)===_0x23402c(0xab7)){function _0xc9bf06(){const _0x465a96=_0x23402c;return this[_0x465a96(0x383)];}}else this[_0x23402c(0x654)]['setFrame'](0x0,0x0,0x0,0x0);}},Sprite_Battler[_0x4ca73a(0x90a)]['damageContainer']=function(){const _0x5ea16e=_0x4ca73a;if(SceneManager[_0x5ea16e(0xb22)]()){if(_0x5ea16e(0x9da)!==_0x5ea16e(0x9da)){function _0x4ce9be(){const _0xa2b82a=_0x5ea16e,_0x354c04=this[_0xa2b82a(0xaeb)]();this[_0xa2b82a(0x3a4)]=new _0x3f2471(_0x354c04),this[_0xa2b82a(0x3a4)]['hide'](),this[_0xa2b82a(0x3b4)](this[_0xa2b82a(0x3a4)]);}}else return SceneManager[_0x5ea16e(0x612)][_0x5ea16e(0xa38)][_0x5ea16e(0x40b)];}else return this[_0x5ea16e(0x8be)];},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xb0e)]=function(_0x4eab5a,_0x16bebe){const _0x10f8bc=_0x4ca73a;if(!this[_0x10f8bc(0x51b)][_0x10f8bc(0x3b9)]())return;const _0x30eb61=VisuMZ[_0x10f8bc(0x499)][_0x10f8bc(0x800)][_0x10f8bc(0x1b8)],_0x466394=new Sprite_Damage();_0x466394['_duration']=_0x30eb61[_0x10f8bc(0xb78)],this[_0x10f8bc(0x3f1)](_0x466394),_0x466394['setupTextPopup'](_0x4eab5a,_0x16bebe),this[_0x10f8bc(0x837)](_0x466394);},Sprite_Battler['prototype'][_0x4ca73a(0x8f1)]=function(_0x292028,_0x3bebe9,_0x4d2073){const _0x2f1f1f=_0x4ca73a;if(!this[_0x2f1f1f(0x51b)][_0x2f1f1f(0x3b9)]())return;const _0x27edce=VisuMZ[_0x2f1f1f(0x499)]['Settings'][_0x2f1f1f(0x1b8)],_0x26ed88=new Sprite_Damage();_0x26ed88['_duration']=_0x27edce['PopupDuration'],this['sortDamageSprites'](_0x26ed88),_0x26ed88[_0x2f1f1f(0x8f1)](_0x292028,_0x3bebe9,_0x4d2073),this['addDamageSprite'](_0x26ed88);},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x88d)]=function(){const _0x158779=_0x4ca73a;if(!this[_0x158779(0x51b)][_0x158779(0xa4e)]())return;while(this[_0x158779(0x51b)][_0x158779(0xa4e)]()){this[_0x158779(0x51b)][_0x158779(0x3b9)]()&&this[_0x158779(0x467)]();}this['_battler'][_0x158779(0x9ce)](),this[_0x158779(0x51b)][_0x158779(0x900)]();},Sprite_Battler['prototype'][_0x4ca73a(0x467)]=function(){const _0x43a810=_0x4ca73a,_0x2964ce=VisuMZ[_0x43a810(0x499)][_0x43a810(0x800)][_0x43a810(0x1b8)],_0x1ca131=new Sprite_Damage();_0x1ca131[_0x43a810(0x198)]=_0x2964ce[_0x43a810(0xb78)],this['sortDamageSprites'](_0x1ca131),_0x1ca131[_0x43a810(0x584)](this[_0x43a810(0x51b)]),_0x1ca131['setupBattleCore'](this[_0x43a810(0x51b)]),this['addDamageSprite'](_0x1ca131);},Sprite_Battler['prototype']['addDamageSprite']=function(_0x3e7217){const _0x160dc2=_0x4ca73a;this['_damages'][_0x160dc2(0x1ee)](_0x3e7217);if(this[_0x160dc2(0x35a)]())SceneManager['_scene'][_0x160dc2(0x790)][_0x160dc2(0x837)](_0x3e7217,this[_0x160dc2(0x51b)]);else{this[_0x160dc2(0x922)]()['addChild'](_0x3e7217);if(SceneManager[_0x160dc2(0x6c6)]())_0x3e7217[_0x160dc2(0xaed)]['x']=-0x1;}},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x35a)]=function(){const _0x84c7c3=_0x4ca73a;return!$gameSystem[_0x84c7c3(0x395)]()&&this[_0x84c7c3(0x51b)]&&this[_0x84c7c3(0x51b)][_0x84c7c3(0x4bb)]();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x3f1)]=function(_0x500b7e){const _0x277bc3=_0x4ca73a,_0x4dcfb6=VisuMZ[_0x277bc3(0x499)][_0x277bc3(0x800)][_0x277bc3(0x1b8)],_0xb66263=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x4d3547=this['x'],_0x58c777=this['y'];const _0x5e7619=SceneManager[_0x277bc3(0x612)][_0x277bc3(0x790)];if(_0x5e7619&&this[_0x277bc3(0x8be)]===_0x5e7619){if('BYZHO'===_0x277bc3(0x22d)){function _0x12a1f3(){_0x5f086a=_0x146941;}}else{_0x4d3547+=_0x5e7619['x']-this[_0x277bc3(0x718)]();const _0x1e83d3=_0x5e7619['lineHeight']()*0x3/0x4;_0x58c777=_0x5e7619['y']+_0x1e83d3,_0x58c777=Math[_0x277bc3(0x455)](_0x58c777,_0x5e7619['y']+this['y']-this[_0x277bc3(0x38c)]+_0x1e83d3);}}_0x500b7e['x']=Math['round'](_0x4d3547+this[_0x277bc3(0x718)]()*_0xb66263),_0x500b7e['y']=Math[_0x277bc3(0x555)](_0x58c777+this[_0x277bc3(0x6a7)]());if(_0x4dcfb6['NewPopupBottom']){if(_0x277bc3(0xa15)==='ebWqm'){function _0x2ae0e3(){_0x188636=(_0x5a11c7+_0x2c9a8d)/0x2;}}else for(const _0x2633f3 of this[_0x277bc3(0x931)]){if('SoOnO'==='SoOnO')_0x2633f3['x']+=_0x4dcfb6[_0x277bc3(0x738)]*_0xb66263,_0x2633f3['y']+=_0x4dcfb6[_0x277bc3(0xa6d)];else{function _0x2448e3(){const _0xb201c9=_0x277bc3;this['_borderPortraitSprite']['x']=this[_0xb201c9(0x781)],this[_0xb201c9(0x546)]=this['width']*0x3/0x4;}}}}else{const _0x2800e6=this['_damages'][this[_0x277bc3(0x931)]['length']-0x1];_0x2800e6&&(_0x500b7e['x']=_0x2800e6['x']+_0x4dcfb6[_0x277bc3(0x738)]*_0xb66263,_0x500b7e['y']=_0x2800e6['y']+_0x4dcfb6[_0x277bc3(0xa6d)]);}},VisuMZ[_0x4ca73a(0x499)]['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x4ca73a(0x90a)]['damageOffsetX'],Sprite_Battler['prototype'][_0x4ca73a(0x718)]=function(){const _0x750572=_0x4ca73a;let _0x2ae735=VisuMZ[_0x750572(0x499)]['Sprite_Battler_damageOffsetX']['call'](this),_0xef2f6b=VisuMZ[_0x750572(0x499)][_0x750572(0x800)][_0x750572(0x1b8)][_0x750572(0x227)]||0x0;return Math[_0x750572(0x555)](_0x2ae735+_0xef2f6b);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x813)]=Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x6a7)],Sprite_Battler['prototype']['damageOffsetY']=function(){const _0x53a232=_0x4ca73a;let _0x24c45a=VisuMZ[_0x53a232(0x499)][_0x53a232(0x813)][_0x53a232(0x37c)](this);switch(VisuMZ['BattleCore'][_0x53a232(0x800)][_0x53a232(0x1b8)][_0x53a232(0xb3e)]){case _0x53a232(0x672):_0x24c45a-=this[_0x53a232(0x38c)]*this[_0x53a232(0xaed)]['y'];break;case'center':_0x24c45a-=this[_0x53a232(0x38c)]*this[_0x53a232(0xaed)]['y']*0.5;break;}let _0x4b26c3=VisuMZ['BattleCore'][_0x53a232(0x800)][_0x53a232(0x1b8)][_0x53a232(0x9b7)]||0x0;return Math[_0x53a232(0x555)](_0x24c45a+_0x4b26c3);},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x718)]=function(){const _0x53054e=_0x4ca73a;return Sprite_Battler[_0x53054e(0x90a)][_0x53054e(0x718)][_0x53054e(0x37c)](this);},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x6a7)]=function(){const _0xa8d319=_0x4ca73a;return Sprite_Battler['prototype'][_0xa8d319(0x6a7)]['call'](this);},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x479)]=function(_0xb3ce07){const _0x440295=_0x4ca73a;if(this['isShownOnBattlePortrait']())SceneManager[_0x440295(0x612)]['_statusWindow']['removeDamageSprite'](_0xb3ce07);else{if('khgJv'!==_0x440295(0x331))this[_0x440295(0x922)]()['removeChild'](_0xb3ce07),this[_0x440295(0x931)][_0x440295(0x942)](_0xb3ce07),_0xb3ce07[_0x440295(0x508)]();else{function _0x1ca6b1(){const _0x43d6e8=_0x440295;this[_0x43d6e8(0x620)]('walk');}}}},VisuMZ['BattleCore']['Sprite_Battler_setHome']=Sprite_Battler['prototype'][_0x4ca73a(0xb42)],Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xb42)]=function(_0x2443ef,_0x4eb088){const _0x2341d6=_0x4ca73a,_0x4d3e48=VisuMZ[_0x2341d6(0x499)]['Settings'];if(this[_0x2341d6(0x1a5)]===Sprite_Actor){if(_0x2341d6(0x933)===_0x2341d6(0x933))_0x2443ef+=_0x4d3e48[_0x2341d6(0x4e4)][_0x2341d6(0x3f3)]||0x0,_0x4eb088+=_0x4d3e48[_0x2341d6(0x4e4)]['OffsetY']||0x0;else{function _0x66a948(){const _0x16db5c=_0x2341d6;return _0x24731f=_0x5a0ff5[_0x16db5c(0x941)]()[_0x16db5c(0x7d2)](),this[_0x16db5c(0x6f0)]()===_0x49415c;}}}else this['constructor']===Sprite_Enemy&&(_0x2443ef+=_0x4d3e48[_0x2341d6(0xa94)][_0x2341d6(0x3f3)]||0x0,_0x4eb088+=_0x4d3e48[_0x2341d6(0xa94)]['OffsetY']||0x0);VisuMZ[_0x2341d6(0x499)][_0x2341d6(0x3b5)][_0x2341d6(0x37c)](this,_0x2443ef,_0x4eb088);},VisuMZ[_0x4ca73a(0x499)]['Sprite_Battler_update']=Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x46b)],Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x46b)]=function(){const _0x19ea75=_0x4ca73a;VisuMZ[_0x19ea75(0x499)][_0x19ea75(0x57d)][_0x19ea75(0x37c)](this),!this[_0x19ea75(0x51b)]&&this[_0x19ea75(0x6f9)]&&(this[_0x19ea75(0x6f9)][_0x19ea75(0x4b2)]=![]);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x721)]=Sprite_Battler['prototype']['updateMain'],Sprite_Battler[_0x4ca73a(0x90a)]['updateMain']=function(){const _0x27ff24=_0x4ca73a;this['updateScale'](),this[_0x27ff24(0x290)](),this[_0x27ff24(0x707)](),this[_0x27ff24(0x8b6)](),this[_0x27ff24(0x1cb)](),VisuMZ[_0x27ff24(0x499)]['Sprite_Battler_updateMain']['call'](this);if(this[_0x27ff24(0x1a5)]===Sprite_Enemy)this[_0x27ff24(0x7e5)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x83b)]=Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x92c)],Sprite_Battler['prototype']['updatePosition']=function(){const _0xcd6f83=_0x4ca73a;VisuMZ[_0xcd6f83(0x499)][_0xcd6f83(0x83b)][_0xcd6f83(0x37c)](this),this[_0xcd6f83(0x2a4)](),this[_0xcd6f83(0x246)]();},Sprite_Battler['prototype'][_0x4ca73a(0x2a4)]=function(){const _0x21e939=_0x4ca73a;this[_0x21e939(0x9e9)]=this['x'],this['_baseY']=this['y'],this[_0x21e939(0xaf0)](),this['updateJump'](),this['x']+=this[_0x21e939(0x6fa)](),this['y']+=this[_0x21e939(0x35d)](),this['x']=Math[_0x21e939(0x3d7)](this['x']),this['y']=Math[_0x21e939(0x3d7)](this['y']);},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x6fa)]=function(){let _0x5d29ee=0x0;return _0x5d29ee;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x35d)]=function(){const _0x324d9e=_0x4ca73a;let _0x18489d=0x0;if(this['_battler']&&!this[_0x324d9e(0x51b)]['isBattlerGrounded']()){if(_0x324d9e(0x3a6)!==_0x324d9e(0xb5b))_0x18489d-=this[_0x324d9e(0x4ac)],_0x18489d-=this['_jumpHeight'];else{function _0x518154(){const _0x3199e3=_0x324d9e;return _0x265c5f['friendsUnit']()[_0x3199e3(0x1d4)]();}}}if(this[_0x324d9e(0x8d2)]&&this[_0x324d9e(0x1a5)]!==Sprite_SvEnemy){const _0x464511=this['_distortionSprite'][_0x324d9e(0xaed)]['y'];_0x18489d-=(_0x464511-0x1)*this[_0x324d9e(0x38c)];}return _0x18489d;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x8b6)]=function(){const _0x1976ad=_0x4ca73a,_0x1708bb=this['_battler']&&this['_battler'][_0x1976ad(0x817)]();this[_0x1976ad(0xa60)]=(_0x1708bb?-0x1:0x1)*Math['abs'](this[_0x1976ad(0xaed)]['x']);},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x212)]=function(_0x2eb54a,_0x34d36f,_0x287594){const _0x1de4b8=_0x4ca73a;if(!this['canMove']())return;if(this[_0x1de4b8(0x8da)]===_0x2eb54a)return;this[_0x1de4b8(0x8da)]=_0x2eb54a,this[_0x1de4b8(0xa03)]=_0x34d36f,this['_floatWholeDuration']=_0x34d36f,this[_0x1de4b8(0x89c)]=_0x287594||_0x1de4b8(0xb91);if(_0x34d36f<=0x0)this['_floatHeight']=_0x2eb54a;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xaf0)]=function(){const _0xdc8194=_0x4ca73a;if(this[_0xdc8194(0xa03)]<=0x0)return;const _0x2580cb=this['_floatDuration'],_0x293f4a=this['_floatWholeDuration'],_0x5340b9=this[_0xdc8194(0x89c)];Imported['VisuMZ_0_CoreEngine']?this[_0xdc8194(0x4ac)]=this[_0xdc8194(0x7e7)](this[_0xdc8194(0x4ac)],this[_0xdc8194(0x8da)],_0x2580cb,_0x293f4a,_0x5340b9):this[_0xdc8194(0x4ac)]=(this[_0xdc8194(0x4ac)]*(_0x2580cb-0x1)+this[_0xdc8194(0x8da)])/_0x2580cb;this[_0xdc8194(0xa03)]--;if(this[_0xdc8194(0xa03)]<=0x0)this[_0xdc8194(0x2c3)]();},Sprite_Battler[_0x4ca73a(0x90a)]['onFloatEnd']=function(){const _0x3d7413=_0x4ca73a;this[_0x3d7413(0x4ac)]=this[_0x3d7413(0x8da)];},Sprite_Battler['prototype'][_0x4ca73a(0x849)]=function(){const _0x221f54=_0x4ca73a;return this[_0x221f54(0xa03)]>0x0;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x370)]=function(_0xd638b7,_0x50c037){const _0x9407d9=_0x4ca73a;if(!this[_0x9407d9(0x894)]())return;if(_0x50c037<=0x0)return;this[_0x9407d9(0x3f5)]=_0xd638b7,this[_0x9407d9(0x4be)]=_0x50c037,this[_0x9407d9(0x926)]=_0x50c037;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x2bf)]=function(){const _0x36766b=_0x4ca73a;if(this['_jumpDuration']<=0x0)return;const _0x1c4c4a=this[_0x36766b(0x926)]-this[_0x36766b(0x4be)],_0x4c5c3b=this[_0x36766b(0x926)]/0x2,_0x2104b3=this[_0x36766b(0x3f5)],_0xa8e714=-_0x2104b3/Math[_0x36766b(0xb4a)](_0x4c5c3b,0x2);this['_jumpHeight']=_0xa8e714*Math[_0x36766b(0xb4a)](_0x1c4c4a-_0x4c5c3b,0x2)+_0x2104b3,this[_0x36766b(0x4be)]--;if(this[_0x36766b(0x4be)]<=0x0)return this[_0x36766b(0xb77)]();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xb77)]=function(){const _0x380a26=_0x4ca73a;this[_0x380a26(0x603)]=0x0;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x36f)]=function(){const _0x52987f=_0x4ca73a;return this[_0x52987f(0x4be)]>0x0;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x461)]=function(_0x420b23,_0x2da18b,_0x5a87d6){const _0x1bca1e=_0x4ca73a;if(this[_0x1bca1e(0x20f)]===_0x420b23)return;this[_0x1bca1e(0x20f)]=_0x420b23,this[_0x1bca1e(0x71a)]=_0x2da18b,this['_opacityWholeDuration']=_0x2da18b,this[_0x1bca1e(0xb1d)]=_0x5a87d6||_0x1bca1e(0xb91);if(_0x2da18b<=0x0)this[_0x1bca1e(0x3bd)]=_0x420b23;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x246)]=function(){const _0x270e15=_0x4ca73a;if(this[_0x270e15(0x71a)]<=0x0)return;const _0x37362c=this[_0x270e15(0x71a)],_0x50c7da=this['_opacityWholeDuration'],_0xb36a34=this[_0x270e15(0xb1d)];Imported[_0x270e15(0x5d1)]?this[_0x270e15(0x3bd)]=this['applyEasing'](this['opacity'],this[_0x270e15(0x20f)],_0x37362c,_0x50c7da,_0xb36a34):this[_0x270e15(0x3bd)]=(this[_0x270e15(0x3bd)]*(_0x37362c-0x1)+this['_targetOpacity'])/_0x37362c;this[_0x270e15(0x71a)]--;if(this[_0x270e15(0x71a)]<=0x0)this[_0x270e15(0x7a2)]();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x7a2)]=function(){this['opacity']=this['_targetOpacity'];},Sprite_Battler['prototype'][_0x4ca73a(0x9c8)]=function(){const _0x3f50df=_0x4ca73a;return this[_0x3f50df(0x71a)]>0x0;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x7e5)]=function(){const _0x5decb6=_0x4ca73a;this[_0x5decb6(0x654)]['visible']=this[_0x5decb6(0x51b)][_0x5decb6(0x804)](),this[_0x5decb6(0x54b)]();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x54b)]=function(){const _0x52f299=_0x4ca73a;if(!this[_0x52f299(0x654)])return;this[_0x52f299(0x654)]['y']=this[_0x52f299(0xa56)]-this['y']-0x2;},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xa5b)]=function(){const _0x1cd537=_0x4ca73a;if(!this['_battler'])return;this['_shadowScale']=this[_0x1cd537(0x51b)][_0x1cd537(0x244)]();},Game_BattlerBase[_0x4ca73a(0x90a)][_0x4ca73a(0x244)]=function(){const _0x3078d4=_0x4ca73a,_0x44708a=this[_0x3078d4(0x4bb)]()?this[_0x3078d4(0xb16)]():this['enemy']();if(_0x44708a){if(_0x3078d4(0x72a)==='DkGjB'){const _0xc642c1=_0x44708a[_0x3078d4(0xaa8)];if(_0xc642c1[_0x3078d4(0x2b2)](/<SIDEVIEW SHADOW SCALE:[ ](\d+)([%％])>/i)){if(_0x3078d4(0x655)!==_0x3078d4(0x655)){function _0x42b9ba(){const _0x389d49=_0x3078d4;this[_0x389d49(0x3e7)]['x']=-this[_0x389d49(0x3e7)][_0x389d49(0x781)]-0x4;}}else return Number(RegExp['$1'])*0.01;}else{if(_0xc642c1[_0x3078d4(0x2b2)](/<SIDEVIEW SHADOW SCALE:[ ](.*)>/i)){if(_0x3078d4(0x63c)!==_0x3078d4(0x63c)){function _0x1eb102(){_0xb3a230=_0x3575a7(_0xdf003a['$1']);}}else return Number(RegExp['$1'])||0x0;}}}else{function _0x5b502f(){const _0x34b995=_0x3078d4;let _0x3c643b=0x0;this[_0x34b995(0x51b)]&&!this[_0x34b995(0x51b)][_0x34b995(0x268)]()&&(_0x3c643b-=this[_0x34b995(0x4ac)],_0x3c643b-=this[_0x34b995(0x603)]);if(this[_0x34b995(0x8d2)]&&this[_0x34b995(0x1a5)]!==_0x59c102){const _0x113960=this[_0x34b995(0x8d2)][_0x34b995(0xaed)]['y'];_0x3c643b-=(_0x113960-0x1)*this['height'];}return _0x3c643b;}}}return 0x1;},Sprite_Battler[_0x4ca73a(0x90a)]['updateScale']=function(){if(this['constructor']===Sprite_SvEnemy)return;this['updateGrow'](),this['finalizeScale']();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x845)]=function(){const _0x151021=_0x4ca73a,_0x30f83c=this[_0x151021(0x8d2)];_0x30f83c&&(_0x30f83c[_0x151021(0xaed)]['x']=this['mainSpriteScaleX'](),_0x30f83c[_0x151021(0xaed)]['y']=this[_0x151021(0x2a1)]());},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x4d2)]=function(){const _0x12104e=_0x4ca73a;let _0xe7fd03=0x1;return _0xe7fd03*=this[_0x12104e(0xa60)],_0xe7fd03*=this[_0x12104e(0x199)],_0xe7fd03;},Sprite_Battler['prototype'][_0x4ca73a(0x2a1)]=function(){const _0x46d39d=_0x4ca73a;return 0x1*this[_0x46d39d(0x7ea)];},Sprite_Battler['prototype'][_0x4ca73a(0x745)]=function(){const _0x4cb726=_0x4ca73a;return this[_0x4cb726(0x781)]*this[_0x4cb726(0x4d2)]();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x60a)]=function(){const _0x4c4617=_0x4ca73a;return this[_0x4c4617(0x38c)]*this['mainSpriteScaleY']();},Sprite_Battler['prototype']['startGrow']=function(_0xf0fdee,_0x53afa6,_0xbd58f1,_0x4d7f21){const _0x525cf6=_0x4ca73a;if(!this[_0x525cf6(0x894)]())return;if(!this[_0x525cf6(0x8d2)])return;if(this[_0x525cf6(0x531)]===_0xf0fdee&&this[_0x525cf6(0x8fe)]===_0x53afa6)return;this[_0x525cf6(0x531)]=_0xf0fdee,this['_targetGrowY']=_0x53afa6,this[_0x525cf6(0x40e)]=_0xbd58f1,this[_0x525cf6(0x9b0)]=_0xbd58f1,this[_0x525cf6(0x74e)]=_0x4d7f21||_0x525cf6(0xb91);if(_0xbd58f1<=0x0){if(_0x525cf6(0xa8c)!==_0x525cf6(0xa8c)){function _0x489412(){const _0x5e4576=_0x525cf6;if(this[_0x5e4576(0xa07)]()[_0x5e4576(0xaa8)][_0x5e4576(0x2b2)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0xfb56f4=_0x110e5d(_0xec8620['$1'])[_0x5e4576(0x941)]()[_0x5e4576(0x7d2)]();return _0xfb56f4;}return _0x5e4576(0x776);}}else this[_0x525cf6(0x199)]=this[_0x525cf6(0x531)],this['_growY']=this[_0x525cf6(0x8fe)];}},Sprite_Battler['prototype']['updateGrow']=function(){const _0x4bd2a3=_0x4ca73a;if(this[_0x4bd2a3(0x40e)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x245ec1=this[_0x4bd2a3(0x40e)],_0x100da0=this[_0x4bd2a3(0x9b0)],_0x245c0a=this[_0x4bd2a3(0x74e)];if(Imported[_0x4bd2a3(0x5d1)]){if(_0x4bd2a3(0x74a)===_0x4bd2a3(0x74a))this['_growX']=this[_0x4bd2a3(0x7e7)](this[_0x4bd2a3(0x199)],this[_0x4bd2a3(0x531)],_0x245ec1,_0x100da0,_0x245c0a),this['_growY']=this[_0x4bd2a3(0x7e7)](this['_growY'],this[_0x4bd2a3(0x8fe)],_0x245ec1,_0x100da0,_0x245c0a);else{function _0x11ecfe(){const _0x2f86e0=_0x4bd2a3;if(_0xd9b94f===_0x11a384[_0x2f86e0(0xb16)]())return;if(_0x2064a8===_0x3c6416[_0x2f86e0(0xb88)])return;if(_0x5897dc[_0x2f86e0(0x4f6)]())_0x275618[_0x2f86e0(0x4f6)]()['stepBack']();}}}else this[_0x4bd2a3(0x199)]=(this[_0x4bd2a3(0x199)]*(_0x245ec1-0x1)+this['_targetGrowX'])/_0x245ec1,this[_0x4bd2a3(0x7ea)]=(this['_growY']*(_0x245ec1-0x1)+this[_0x4bd2a3(0x8fe)])/_0x245ec1;this[_0x4bd2a3(0x40e)]--;if(this[_0x4bd2a3(0x40e)]<=0x0)this['onGrowEnd']();},Sprite_Battler['prototype'][_0x4ca73a(0x674)]=function(){const _0x1a35cc=_0x4ca73a;this[_0x1a35cc(0x199)]=this[_0x1a35cc(0x531)],this[_0x1a35cc(0x7ea)]=this['_targetGrowY'];},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x2cf)]=function(){const _0x41fed2=_0x4ca73a;return this[_0x41fed2(0x40e)]>0x0;},Sprite_Battler[_0x4ca73a(0x90a)]['startSkew']=function(_0xc61c35,_0x2a0c3e,_0x462982,_0x579b5c){const _0x4d1b9f=_0x4ca73a;if(!this['canMove']())return;if(!this[_0x4d1b9f(0x8d2)])return;if(this[_0x4d1b9f(0x442)]===_0xc61c35&&this['_targetSkewY']===_0x2a0c3e)return;this['_targetSkewX']=_0xc61c35,this[_0x4d1b9f(0x25a)]=_0x2a0c3e,this[_0x4d1b9f(0x9de)]=_0x462982,this[_0x4d1b9f(0x7db)]=_0x462982,this[_0x4d1b9f(0x38e)]=_0x579b5c||'Linear',_0x462982<=0x0&&(this[_0x4d1b9f(0x8d2)][_0x4d1b9f(0x6b9)]['x']=this[_0x4d1b9f(0x442)],this[_0x4d1b9f(0x8d2)][_0x4d1b9f(0x6b9)]['y']=this[_0x4d1b9f(0x25a)]);},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x290)]=function(){const _0x3fb62f=_0x4ca73a;if(this[_0x3fb62f(0x9de)]<=0x0)return;if(!this[_0x3fb62f(0x8d2)])return;const _0x46754b=this[_0x3fb62f(0x9de)],_0xc1575f=this[_0x3fb62f(0x7db)],_0x4c08a6=this[_0x3fb62f(0x38e)],_0x17a2f6=this[_0x3fb62f(0x8d2)];if(Imported['VisuMZ_0_CoreEngine'])_0x17a2f6['skew']['x']=this[_0x3fb62f(0x7e7)](_0x17a2f6[_0x3fb62f(0x6b9)]['x'],this[_0x3fb62f(0x442)],_0x46754b,_0xc1575f,_0x4c08a6),_0x17a2f6[_0x3fb62f(0x6b9)]['y']=this[_0x3fb62f(0x7e7)](_0x17a2f6[_0x3fb62f(0x6b9)]['y'],this[_0x3fb62f(0x25a)],_0x46754b,_0xc1575f,_0x4c08a6);else{if(_0x3fb62f(0x247)===_0x3fb62f(0x247))_0x17a2f6[_0x3fb62f(0x6b9)]['x']=(_0x17a2f6[_0x3fb62f(0x6b9)]['x']*(_0x46754b-0x1)+this[_0x3fb62f(0x442)])/_0x46754b,_0x17a2f6[_0x3fb62f(0x6b9)]['y']=(_0x17a2f6['skew']['y']*(_0x46754b-0x1)+this[_0x3fb62f(0x25a)])/_0x46754b;else{function _0x3d13af(){const _0x487edb=_0x3fb62f;if(!_0x33da14[_0x487edb(0x499)][_0x487edb(0x800)][_0x487edb(0xa94)]['NameLegacy'])return;this[_0x487edb(0x315)]=new _0x58d726(),this[_0x487edb(0x315)]['x']=this['_windowLayer']['x'],this['_enemyNameContainer']['y']=this[_0x487edb(0x85d)]['y'];const _0x460dfb=this['children'][_0x487edb(0x621)](this[_0x487edb(0x85d)]);this['addChildAt'](this[_0x487edb(0x315)],_0x460dfb);for(let _0x508199=0x0;_0x508199<0x8;_0x508199++){const _0x5e443c=new _0x1fb59c(_0x508199);this[_0x487edb(0x315)][_0x487edb(0x3b4)](_0x5e443c);}}}}this[_0x3fb62f(0x9de)]--;if(this[_0x3fb62f(0x9de)]<=0x0)this[_0x3fb62f(0x24b)]();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x24b)]=function(){const _0x4f0435=_0x4ca73a;this['_distortionSprite'][_0x4f0435(0x6b9)]['x']=this['_targetSkewX'],this[_0x4f0435(0x8d2)][_0x4f0435(0x6b9)]['y']=this[_0x4f0435(0x25a)];},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0xb94)]=function(){const _0x57de1c=_0x4ca73a;return this[_0x57de1c(0x9de)]>0x0;},Sprite_Battler[_0x4ca73a(0x90a)]['startSpin']=function(_0x1ea470,_0x17f56e,_0x1bd6b6,_0x55430c){const _0x53b654=_0x4ca73a;if(!this[_0x53b654(0x894)]())return;if(!this['_distortionSprite'])return;if(this[_0x53b654(0x2ed)]===_0x1ea470)return;this[_0x53b654(0x2ed)]=_0x1ea470,this[_0x53b654(0x350)]=_0x17f56e,this['_angleWholeDuration']=_0x17f56e,this[_0x53b654(0x841)]=_0x1bd6b6||_0x53b654(0xb91),this[_0x53b654(0x207)]=_0x55430c;if(this[_0x53b654(0x207)]===undefined){if('mUCzb'===_0x53b654(0x2be))this['_angleRevertOnFinish']=!![];else{function _0x4f9018(){const _0x1d4c89=_0x53b654;_0x3bd15e[_0x1d4c89(0x1f1)](0x0);}}}if(_0x17f56e<=0x0){if(_0x53b654(0x7dc)!==_0x53b654(0x7dc)){function _0x32e2dc(){const _0x4db805=_0x53b654;_0x21a48a['BattleCore']['BattleManager_makeActionOrders']['call'](this),this['_actionBattlers']=this['_actionBattlers'][_0x4db805(0x5be)](_0x4b6634=>_0x4b6634&&_0x4b6634[_0x4db805(0x773)]());}}else{this[_0x53b654(0xa53)]=_0x1ea470;if(this[_0x53b654(0x207)]){if(_0x53b654(0xaba)!==_0x53b654(0xa2b))this[_0x53b654(0x2ed)]=0x0,this[_0x53b654(0xa53)]=0x0;else{function _0x2135f6(){const _0x5e3907=_0x53b654,_0xe01c67=_0x396370[_0x5e3907(0x499)][_0x5e3907(0x800)]['ActionSequence'],_0x1296ab=_0xe01c67['StepDistanceX'],_0x3e2298=_0xe01c67[_0x5e3907(0x450)],_0x232986=_0xe01c67[_0x5e3907(0x6da)];this[_0x5e3907(0x2ae)](_0x1296ab,_0x3e2298,_0x232986);}}}}}},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x707)]=function(){const _0x14b00c=_0x4ca73a;this['updateAngleCalculations'](),this[_0x14b00c(0x860)]();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x9f5)]=function(){const _0x589c63=_0x4ca73a;if(this['_angleDuration']<=0x0)return;const _0x2f13b4=this['_angleDuration'],_0x35ccdc=this[_0x589c63(0x9f7)],_0x5b231d=this[_0x589c63(0x841)];if(Imported[_0x589c63(0x5d1)])this[_0x589c63(0xa53)]=this[_0x589c63(0x7e7)](this[_0x589c63(0xa53)],this[_0x589c63(0x2ed)],_0x2f13b4,_0x35ccdc,_0x5b231d);else{if('GtgvT'!=='okBCk')this[_0x589c63(0xa53)]=(this[_0x589c63(0xa53)]*(_0x2f13b4-0x1)+this[_0x589c63(0x2ed)])/_0x2f13b4;else{function _0x1709a8(){const _0x4d330d=_0x589c63;this[_0x4d330d(0x1b5)]();}}}this['_angleDuration']--;if(this[_0x589c63(0x350)]<=0x0)this[_0x589c63(0x94e)]();},Sprite_Battler['prototype'][_0x4ca73a(0x94e)]=function(){const _0x36786a=_0x4ca73a;this['_currentAngle']=this['_targetAngle'],this[_0x36786a(0x207)]&&(this[_0x36786a(0x2ed)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x665)]=function(){const _0x21e0cd=_0x4ca73a;return this[_0x21e0cd(0x350)]>0x0;},Sprite_Battler['prototype'][_0x4ca73a(0x860)]=function(){const _0x59c2cb=_0x4ca73a;if(!this['_distortionSprite'])return;const _0x3d637d=this[_0x59c2cb(0xa53)],_0x32ea30=this[_0x59c2cb(0xaed)]['x'],_0x1622cb=this[_0x59c2cb(0x51b)][_0x59c2cb(0x4bb)]()?-0x1:0x1;this[_0x59c2cb(0x8d2)][_0x59c2cb(0x6f4)]=_0x3d637d*_0x32ea30*_0x1622cb;const _0x41cc20=this['_distortionSprite'][_0x59c2cb(0xaed)]['y'];this['_distortionSprite']['y']=this[_0x59c2cb(0x38c)]*-0.5*(0x2-_0x41cc20),this['_distortionSprite']['y']=Math[_0x59c2cb(0x4f0)](this[_0x59c2cb(0x8d2)]['y']);const _0x13a5fc=[this[_0x59c2cb(0x286)],this[_0x59c2cb(0x3ba)],this[_0x59c2cb(0x3a1)]];for(const _0x2c7b69 of _0x13a5fc){if(_0x59c2cb(0x31c)==='PGDBv'){if(!_0x2c7b69)continue;_0x2c7b69['y']=this[_0x59c2cb(0x38c)]*0.5;}else{function _0x3d7a7d(){const _0x1485e5=_0x59c2cb;if(!this['_shadowSprite'])return;this[_0x1485e5(0x654)]['y']=this['_baseY']-this['y']-0x2;}}}this[_0x59c2cb(0x654)]&&(this['_shadowScale']=this[_0x59c2cb(0x1ff)]??0x1,this[_0x59c2cb(0x654)][_0x59c2cb(0xaed)]['x']=this[_0x59c2cb(0x8d2)]['scale']['x']*this['_shadowScale'],this['_shadowSprite'][_0x59c2cb(0xaed)]['y']=this['_distortionSprite'][_0x59c2cb(0xaed)]['y']*this[_0x59c2cb(0x1ff)]);},VisuMZ[_0x4ca73a(0x499)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x44a)],Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x44a)]=function(){const _0x219786=_0x4ca73a;VisuMZ['BattleCore'][_0x219786(0x915)][_0x219786(0x37c)](this),VisuMZ['BattleCore']['Settings'][_0x219786(0xb24)][_0x219786(0x50d)]&&this['createHpGaugeSprite']();},VisuMZ['BattleCore'][_0x4ca73a(0xa28)]=Sprite_Enemy['prototype'][_0x4ca73a(0x685)],Sprite_Enemy['prototype'][_0x4ca73a(0x685)]=function(){const _0x3416b9=_0x4ca73a;VisuMZ['BattleCore'][_0x3416b9(0x800)][_0x3416b9(0xb24)][_0x3416b9(0xb11)]&&this[_0x3416b9(0x59a)](),VisuMZ[_0x3416b9(0x499)]['Sprite_Enemy_createStateIconSprite'][_0x3416b9(0x37c)](this);},Sprite_Battler['prototype']['createHpGaugeSprite']=function(){const _0xb03847=_0x4ca73a;if(!ConfigManager[_0xb03847(0x1a6)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x26bb0d=VisuMZ['BattleCore'][_0xb03847(0x800)][_0xb03847(0xb24)],_0x1fe05a=new Sprite_HpGauge();_0x1fe05a[_0xb03847(0x342)]['x']=_0x26bb0d[_0xb03847(0x699)],_0x1fe05a[_0xb03847(0x342)]['y']=_0x26bb0d[_0xb03847(0x1a2)],_0x1fe05a['scale']['x']=_0x1fe05a[_0xb03847(0xaed)]['y']=_0x26bb0d[_0xb03847(0x5c6)],this['_hpGaugeSprite']=_0x1fe05a,this[_0xb03847(0x3b4)](this[_0xb03847(0x6f9)]);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x82b)]=Sprite_Battler['prototype'][_0x4ca73a(0x59c)],Sprite_Battler['prototype'][_0x4ca73a(0x59c)]=function(_0x2d0f40){const _0x233cc9=_0x4ca73a,_0x3194f3=this['_battler'];VisuMZ[_0x233cc9(0x499)][_0x233cc9(0x82b)][_0x233cc9(0x37c)](this,_0x2d0f40),this[_0x233cc9(0x6bb)](_0x2d0f40);if(_0x3194f3!==_0x2d0f40)this[_0x233cc9(0xa5b)]();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x6bb)]=function(_0x51a192){const _0x3602b1=_0x4ca73a;if(!_0x51a192)return;if(!this[_0x3602b1(0x6f9)])return;if(_0x51a192[_0x3602b1(0x4bb)]()){}else{if(_0x51a192[_0x3602b1(0xa95)]()){if('urpET'==='ODFfL'){function _0x555b54(){const _0x574fd1=_0x3602b1,_0x1c03a2=_0x407e3f[_0x574fd1(0x94c)](this['item']()),_0x476c7c=_0x4d99af[_0x574fd1(0x638)][_0x1c03a2];try{return _0x476c7c[_0x574fd1(0x369)][_0x574fd1(0x37c)](this,_0x53ac33);}catch(_0x4d1174){if(_0x73c479[_0x574fd1(0x69d)]())_0x37eb25[_0x574fd1(0x519)](_0x4d1174);return _0x401160[_0x574fd1(0x499)][_0x574fd1(0x388)]['call'](this);}}}else{if(this[_0x3602b1(0x1a5)]===Sprite_SvEnemy&&!_0x51a192['hasSvBattler']())return;}}}this[_0x3602b1(0x6f9)][_0x3602b1(0x584)](_0x51a192,'hp');},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x1cb)]=function(){const _0x124d78=_0x4ca73a;if(!this[_0x124d78(0x51b)])return;if(!this[_0x124d78(0x6f9)])return;const _0x345463=VisuMZ[_0x124d78(0x499)][_0x124d78(0x800)][_0x124d78(0xb24)],_0x5dd8de=this[_0x124d78(0x6f9)];_0x5dd8de['visible']=this[_0x124d78(0x8f0)]();const _0x3ab35f=_0x345463[_0x124d78(0x3f3)],_0x274ce6=_0x345463[_0x124d78(0x7ad)];_0x5dd8de['x']=_0x3ab35f,_0x5dd8de['x']+=this[_0x124d78(0x51b)][_0x124d78(0xa09)](),_0x5dd8de['y']=-this[_0x124d78(0x38c)]+_0x274ce6,_0x5dd8de['y']+=this['_battler'][_0x124d78(0x21d)]();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x8f0)]=function(){const _0x1d9c22=_0x4ca73a;if(!this['_battler'])return![];if(this['_battler'][_0x1d9c22(0x4bb)]())return!![];const _0x1e5cc8=this[_0x1d9c22(0x51b)][_0x1d9c22(0xa68)]()[_0x1d9c22(0xaa8)];if(_0x1e5cc8[_0x1d9c22(0x2b2)](/<SHOW HP GAUGE>/i))return!![];if(_0x1e5cc8[_0x1d9c22(0x2b2)](/<HIDE HP GAUGE>/i))return![];const _0x19acaf=VisuMZ[_0x1d9c22(0x499)][_0x1d9c22(0x800)]['HpGauge'];if(_0x19acaf['RequiresDefeat']){if(_0x1d9c22(0x26b)===_0x1d9c22(0x99e)){function _0x3e695e(){const _0xf5f508=_0x1d9c22;this[_0xf5f508(0x922)]()[_0xf5f508(0x3b4)](_0x2d73e0);if(_0x5d025e[_0xf5f508(0x6c6)]())_0x3508c1[_0xf5f508(0xaed)]['x']=-0x1;}}else{if(_0x19acaf['BTestBypass']&&BattleManager[_0x1d9c22(0x97f)]())return!![];if(this['_battler'][_0x1d9c22(0x357)])return![];return this[_0x1d9c22(0x51b)][_0x1d9c22(0x9db)]();}}return!![];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x417)]=Sprite_Battler[_0x4ca73a(0x90a)]['isMoving'],Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x289)]=function(){const _0x2a20cd=_0x4ca73a;if(!this[_0x2a20cd(0x51b)])return![];return VisuMZ['BattleCore'][_0x2a20cd(0x417)][_0x2a20cd(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x867)]=Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x2ae)],Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x2ae)]=function(_0x388a49,_0x2260aa,_0x3f6dc4){const _0x40878e=_0x4ca73a;this[_0x40878e(0x894)]()&&VisuMZ[_0x40878e(0x499)][_0x40878e(0x867)]['call'](this,_0x388a49,_0x2260aa,_0x3f6dc4);},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x894)]=function(){const _0x7a1ab7=_0x4ca73a;if(this['_battler']&&this[_0x7a1ab7(0x51b)][_0x7a1ab7(0x6ee)]())return![];if(this['_battler']&&!this['_battler'][_0x7a1ab7(0xa99)]())return![];return $gameSystem[_0x7a1ab7(0x395)]();},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x25d)]=function(){},Sprite_Battler['prototype']['stepBack']=function(){const _0x2bbfed=_0x4ca73a;this[_0x2bbfed(0x2ae)](0x0,0x0,0xc);},Sprite_Battler[_0x4ca73a(0x90a)]['retreat']=function(){},Sprite_Battler[_0x4ca73a(0x90a)][_0x4ca73a(0x873)]=function(){const _0x2c9c68=_0x4ca73a,_0x3e8c67=VisuMZ['BattleCore'][_0x2c9c68(0x800)]['Actor'],_0x50cfe0=this[_0x2c9c68(0x51b)]&&this[_0x2c9c68(0x51b)]['isActor']()?0x1:-0x1,_0xdc42f4=this[_0x2c9c68(0x9e9)]-this[_0x2c9c68(0x716)]+_0x50cfe0*_0x3e8c67[_0x2c9c68(0xa42)],_0x1b97ca=this[_0x2c9c68(0xa56)]-this['_homeY']+_0x50cfe0*_0x3e8c67[_0x2c9c68(0x739)],_0x3ef2a4=_0x3e8c67[_0x2c9c68(0xacb)];this[_0x2c9c68(0x2ae)](_0xdc42f4,_0x1b97ca,_0x3ef2a4);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x7f1)]=Sprite_Actor['prototype'][_0x4ca73a(0xa46)],Sprite_Actor[_0x4ca73a(0x90a)]['initMembers']=function(){const _0x3048cf=_0x4ca73a;VisuMZ[_0x3048cf(0x499)][_0x3048cf(0x7f1)]['call'](this),this[_0x3048cf(0xb5f)]();},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0xa10)]=function(){return this['_distortionSprite']||this['_mainSprite']||this;},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x28e)]=Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x8ce)],Sprite_Actor['prototype'][_0x4ca73a(0x8ce)]=function(){},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x3ce)]=function(_0x2caec1){const _0xb75de9=_0x4ca73a;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x2caec1)return;if(!_0x2caec1[_0xb75de9(0x894)]())return;VisuMZ[_0xb75de9(0x499)][_0xb75de9(0x28e)][_0xb75de9(0x37c)](this);},VisuMZ['BattleCore'][_0x4ca73a(0x559)]=Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x373)],Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x373)]=function(_0x5360e2){const _0x13ea51=_0x4ca73a;if(VisuMZ[_0x13ea51(0x499)][_0x13ea51(0x800)][_0x13ea51(0x4e4)][_0x13ea51(0x94f)]){if(_0x13ea51(0x32b)===_0x13ea51(0x32b))VisuMZ['BattleCore'][_0x13ea51(0x800)]['Actor']['HomePosJS']['call'](this,_0x5360e2);else{function _0x54d5a5(){const _0x2ece1f=_0x13ea51;if(!_0x2e8cd5[_0x2ece1f(0x6e0)](_0x4f607f))return![];}}}else{if('wlwYh'===_0x13ea51(0x4f2)){function _0x1ce8a0(){const _0x2604d3=_0x13ea51;this[_0x2604d3(0x603)]=0x0;}}else VisuMZ[_0x13ea51(0x499)][_0x13ea51(0x559)][_0x13ea51(0x37c)](this,_0x5360e2);}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x95c)]=Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x59c)],Sprite_Actor[_0x4ca73a(0x90a)]['setBattler']=function(_0x4ce772){const _0x415ff2=_0x4ca73a;VisuMZ[_0x415ff2(0x499)][_0x415ff2(0x95c)][_0x415ff2(0x37c)](this,_0x4ce772),this[_0x415ff2(0x83a)](_0x4ce772);},Sprite_Actor['prototype'][_0x4ca73a(0x83a)]=function(_0x110678){const _0x270a23=_0x4ca73a;if(!_0x110678)return;if(!this[_0x270a23(0x286)])return;this[_0x270a23(0x286)][_0x270a23(0x342)]['x']=this[_0x270a23(0x463)][_0x270a23(0x325)](),this[_0x270a23(0x286)][_0x270a23(0x342)]['y']=this['_actor'][_0x270a23(0x9bd)](),this[_0x270a23(0x96b)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x7c9)]=Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x46b)],Sprite_Actor['prototype'][_0x4ca73a(0x46b)]=function(){const _0x573077=_0x4ca73a;VisuMZ[_0x573077(0x499)][_0x573077(0x7c9)][_0x573077(0x37c)](this),this[_0x573077(0x463)]&&(this[_0x573077(0x998)](),this[_0x573077(0x4dc)]());},VisuMZ[_0x4ca73a(0x499)]['Sprite_Actor_updateBitmap']=Sprite_Actor['prototype'][_0x4ca73a(0xb4e)],Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0xb4e)]=function(){const _0x544e4a=_0x4ca73a;VisuMZ['BattleCore']['Sprite_Actor_updateBitmap'][_0x544e4a(0x37c)](this),this[_0x544e4a(0x286)]&&this[_0x544e4a(0x286)][_0x544e4a(0xa74)]&&this[_0x544e4a(0x51b)]&&(this[_0x544e4a(0x286)][_0x544e4a(0xa74)][_0x544e4a(0x7f0)]!==this['_battler'][_0x544e4a(0x8e4)]()&&(this[_0x544e4a(0x286)][_0x544e4a(0xa74)]['smooth']=this[_0x544e4a(0x51b)][_0x544e4a(0x8e4)]()));},VisuMZ[_0x4ca73a(0x499)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x7e5)],Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x7e5)]=function(){const _0x1c8d6d=_0x4ca73a;VisuMZ[_0x1c8d6d(0x499)][_0x1c8d6d(0x996)][_0x1c8d6d(0x37c)](this),this[_0x1c8d6d(0xa67)]();},Sprite_Actor['prototype'][_0x4ca73a(0xa67)]=function(){const _0x4ec378=_0x4ca73a;if(!this[_0x4ec378(0x286)])return;if(!this[_0x4ec378(0x654)])return;this[_0x4ec378(0x96b)](),this['updateShadowPosition']();},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x998)]=function(){const _0x379ecb=_0x4ca73a;this['_stateSprite'][_0x379ecb(0xaed)]['x']=0x1/(this[_0x379ecb(0xaed)]['x']||0.001),this[_0x379ecb(0x538)][_0x379ecb(0xaed)]['y']=0x1/(this[_0x379ecb(0xaed)]['y']||0.001);},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x4dc)]=function(){const _0x5daaf6=_0x4ca73a;if(!$gameSystem[_0x5daaf6(0x395)]()&&this[_0x5daaf6(0x1a5)]===Sprite_Actor){if(_0x5daaf6(0x9b6)!==_0x5daaf6(0xa18)){const _0x362239=Scene_Battle[_0x5daaf6(0x90a)][_0x5daaf6(0x912)]();[_0x5daaf6(0x2f9),'list',_0x5daaf6(0x61f),'border'][_0x5daaf6(0x93d)](_0x362239)&&(this[_0x5daaf6(0x3bd)]=0x0);}else{function _0x24afa2(){const _0x54f27f=_0x5daaf6;if(!_0x1b837c[_0x54f27f(0xb22)]())return;_0x35bb97[_0x54f27f(0x8d4)](_0x538883,_0x51b11d);const _0x150cab=_0x2d7344[_0x54f27f(0x260)](),_0x1212b7=_0x3dae76[_0x54f27f(0x627)]*_0x2cfa67[_0x54f27f(0xaf9)];_0x150cab[_0x54f27f(0x591)](_0x1212b7);}}}},Sprite_Actor['prototype'][_0x4ca73a(0x4bc)]=function(){const _0x298b92=_0x4ca73a,_0x4a23c8=this[_0x298b92(0x463)];if(_0x4a23c8){const _0x1010c7=_0x4a23c8[_0x298b92(0x79e)]();if(_0x4a23c8[_0x298b92(0x484)]()||_0x4a23c8[_0x298b92(0x30e)]())this[_0x298b92(0x620)]('walk');else{if(_0x1010c7===0x3)this[_0x298b92(0x620)](_0x298b92(0x785));else{if(_0x1010c7===0x2)this[_0x298b92(0x620)]('sleep');else{if(this[_0x298b92(0x5a4)]){if('inFUE'!==_0x298b92(0xb57))this[_0x298b92(0x620)](_0x298b92(0x656));else{function _0x19e377(){const _0x546c50=_0x298b92;return!_0x157807[_0x546c50(0x7e1)]()?this[_0x546c50(0x67c)](_0x542086):_0x306199[_0x546c50(0x499)][_0x546c50(0x8cd)]['call'](this,_0x5ef77d);}}}else{if(_0x4a23c8['isCharging']())this[_0x298b92(0x620)](_0x298b92(0x591));else{if(_0x4a23c8['isChanting']())this[_0x298b92(0x620)](_0x298b92(0x6af));else{if(_0x4a23c8[_0x298b92(0x68f)]()||_0x4a23c8['isGuardWaiting']())this[_0x298b92(0x620)](_0x298b92(0x386));else{if(_0x1010c7===0x1){if(_0x298b92(0xa23)!=='GNEWx'){function _0x146eaa(){const _0x5e96d0=_0x298b92;this[_0x5e96d0(0x998)](),this['updateStyleOpacity']();}}else this['startMotion']('abnormal');}else{if(_0x4a23c8['isDying']())this[_0x298b92(0x620)]('dying');else{if(_0x4a23c8['isUndecided']())this[_0x298b92(0x620)]('walk');else _0x4a23c8['currentAction']()?this[_0x298b92(0x620)](_0x298b92(0x591)):this[_0x298b92(0x620)](_0x298b92(0xb79));}}}}}}}}}}},Sprite_Actor['prototype']['retreat']=function(){const _0x588e28=_0x4ca73a,_0x914c20=0xa,_0x556c58=0x12c*_0x914c20,_0x3914b8=0x1e*_0x914c20;this[_0x588e28(0x2ae)](_0x556c58,0x0,_0x3914b8);},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x211)]=function(){const _0x9f5c58=_0x4ca73a;Sprite_Battler[_0x9f5c58(0x90a)]['onMoveEnd'][_0x9f5c58(0x37c)](this);},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x81e)]=function(){const _0x46c602=_0x4ca73a;return Sprite_Battler[_0x46c602(0xaf9)];},Sprite_Weapon[_0x4ca73a(0x90a)][_0x4ca73a(0xb3c)]=function(){const _0x2a8d6d=_0x4ca73a;return Sprite_Battler[_0x2a8d6d(0xaf9)];},Sprite_Actor['prototype'][_0x4ca73a(0x936)]=function(){},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x384)]=function(){},Sprite_Actor[_0x4ca73a(0x90a)]['updateMotionCount']=function(){const _0x4db86a=_0x4ca73a;if(this[_0x4db86a(0x731)]&&++this['_motionCount']>=this['motionSpeed']()){if(this[_0x4db86a(0x731)][_0x4db86a(0x766)])this[_0x4db86a(0x66c)]=(this[_0x4db86a(0x66c)]+0x1)%0x4;else{if(this[_0x4db86a(0x66c)]<0x2){if('MRbUs'===_0x4db86a(0x483))this['_pattern']++;else{function _0x9ce5ea(){const _0x12a332=_0x4db86a;return _0x5b19a5[_0x12a332(0x499)][_0x12a332(0x800)][_0x12a332(0x1b1)]['BackColor'];}}}else this[_0x4db86a(0x4bc)]();}this[_0x4db86a(0x4d1)]=0x0;}},Sprite_Actor['prototype'][_0x4ca73a(0x5cb)]=function(_0x844075){const _0x1245f3=_0x4ca73a;if(_0x844075==='victory')this[_0x1245f3(0x279)]=!![];if(this['_battler']&&this[_0x1245f3(0x51b)][_0x1245f3(0x6ee)]()){if(_0x1245f3(0x377)!==_0x1245f3(0x525)){this[_0x1245f3(0x731)]=Sprite_Actor[_0x1245f3(0x695)][_0x1245f3(0x785)];return;}else{function _0x3079a3(){const _0x4c0210=_0x1245f3;_0x2d42f9['_battleCoreBattleStartEvent']?this[_0x4c0210(0x34b)]():_0x3f6c2a['BattleCore'][_0x4c0210(0x4d6)]['call'](this);}}}const _0x8a6a34=Sprite_Actor['MOTIONS'][_0x844075];this['_motion']=_0x8a6a34,this[_0x1245f3(0x4d1)]=0x0,this[_0x1245f3(0x66c)]=0x0;},Sprite_Actor['prototype'][_0x4ca73a(0x540)]=function(_0x2fd0b6){const _0x118993=_0x4ca73a;this[_0x118993(0x1e6)](),this[_0x118993(0xad7)]['setup'](_0x2fd0b6),this[_0x118993(0x463)]['clearWeaponAnimation']();},Sprite_Actor[_0x4ca73a(0x90a)]['adjustWeaponSpriteOffset']=function(){const _0x556e2e=_0x4ca73a;let _0x24b8e5=-0x10,_0x46bb4f=this[_0x556e2e(0x38c)]*0.5;const _0x233086=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x518fd5=this[_0x556e2e(0x51b)]['traitObjects']()[_0x556e2e(0x8f9)](_0x169cb9=>_0x169cb9&&_0x169cb9[_0x556e2e(0xaa8)][_0x556e2e(0x2b2)](_0x233086)?Number(RegExp['$1']):0x0),_0x51a804=this[_0x556e2e(0x51b)][_0x556e2e(0x909)]()['map'](_0x478374=>_0x478374&&_0x478374['note'][_0x556e2e(0x2b2)](_0x233086)?Number(RegExp['$2']):0x0);_0x24b8e5=_0x518fd5[_0x556e2e(0x93c)]((_0x2e6c77,_0x4bf4a1)=>_0x2e6c77+_0x4bf4a1,_0x24b8e5),_0x46bb4f=_0x51a804['reduce']((_0x19ceb5,_0x4699e3)=>_0x19ceb5+_0x4699e3,_0x46bb4f),this['_weaponSprite']['x']=_0x24b8e5,this['_weaponSprite']['y']=_0x46bb4f,this['_weaponSprite'][_0x556e2e(0x46b)]();},Sprite_Weapon['prototype']['setup']=function(_0x1868ba){const _0x1da3dc=_0x4ca73a;this[_0x1da3dc(0x6ae)]=_0x1868ba,this[_0x1da3dc(0x4a5)]=-0x1,this['_pattern']=0x0,this[_0x1da3dc(0xadb)](),this['updateFrame']();},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x63e)]=function(){},Sprite_Actor['prototype'][_0x4ca73a(0x25d)]=function(){const _0x670ef2=_0x4ca73a,_0x12cc3b=VisuMZ[_0x670ef2(0x499)][_0x670ef2(0x800)]['ActionSequence'],_0x48c250=_0x12cc3b[_0x670ef2(0x220)],_0x5a3aca=_0x12cc3b['StepDistanceY'],_0x2cab5b=_0x12cc3b['StepDuration'];this[_0x670ef2(0x2ae)](-_0x48c250,-_0x5a3aca,_0x2cab5b);},VisuMZ['BattleCore'][_0x4ca73a(0xb8e)]=Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x5d2)],Sprite_Actor['prototype'][_0x4ca73a(0x5d2)]=function(){const _0x4dd868=_0x4ca73a;this[_0x4dd868(0x5f5)](),VisuMZ['BattleCore']['Sprite_Actor_updateFrame'][_0x4dd868(0x37c)](this);},Sprite_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x5f5)]=function(){const _0x26d968=_0x4ca73a;if(this[_0x26d968(0x51b)]&&this[_0x26d968(0x51b)]['_freezeMotionData']){const _0x5149b1=this[_0x26d968(0x51b)]['_freezeMotionData'];this[_0x26d968(0x731)]=Sprite_Actor[_0x26d968(0x695)][_0x5149b1[_0x26d968(0xac2)]],this['_pattern']=_0x5149b1['pattern'];const _0x276439=this['_weaponSprite'];_0x276439[_0x26d968(0xa5c)](_0x5149b1[_0x26d968(0x8ea)],_0x5149b1[_0x26d968(0xa1b)]),this['adjustWeaponSpriteOffset']();}},Sprite_Weapon['prototype'][_0x4ca73a(0xa5c)]=function(_0x57eb91,_0x187788){const _0x25fe9a=_0x4ca73a;this['_weaponImageId']=_0x57eb91,this[_0x25fe9a(0x4a5)]=-Infinity,this[_0x25fe9a(0x66c)]=_0x187788,this[_0x25fe9a(0xadb)](),this['updateFrame']();},Sprite_Enemy['prototype'][_0x4ca73a(0xa46)]=function(){const _0x2e136e=_0x4ca73a;Sprite_Battler[_0x2e136e(0x90a)][_0x2e136e(0xa46)][_0x2e136e(0x37c)](this),this[_0x2e136e(0x911)]=null,this[_0x2e136e(0x7f2)]=![],this[_0x2e136e(0xa80)]='',this[_0x2e136e(0x1b0)]=0x0,this[_0x2e136e(0x7c3)]=null,this[_0x2e136e(0x396)]=0x0,this[_0x2e136e(0x661)]=0x0,this[_0x2e136e(0x1b4)](),this[_0x2e136e(0x685)]();},VisuMZ[_0x4ca73a(0x499)]['Sprite_Enemy_update']=Sprite_Enemy[_0x4ca73a(0x90a)]['update'],Sprite_Enemy[_0x4ca73a(0x90a)]['update']=function(){const _0x27ff40=_0x4ca73a;VisuMZ[_0x27ff40(0x499)][_0x27ff40(0x29f)][_0x27ff40(0x37c)](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x4ca73a(0x90a)]['createMainSprite']=function(){const _0xc4737=_0x4ca73a;this[_0xc4737(0x286)]=new Sprite(),this[_0xc4737(0x286)]['anchor']['x']=0.5,this[_0xc4737(0x286)]['anchor']['y']=0x1,this[_0xc4737(0x3b4)](this[_0xc4737(0x286)]),this[_0xc4737(0xb5f)]();},Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xa10)]=function(){const _0x4607d6=_0x4ca73a;return this[_0x4607d6(0x8d2)]||this[_0x4607d6(0x286)]||this;},Sprite_Enemy['prototype']['loadBitmap']=function(_0x698917){const _0x578540=_0x4ca73a;this[_0x578540(0xa74)]=new Bitmap(0x1,0x1);if($gameSystem[_0x578540(0x395)]()){if(_0x578540(0x274)!==_0x578540(0x90d))this['_mainSprite'][_0x578540(0xa74)]=ImageManager['loadSvEnemy'](_0x698917);else{function _0xfee824(){const _0x5c2468=_0x578540;this[_0x5c2468(0x40d)][_0x5c2468(0x1e3)]=_0x593f3f,this[_0x5c2468(0x526)][_0x5c2468(0xb6d)](_0x314243),this['_logWindow'][_0x5c2468(0x1d3)](_0x41a127,this[_0x5c2468(0x40d)]),this['_action'][_0x5c2468(0x798)](_0x54151b),this['_logWindow']['displayActionResults'](_0xbde55c,_0x3c2573);}}}else this[_0x578540(0x286)][_0x578540(0xa74)]=ImageManager[_0x578540(0xb14)](_0x698917);this[_0x578540(0x286)][_0x578540(0xa74)][_0x578540(0x964)](this[_0x578540(0x749)][_0x578540(0x1f3)](this));},Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x749)]=function(){const _0x4fc5a6=_0x4ca73a,_0x4dd9b1=this['_mainSprite'][_0x4fc5a6(0xa74)];if(_0x4dd9b1){if(_0x4fc5a6(0x391)===_0x4fc5a6(0x4d5)){function _0x23b48b(){this['repositionCancelButtonBorderStyle']();}}else this['bitmap']=new Bitmap(_0x4dd9b1[_0x4fc5a6(0x781)],_0x4dd9b1[_0x4fc5a6(0x38c)]);}},VisuMZ['BattleCore']['Sprite_Enemy_setHue']=Sprite_Enemy['prototype'][_0x4ca73a(0xa77)],Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xa77)]=function(_0x5cbc7f){const _0x2ad780=_0x4ca73a;this[_0x2ad780(0x286)]&&this[_0x2ad780(0x286)][_0x2ad780(0xa77)](_0x5cbc7f);},VisuMZ[_0x4ca73a(0x499)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x4ca73a(0x90a)]['initVisibility'],Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x423)]=function(){const _0x2806f6=_0x4ca73a;if(this[_0x2806f6(0x71b)]()){if('WgCFE'!=='BsLiK')VisuMZ[_0x2806f6(0x499)]['Sprite_Enemy_initVisibility'][_0x2806f6(0x37c)](this);else{function _0x202120(){const _0x1f0943=_0x2806f6;if(!_0x2ef224[_0x1f0943(0xb22)]())return;if(!_0x3d6607['VisuMZ_3_ActSeqCamera'])return;_0x5eaa22[_0x1f0943(0x8d4)](_0x1d8184,_0x5ba578);const _0xea679c=_0xc59a0[_0x1f0943(0x260)](),_0x293ac8=_0x49f976[_0x1f0943(0x8eb)];if(!_0xea679c)return;_0x454b2f[_0x1f0943(0xb83)](_0x161e6b['Angle'],_0x545d2[_0x1f0943(0xa3b)],_0x24af46[_0x1f0943(0x283)]);if(_0x293ac8)_0xea679c[_0x1f0943(0x728)](_0x1f0943(0x24f));}}}else{if(_0x2806f6(0x8f8)===_0x2806f6(0x7de)){function _0x496d70(){const _0x52c9c3=_0x2806f6;this[_0x52c9c3(0x383)]=_0x52c9c3(0x2f9);}}else this[_0x2806f6(0x7f2)]=!this[_0x2806f6(0x911)][_0x2806f6(0x55f)](),!this['_appeared']&&(this[_0x2806f6(0x3bd)]=0x0);}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xb40)]=Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xa49)],Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xa49)]=function(){const _0x357dc6=_0x4ca73a;if(this[_0x357dc6(0x71b)]())VisuMZ[_0x357dc6(0x499)][_0x357dc6(0xb40)][_0x357dc6(0x37c)](this);},Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x5d2)]=function(){const _0x36683d=_0x4ca73a;Sprite_Battler[_0x36683d(0x90a)]['updateFrame'][_0x36683d(0x37c)](this);const _0x11ef29=this['mainSprite']()||this;if(!_0x11ef29)return;!_0x11ef29['bitmap']&&(_0x11ef29['bitmap']=new Bitmap(this['width'],this[_0x36683d(0x38c)]));if(this[_0x36683d(0x7c3)]===_0x36683d(0x462))this[_0x36683d(0x286)][_0x36683d(0x6c8)](0x0,0x0,this[_0x36683d(0x286)][_0x36683d(0x781)],this[_0x36683d(0x396)]);else{if(_0x36683d(0x390)!==_0x36683d(0xa01))_0x11ef29[_0x36683d(0x6c8)](0x0,0x0,_0x11ef29[_0x36683d(0xa74)]['width'],this[_0x36683d(0xa74)][_0x36683d(0x38c)]);else{function _0x583ab8(){const _0x4fa2e9=_0x36683d;this['width']=_0x5355be[_0x4fa2e9(0x781)],this['height']=_0x290171[_0x4fa2e9(0x38c)];const _0x1e3577=this['width']/this[_0x4fa2e9(0xa74)][_0x4fa2e9(0x781)],_0x5b046e=this[_0x4fa2e9(0x38c)]/this[_0x4fa2e9(0xa74)]['height'],_0x312b7d=_0x488869[_0x4fa2e9(0x826)](_0x1e3577,_0x5b046e);this[_0x4fa2e9(0xaed)]['x']=_0x312b7d,this[_0x4fa2e9(0xaed)]['y']=_0x312b7d,this['x']=(_0x2ec296[_0x4fa2e9(0x781)]-this[_0x4fa2e9(0x781)])/0x2,this['y']=_0x2209a9[_0x4fa2e9(0x38c)]-this[_0x4fa2e9(0x38c)];}}}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x3e3)]=Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xb8d)],Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xb8d)]=function(){const _0x48214c=_0x4ca73a;if(this[_0x48214c(0x71b)]())VisuMZ['BattleCore'][_0x48214c(0x3e3)][_0x48214c(0x37c)](this);},Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x289)]=function(){const _0x1271ff=_0x4ca73a;return Sprite_Battler[_0x1271ff(0x90a)][_0x1271ff(0x289)][_0x1271ff(0x37c)](this);},VisuMZ['BattleCore'][_0x4ca73a(0x888)]=Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x998)],Sprite_Enemy[_0x4ca73a(0x90a)]['updateStateSprite']=function(){const _0x19f84a=_0x4ca73a;VisuMZ[_0x19f84a(0x499)][_0x19f84a(0x888)][_0x19f84a(0x37c)](this),this[_0x19f84a(0x8c3)]();},Sprite_Enemy[_0x4ca73a(0x90a)]['updateStateSpriteBattleCore']=function(){const _0x49c38b=_0x4ca73a,_0x5355e5=VisuMZ[_0x49c38b(0x499)]['Settings']['Enemy'];if(_0x5355e5[_0x49c38b(0x618)]&&!_0x5355e5[_0x49c38b(0x1a3)]){if(_0x49c38b(0xb3f)===_0x49c38b(0x49c)){function _0x5b55bd(){const _0x11d4a5=_0x49c38b;return this[_0x11d4a5(0x2e4)]();}}else{this['_stateIconSprite'][_0x49c38b(0x3bd)]=0x0;return;}}this[_0x49c38b(0x8cf)]['x']=0x0,this[_0x49c38b(0x8cf)]['x']+=this[_0x49c38b(0x51b)]['battleUIOffsetX'](),this['_stateIconSprite']['y']=-this[_0x49c38b(0xa74)][_0x49c38b(0x38c)]-this[_0x49c38b(0x8cf)][_0x49c38b(0x38c)],this['_stateIconSprite']['y']+=this['_battler'][_0x49c38b(0x21d)](),this[_0x49c38b(0x8cf)][_0x49c38b(0xaed)]['x']=0x1/(this['scale']['x']||0.001),this['_stateIconSprite'][_0x49c38b(0xaed)]['y']=0x1/(this[_0x49c38b(0xaed)]['y']||0.001),this[_0x49c38b(0x804)]()&&(this['_svBattlerSprite']['_stateSprite'][_0x49c38b(0xaed)]['x']=-0x1/(this[_0x49c38b(0xaed)]['x']||0.001),this[_0x49c38b(0x3ba)][_0x49c38b(0x538)][_0x49c38b(0xaed)]['y']=0x1/(this['scale']['y']||0.001));},VisuMZ['BattleCore']['Sprite_Enemy_setBattler']=Sprite_Enemy[_0x4ca73a(0x90a)]['setBattler'],Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x59c)]=function(_0x2d7d0a){const _0x5d5741=_0x4ca73a;VisuMZ['BattleCore'][_0x5d5741(0x3de)][_0x5d5741(0x37c)](this,_0x2d7d0a),this[_0x5d5741(0x8de)](_0x2d7d0a);},Sprite_Enemy[_0x4ca73a(0x90a)]['setSvBattlerSprite']=function(_0x3cc4e2){const _0x583242=_0x4ca73a;!this[_0x583242(0x3ba)]&&(this[_0x583242(0x3ba)]=new Sprite_SvEnemy(_0x3cc4e2),this[_0x583242(0xb5f)]()),this[_0x583242(0x3ba)][_0x583242(0x59c)](_0x3cc4e2);},Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x804)]=function(){const _0xe397c=_0x4ca73a;return this[_0xe397c(0x911)]&&this[_0xe397c(0x911)][_0xe397c(0x804)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xb20)]=Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xadb)],Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0xadb)]=function(_0x512bed){const _0x10dc06=_0x4ca73a;if(this[_0x10dc06(0x804)]()){const _0x3028bf=this[_0x10dc06(0x911)][_0x10dc06(0x5ca)]();this[_0x10dc06(0xa74)]=new Bitmap(_0x3028bf[_0x10dc06(0x781)],_0x3028bf[_0x10dc06(0x38c)]);}else VisuMZ[_0x10dc06(0x499)][_0x10dc06(0xb20)][_0x10dc06(0x37c)](this,_0x512bed);},Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x71b)]=function(){const _0x37e9b0=_0x4ca73a;if(this[_0x37e9b0(0x804)]()){if(_0x37e9b0(0x758)!=='kuPhU')return this[_0x37e9b0(0x911)][_0x37e9b0(0x71b)]();else{function _0x58b434(){const _0xd9a7d9=_0x37e9b0;_0x20ea0c[_0xd9a7d9(0x541)](_0x3c7067);}}}else return!![];},Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x4bc)]=function(){const _0x5a23fe=_0x4ca73a;this[_0x5a23fe(0x804)]()&&this[_0x5a23fe(0x3ba)][_0x5a23fe(0x4bc)]();},Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x5cb)]=function(_0x25dbbe){const _0x5cb677=_0x4ca73a;if(this[_0x5cb677(0x804)]())this[_0x5cb677(0x3ba)]['forceMotion'](_0x25dbbe);},Sprite_Enemy[_0x4ca73a(0x90a)][_0x4ca73a(0x540)]=function(_0x45a09e){const _0x500907=_0x4ca73a;if(this[_0x500907(0x804)]())this[_0x500907(0x3ba)][_0x500907(0x540)](_0x45a09e);},Sprite_Enemy['prototype'][_0x4ca73a(0x25d)]=function(){const _0x4acf55=_0x4ca73a,_0x39c5dc=VisuMZ[_0x4acf55(0x499)][_0x4acf55(0x800)]['ActionSequence'],_0x4e316d=_0x39c5dc[_0x4acf55(0x220)],_0x32c2d9=_0x39c5dc[_0x4acf55(0x450)],_0x1e2a81=_0x39c5dc[_0x4acf55(0x6da)];this[_0x4acf55(0x2ae)](_0x4e316d,_0x32c2d9,_0x1e2a81);};function Sprite_SvEnemy(){const _0x5955df=_0x4ca73a;this[_0x5955df(0xa47)](...arguments);}Sprite_SvEnemy[_0x4ca73a(0x90a)]=Object[_0x4ca73a(0x438)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x4ca73a(0x90a)]['constructor']=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x4ca73a(0xa47)]=function(_0x30e28b){const _0x51321e=_0x4ca73a;Sprite_Actor['prototype'][_0x51321e(0xa47)][_0x51321e(0x37c)](this,_0x30e28b),this[_0x51321e(0xaed)]['x']=-0x1,this[_0x51321e(0x538)]['scale']['x']=-0x1;},Sprite_SvEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x5f8)]=function(){},Sprite_SvEnemy['prototype']['moveToStartPosition']=function(){},Sprite_SvEnemy['prototype'][_0x4ca73a(0x373)]=function(_0x3772ee){},Sprite_SvEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x7e5)]=function(){},Sprite_SvEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x54b)]=function(){},Sprite_SvEnemy['prototype'][_0x4ca73a(0x998)]=function(){const _0x20f0eb=_0x4ca73a;this[_0x20f0eb(0x538)][_0x20f0eb(0x4b2)]=![];},Sprite_SvEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0xb4e)]=function(){const _0x5231e2=_0x4ca73a;Sprite_Battler[_0x5231e2(0x90a)][_0x5231e2(0xb4e)][_0x5231e2(0x37c)](this);const _0x5ccde6=this['_actor']['svBattlerName']();this['_battlerName']!==_0x5ccde6&&(this[_0x5231e2(0xa80)]=_0x5ccde6,this['_mainSprite']['bitmap']=ImageManager['loadSvActor'](_0x5ccde6));if(this['_mainSprite']&&this[_0x5231e2(0x286)][_0x5231e2(0xa74)]&&this[_0x5231e2(0x51b)]){if(this[_0x5231e2(0x286)][_0x5231e2(0xa74)][_0x5231e2(0x7f0)]!==this[_0x5231e2(0x51b)]['battlerSmoothImage']()){if(_0x5231e2(0x803)!==_0x5231e2(0x803)){function _0x551e89(){const _0x53d171=_0x5231e2,_0x485d3d=_0x59d078[_0x53d171(0xa1a)]('['+_0x128735['$1'][_0x53d171(0x2b2)](/\d+/g)+']');for(const _0x294667 of _0x485d3d){if(_0x12012f['value'](_0x294667))return![];}return!![];}}else this['_mainSprite'][_0x5231e2(0xa74)][_0x5231e2(0x7f0)]=this[_0x5231e2(0x51b)]['battlerSmoothImage']();}}},Sprite_SvEnemy['prototype'][_0x4ca73a(0x675)]=function(){},Sprite_SvEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x2ae)]=function(_0x5c93d2,_0xf091e2,_0x2ea0d4){const _0x4d0af3=_0x4ca73a;if(this[_0x4d0af3(0x8be)])this[_0x4d0af3(0x8be)]['startMove'](_0x5c93d2,_0xf091e2,_0x2ea0d4);},Sprite_SvEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x4bc)]=function(){const _0x37d2af=_0x4ca73a,_0x339e25=this['_actor'];if(_0x339e25){const _0x118a14=_0x339e25[_0x37d2af(0x79e)]();if(_0x339e25[_0x37d2af(0x484)]()||_0x339e25[_0x37d2af(0x30e)]())this[_0x37d2af(0x620)](_0x37d2af(0xb79));else{if(_0x118a14===0x3){if(_0x37d2af(0x7af)===_0x37d2af(0x54a)){function _0x20f253(){const _0x1c630f=_0x37d2af,_0x540afe=_0x11ac17[this[_0x1c630f(0x463)][_0x1c630f(0x95a)]()];if(!_0x540afe)return;if(!this['canAddSkillCommand'](_0x540afe))return;const _0x36cffb=this[_0x1c630f(0x2f7)](),_0x1a6320=_0x53a5fa['battleCommandName'](_0x540afe),_0x3176b8=_0x8c16eb[_0x1c630f(0x262)](_0x540afe),_0x4db54d=_0x36cffb===_0x1c630f(0x5db)?_0x1a6320:_0x1c630f(0x30a)[_0x1c630f(0x26f)](_0x3176b8,_0x1a6320);this[_0x1c630f(0x459)](_0x4db54d,_0x1c630f(0x9ea),this[_0x1c630f(0x463)][_0x1c630f(0x6cd)]());}}else this[_0x37d2af(0x620)](_0x37d2af(0x785));}else{if(_0x118a14===0x2){if(_0x37d2af(0x1a4)===_0x37d2af(0x1a4))this[_0x37d2af(0x620)](_0x37d2af(0x84e));else{function _0x35a7c6(){const _0x544f16=_0x37d2af;_0x2ebb09[_0x544f16(0x499)][_0x544f16(0xa5a)][_0x544f16(0x37c)](this),this[_0x544f16(0x418)]();}}}else{if(_0x339e25[_0x37d2af(0x975)]())this[_0x37d2af(0x620)](_0x37d2af(0x6af));else{if(_0x339e25['isGuard']()||_0x339e25[_0x37d2af(0x72f)]())this['startMotion'](_0x37d2af(0x386));else{if(_0x118a14===0x1)this['startMotion'](_0x37d2af(0x48e));else{if(_0x339e25[_0x37d2af(0x9ad)]())this[_0x37d2af(0x620)](_0x37d2af(0xaf8));else _0x339e25[_0x37d2af(0x365)]()?this[_0x37d2af(0x620)](_0x37d2af(0xb79)):this[_0x37d2af(0x620)](_0x339e25[_0x37d2af(0x5ca)]()[_0x37d2af(0x358)]||'walk');}}}}}}}},Sprite_SvEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0xa1e)]=function(){const _0x330708=_0x4ca73a;return this['parent']?this[_0x330708(0x8be)][_0x330708(0x5b2)]===0x0&&this[_0x330708(0x8be)][_0x330708(0x775)]===0x0:!![];},Sprite_SvEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x8b6)]=function(){},Sprite_Damage['prototype']['setupBattleCore']=function(_0x111005){const _0x1a893f=_0x4ca73a,_0x276b16=_0x111005[_0x1a893f(0x2c8)]()||_0x111005[_0x1a893f(0xa69)]();if(_0x276b16['missed']||_0x276b16[_0x1a893f(0x2e0)]){if(_0x1a893f(0x4c3)!==_0x1a893f(0x4c3)){function _0x1288fe(){const _0x254935=_0x1a893f,_0x1b2ccf=_0x64c74e(_0x55b412['$1'])[_0x254935(0x7d2)](),_0x13ad8c=_0xb8eafc(_0xf92010['$2']);_0x50a11b[_0x1b2ccf]=_0x13ad8c,_0x4ed77d+=_0x13ad8c;}}else this[_0x1a893f(0xa90)]=0x0,this[_0x1a893f(0x49a)]();}else{if(_0x276b16[_0x1a893f(0x72e)]){if(_0x1a893f(0x91b)!=='mcDdP'){function _0x46894e(){const _0xbfc9f8=_0x1a893f;_0x275fed[_0xbfc9f8(0x499)]['Settings']['Actor']['HomePosJS'][_0xbfc9f8(0x37c)](this,_0x2d3508);}}else this['_colorType']=_0x276b16['hpDamage']>=0x0?0x0:0x1,this[_0x1a893f(0x83c)](_0x276b16[_0x1a893f(0x7ab)]);}else _0x111005[_0x1a893f(0xb34)]()&&_0x276b16[_0x1a893f(0x30f)]!==0x0&&(this[_0x1a893f(0xa90)]=_0x276b16[_0x1a893f(0x30f)]>=0x0?0x2:0x3,this['createDigits'](_0x276b16['mpDamage']));}_0x276b16[_0x1a893f(0x7d0)]&&this[_0x1a893f(0x608)]();},Sprite_Damage[_0x4ca73a(0x90a)][_0x4ca73a(0x584)]=function(_0x3f3c62){},Sprite_Damage[_0x4ca73a(0x90a)][_0x4ca73a(0x83c)]=function(_0x12d935){const _0x66ddca=_0x4ca73a;let _0x1be420=this[_0x66ddca(0x3d3)](_0x12d935);const _0x4ac0b0=this[_0x66ddca(0x565)](),_0xe7d059=Math[_0x66ddca(0x3d7)](_0x4ac0b0*0.75);for(let _0x13fc15=0x0;_0x13fc15<_0x1be420['length'];_0x13fc15++){const _0x2bee45=this['createChildSprite'](_0xe7d059,_0x4ac0b0);_0x2bee45[_0x66ddca(0xa74)][_0x66ddca(0x709)](_0x1be420[_0x13fc15],0x0,0x0,_0xe7d059,_0x4ac0b0,_0x66ddca(0x989)),_0x2bee45['x']=(_0x13fc15-(_0x1be420[_0x66ddca(0x73b)]-0x1)/0x2)*_0xe7d059,_0x2bee45['dy']=-_0x13fc15;}},Sprite_Damage['prototype'][_0x4ca73a(0x3d3)]=function(_0x3f504a){const _0x580a06=_0x4ca73a;let _0x3c8a3d=Math[_0x580a06(0x2b3)](_0x3f504a)[_0x580a06(0x375)]();this[_0x580a06(0x5fa)]()&&(_0x3c8a3d=VisuMZ[_0x580a06(0x75a)](_0x3c8a3d));const _0x368c4c=VisuMZ[_0x580a06(0x499)]['Settings']['Damage'];let _0x52af92='',_0x456342='';switch(this['_colorType']){case 0x0:_0x52af92=_0x368c4c[_0x580a06(0x8ac)]||_0x580a06(0xad4),_0x456342=TextManager['hp'];if(_0x3f504a===0x0)_0x52af92='%1';break;case 0x1:_0x52af92=_0x368c4c[_0x580a06(0x55b)]||_0x580a06(0x269),_0x456342=TextManager['hp'];break;case 0x2:_0x52af92=_0x368c4c[_0x580a06(0x495)]||'-%1\x20MP',_0x456342=TextManager['mp'];break;case 0x3:_0x52af92=_0x368c4c[_0x580a06(0x29a)]||_0x580a06(0x46d),_0x456342=TextManager['mp'];break;}return _0x52af92[_0x580a06(0x26f)](_0x3c8a3d,_0x456342)['trim']();},Sprite_Damage['prototype']['useDigitGrouping']=function(){const _0x544c37=_0x4ca73a;if(Imported[_0x544c37(0x5d1)]){if(_0x544c37(0x7b8)!=='VDvQA')return VisuMZ[_0x544c37(0x956)][_0x544c37(0x800)][_0x544c37(0x4dd)]['DigitGroupingDamageSprites'];else{function _0x133ae7(){const _0x3242ea=_0x544c37;_0x28ffa4['BattleCore'][_0x3242ea(0x64c)][_0x3242ea(0x37c)](this),this['okTargetSelectionVisibility']();}}}else return![];},Sprite_Damage[_0x4ca73a(0x90a)][_0x4ca73a(0x608)]=function(){const _0x4bf8cb=_0x4ca73a,_0x351b7a=VisuMZ[_0x4bf8cb(0x499)][_0x4bf8cb(0x800)][_0x4bf8cb(0x1b8)];this['_flashColor']=_0x351b7a[_0x4bf8cb(0x98a)][_0x4bf8cb(0x7ef)](0x0),this['_flashDuration']=_0x351b7a['CriticalDuration'];},Sprite_Damage[_0x4ca73a(0x90a)][_0x4ca73a(0xb0e)]=function(_0x1b0f3d,_0x153682){const _0x6e38de=_0x4ca73a;this[_0x6e38de(0x5f1)]=_0x153682[_0x6e38de(0x99a)]||[0x0,0x0,0x0,0x0],this[_0x6e38de(0x5f1)]=JsonEx[_0x6e38de(0x7bf)](this[_0x6e38de(0x5f1)]),this['_flashDuration']=_0x153682[_0x6e38de(0x957)]||0x0;const _0x332971=this['fontSize'](),_0x45b173=Math[_0x6e38de(0x3d7)](_0x332971*0x1e),_0x36aa30=this[_0x6e38de(0x610)](_0x45b173,_0x332971);_0x36aa30[_0x6e38de(0xa74)][_0x6e38de(0x650)]=ColorManager[_0x6e38de(0x1c4)](_0x153682[_0x6e38de(0x650)]),_0x36aa30['bitmap'][_0x6e38de(0x709)](_0x1b0f3d,0x0,0x0,_0x45b173,_0x332971,_0x6e38de(0x989)),_0x36aa30['dy']=0x0;},Sprite_Damage[_0x4ca73a(0x90a)]['setupIconTextPopup']=function(_0x246eaa,_0x557ee8,_0x584287){const _0x294427=_0x4ca73a,_0x37e6ba=Math['max'](this[_0x294427(0x565)](),ImageManager[_0x294427(0x449)]),_0x1ce213=Math[_0x294427(0x3d7)](_0x37e6ba*0x1e),_0x4ee591=this['createChildSprite'](_0x1ce213,_0x37e6ba),_0x102eec=ImageManager['iconWidth']/0x2,_0x441739=_0x4ee591[_0x294427(0xa74)][_0x294427(0x303)](_0x557ee8+'\x20');_0x4ee591[_0x294427(0xa74)][_0x294427(0x650)]=ColorManager['getColor'](_0x584287[_0x294427(0x650)]),_0x4ee591[_0x294427(0xa74)][_0x294427(0x709)](_0x557ee8,_0x102eec,0x0,_0x1ce213-_0x102eec,_0x37e6ba,'center');const _0x853f39=Math[_0x294427(0x555)]((_0x37e6ba-ImageManager[_0x294427(0x449)])/0x2),_0x31dd86=_0x1ce213/0x2-ImageManager[_0x294427(0x445)]-_0x441739/0x2+_0x102eec/0x2,_0x53d313=ImageManager[_0x294427(0x4c4)](_0x294427(0xb85)),_0x1a9c30=ImageManager[_0x294427(0x445)],_0x59c3bd=ImageManager[_0x294427(0x449)],_0x2cf99f=_0x246eaa%0x10*_0x1a9c30,_0x14cf33=Math[_0x294427(0x3d7)](_0x246eaa/0x10)*_0x59c3bd;_0x4ee591[_0x294427(0xa74)][_0x294427(0x844)](_0x53d313,_0x2cf99f,_0x14cf33,_0x1a9c30,_0x59c3bd,_0x31dd86,_0x853f39),this['_flashColor']=_0x584287[_0x294427(0x99a)]||[0x0,0x0,0x0,0x0],this[_0x294427(0x5f1)]=JsonEx['makeDeepCopy'](this[_0x294427(0x5f1)]),this[_0x294427(0x5ff)]=_0x584287['flashDuration']||0x0,_0x4ee591['dy']=0x0;},VisuMZ[_0x4ca73a(0x499)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0x4ca73a(0x90a)][_0x4ca73a(0x5d2)],Sprite_StateIcon[_0x4ca73a(0x90a)]['updateFrame']=function(){const _0x2f8f6c=_0x4ca73a;VisuMZ[_0x2f8f6c(0x499)][_0x2f8f6c(0x3b3)][_0x2f8f6c(0x37c)](this),this['opacity']=this[_0x2f8f6c(0x2c5)]>0x0?0xff:0x0;},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x761)]=Sprite_Weapon[_0x4ca73a(0x90a)][_0x4ca73a(0xadb)],Sprite_Weapon['prototype'][_0x4ca73a(0xadb)]=function(){const _0x43523b=_0x4ca73a;VisuMZ[_0x43523b(0x499)]['Sprite_Weapon_loadBitmap'][_0x43523b(0x37c)](this),this[_0x43523b(0xa74)]&&(this[_0x43523b(0xa74)][_0x43523b(0x7f0)]=VisuMZ[_0x43523b(0x499)][_0x43523b(0x800)]['Actor']['SmoothImage']);};function _0x1c5d(_0x21faff,_0xac97a4){_0x21faff=_0x21faff-0x192;let _0x4b7cf7=_0x4b7c[_0x21faff];return _0x4b7cf7;}function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge['prototype']=Object['create'](Sprite_Gauge[_0x4ca73a(0x90a)]),Sprite_HpGauge[_0x4ca73a(0x90a)][_0x4ca73a(0x1a5)]=Sprite_HpGauge,Sprite_HpGauge[_0x4ca73a(0x90a)][_0x4ca73a(0xa47)]=function(){const _0x3101ff=_0x4ca73a;Sprite_Gauge['prototype'][_0x3101ff(0xa47)][_0x3101ff(0x37c)](this);},Sprite_HpGauge[_0x4ca73a(0x90a)][_0x4ca73a(0x99b)]=function(){return 0x0;},Sprite_HpGauge[_0x4ca73a(0x90a)][_0x4ca73a(0x50c)]=function(){const _0x2f5bd6=_0x4ca73a;this['bitmap'][_0x2f5bd6(0x1c1)]();const _0x17f8f8=this[_0x2f5bd6(0x426)]();if(!isNaN(_0x17f8f8)){if('XTOno'!==_0x2f5bd6(0x671))this['drawGauge']();else{function _0x14e95f(){const _0x171ca6=_0x2f5bd6;return;this[_0x171ca6(0x823)]&&(this[_0x171ca6(0x823)]['x']=this['x'],this[_0x171ca6(0x823)]['y']=this['y']),this['_damageContainer']&&(this[_0x171ca6(0x40b)]['x']=this['x'],this[_0x171ca6(0x40b)]['y']=this['y']);}}}};function Sprite_EnemyName(){const _0x5dec16=_0x4ca73a;this[_0x5dec16(0xa47)](...arguments);}Sprite_EnemyName[_0x4ca73a(0x90a)]=Object[_0x4ca73a(0x438)](Sprite_Name[_0x4ca73a(0x90a)]),Sprite_EnemyName['prototype'][_0x4ca73a(0x1a5)]=Sprite_EnemyName,Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0xa47)]=function(){const _0x2bac07=_0x4ca73a;Sprite_Name[_0x2bac07(0x90a)][_0x2bac07(0xa47)][_0x2bac07(0x37c)](this),this[_0x2bac07(0x765)]();},Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0xa46)]=function(){const _0x11d759=_0x4ca73a;Sprite_Name[_0x11d759(0x90a)][_0x11d759(0xa46)][_0x11d759(0x37c)](this),this[_0x11d759(0x3bd)]=0x0,this[_0x11d759(0x636)]=null,this[_0x11d759(0x342)]['x']=0.5,this[_0x11d759(0x342)]['y']=0x0;},Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x765)]=function(){const _0x4484eb=_0x4ca73a;VisuMZ['BattleCore'][_0x4484eb(0x800)][_0x4484eb(0xa94)][_0x4484eb(0x618)]&&(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x4484eb(0x3b4)](this['_stateIconSprite']));},Sprite_EnemyName['prototype'][_0x4ca73a(0x2f0)]=function(){const _0x809d5b=_0x4ca73a;return Graphics[_0x809d5b(0x83e)];},Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x371)]=function(){const _0x9fb360=_0x4ca73a;return this['_lineHeight']=this['_lineHeight']||Window_Base[_0x9fb360(0x90a)]['lineHeight']()||0x24,this[_0x9fb360(0x8a2)]*0x4;},Sprite_EnemyName['prototype']['fontSize']=function(){const _0x1d0de6=_0x4ca73a;return VisuMZ['BattleCore'][_0x1d0de6(0x800)][_0x1d0de6(0xa94)]['NameFontSize']||$gameSystem[_0x1d0de6(0x7cb)]();},Sprite_EnemyName[_0x4ca73a(0x90a)]['linkSprite']=function(_0x123ca1){this['_linkedSprite']=_0x123ca1;},Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x46b)]=function(){const _0x41ce95=_0x4ca73a;Sprite_Name[_0x41ce95(0x90a)][_0x41ce95(0x46b)][_0x41ce95(0x37c)](this),this[_0x41ce95(0x5f4)](),this['updatePosition'](),this[_0x41ce95(0x2ff)](),this['updateOpacity']();},Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x50c)]=function(){const _0x300516=_0x4ca73a;this[_0x300516(0x44d)]=undefined;const _0x1bcf35=this[_0x300516(0x491)](),_0x1bd90c=this[_0x300516(0x2f0)](),_0x12a4f7=Window_Base[_0x300516(0x90a)][_0x300516(0x935)]();this[_0x300516(0xa9f)](),this[_0x300516(0xa74)][_0x300516(0x1c1)](),this[_0x300516(0xa74)][_0x300516(0x709)](_0x1bcf35,0x0,0x0,_0x1bd90c,_0x12a4f7,'center');},Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x5f4)]=function(){const _0x205854=_0x4ca73a;if(!this['_linkedSprite'])return;this[_0x205854(0x51b)]!==this[_0x205854(0x636)][_0x205854(0x51b)]&&this[_0x205854(0x584)](this[_0x205854(0x636)][_0x205854(0x51b)]);},Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x92c)]=function(){const _0x46d432=_0x4ca73a;if(!this[_0x46d432(0x636)])return;this[_0x46d432(0x8a2)]=this[_0x46d432(0x8a2)]||Window_Base[_0x46d432(0x90a)][_0x46d432(0x935)](),this['x']=this['_linkedSprite'][_0x46d432(0x9e9)],this['y']=this[_0x46d432(0x636)]['_baseY']-this['_lineHeight']*0.5;const _0x15d599=VisuMZ[_0x46d432(0x499)][_0x46d432(0x800)]['Enemy'];this['x']+=_0x15d599[_0x46d432(0x6b8)]||0x0,this['y']+=_0x15d599['NameOffsetY']||0x0;},Sprite_EnemyName['prototype']['updateAttachedSprites']=function(){const _0x3426d4=_0x4ca73a;this[_0x3426d4(0x295)]();},Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x295)]=function(){const _0x53a45d=_0x4ca73a;if(!this[_0x53a45d(0x8cf)])return;this['_battler']!==this[_0x53a45d(0x8cf)][_0x53a45d(0x51b)]&&this[_0x53a45d(0x8cf)][_0x53a45d(0x584)](this[_0x53a45d(0x51b)]);const _0x36acfb=this[_0x53a45d(0xb47)]();this[_0x53a45d(0x8a2)]=this['_lineHeight']||Window_Base[_0x53a45d(0x90a)]['lineHeight'](),this[_0x53a45d(0x8cf)]['x']=Math[_0x53a45d(0x555)]((_0x36acfb+ImageManager[_0x53a45d(0x445)])/0x2)+0x8,this[_0x53a45d(0x8cf)]['y']=this['_lineHeight']/0x2;const _0x4688d2=VisuMZ[_0x53a45d(0x499)][_0x53a45d(0x800)][_0x53a45d(0xa94)];this[_0x53a45d(0x8cf)]['x']+=_0x4688d2[_0x53a45d(0x551)]||0x0,this[_0x53a45d(0x8cf)]['y']+=_0x4688d2[_0x53a45d(0x825)]||0x0;},Sprite_EnemyName['prototype']['updateOpacity']=function(){const _0x4fec20=_0x4ca73a,_0x685028=this[_0x4fec20(0x947)]();if(_0x685028&&this['opacity']<0xff)this[_0x4fec20(0x3bd)]+=0x10;else!_0x685028&&this[_0x4fec20(0x3bd)]>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName['prototype']['visibilityState']=function(){const _0x3e681d=_0x4ca73a;if(!this[_0x3e681d(0x51b)])return![];else{if(this[_0x3e681d(0x51b)]['isDead']())return![];else{if(!this[_0x3e681d(0x51b)][_0x3e681d(0x773)]()){if('cqsiq'==='cqsiq')return![];else{function _0xded8fd(){const _0x5c2e6b=_0x3e681d;if(this[_0x5c2e6b(0xb16)]()[_0x5c2e6b(0xaa8)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x39b29b(_0x2f7d86['$1']);else{if(this[_0x5c2e6b(0xb16)]()[_0x5c2e6b(0xaa8)][_0x5c2e6b(0x2b2)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x236982(_0x45093d['$1']);}return 0x0;}}}else{if(this[_0x3e681d(0x4c9)]()){if(_0x3e681d(0x34f)==='rwQxO')return!![];else{function _0x1c961c(){const _0x1adaec=_0x3e681d;if(this['contentsOpacity']>0x0)this[_0x1adaec(0x838)]-=0x10;}}}else{if(this[_0x3e681d(0x7df)]())return!![];else{if(SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x3e681d(0x612)]['_enemyWindow']['active']&&SceneManager[_0x3e681d(0x612)]['_enemyWindow'][_0x3e681d(0xb1a)][_0x3e681d(0x93d)](this[_0x3e681d(0x51b)]))return!![];else{if(this['opacity']>0x0){if('lMJcA'!=='lMJcA'){function _0xd30f77(){const _0xe14dbd=_0x3e681d;if(_0x247f19[_0xe14dbd(0x499)]['Settings'][_0xe14dbd(0xb23)][_0xe14dbd(0xa5f)]){const _0x4d94b1=_0x5084ae[_0xe14dbd(0xa07)]();this[_0xe14dbd(0x1ee)]('showAnimation',_0x341d34,[_0xd1ae66],_0x4d94b1[_0xe14dbd(0x7c2)]);}}}else return![];}}}}}}}},Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x4c9)]=function(){return![];},Sprite_EnemyName['prototype'][_0x4ca73a(0x7df)]=function(){const _0x4b3a1a=_0x4ca73a;return VisuMZ[_0x4b3a1a(0x499)][_0x4b3a1a(0x800)]['Enemy']['NameAlwaysVisible'];},Sprite_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0xb47)]=function(){const _0x2c945a=_0x4ca73a;if(!this[_0x2c945a(0x51b)])return 0x0;if(this[_0x2c945a(0x44d)])return this['_cacheTextWidth'];const _0x226911=this[_0x2c945a(0x491)]();return this['setupFont'](),this[_0x2c945a(0x44d)]=this[_0x2c945a(0xa74)][_0x2c945a(0x303)](_0x226911)||0x1,this['_cacheTextWidth'];},VisuMZ['BattleCore'][_0x4ca73a(0x76e)]=Sprite_Battleback[_0x4ca73a(0x90a)][_0x4ca73a(0x4c2)],Sprite_Battleback[_0x4ca73a(0x90a)]['adjustPosition']=function(){const _0x5d60e7=_0x4ca73a,_0x45613d=VisuMZ[_0x5d60e7(0x499)]['Settings']['Battleback'];if(!_0x45613d){if(_0x5d60e7(0x839)===_0x5d60e7(0x9a9)){function _0x217b83(){const _0x3cf811=_0x5d60e7;if(!_0x5835fe[_0x3cf811(0x69d)]())return;_0x39dfa1['log'](this[_0x3cf811(0x352)][_0x3cf811(0x8f9)](_0x36d200=>_0x36d200['name'])[_0x3cf811(0x7fb)]('\x0a'));}}else return VisuMZ[_0x5d60e7(0x499)][_0x5d60e7(0x76e)][_0x5d60e7(0x37c)](this);}const _0x538450=String(_0x45613d[_0x5d60e7(0x6ea)])||'MZ';switch(_0x538450){case'MZ':VisuMZ[_0x5d60e7(0x499)]['Sprite_Battleback_adjustPosition']['call'](this);break;case _0x5d60e7(0xaa6):this[_0x5d60e7(0x80a)]();break;case'ScaleToFit':this[_0x5d60e7(0xaa0)]();break;case _0x5d60e7(0xa6b):this[_0x5d60e7(0x9f6)]();break;case _0x5d60e7(0x235):this[_0x5d60e7(0x28a)]();break;}},Sprite_Battleback[_0x4ca73a(0x90a)]['adjustPosition_1for1']=function(){const _0x538b59=_0x4ca73a;this[_0x538b59(0x781)]=Graphics[_0x538b59(0x781)],this[_0x538b59(0x38c)]=Graphics[_0x538b59(0x38c)];const _0x5675f4=0x1;this[_0x538b59(0xaed)]['x']=_0x5675f4,this[_0x538b59(0xaed)]['y']=_0x5675f4,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x4ca73a(0x90a)][_0x4ca73a(0xaa0)]=function(){const _0x1e6a59=_0x4ca73a;this[_0x1e6a59(0x781)]=Graphics['width'],this[_0x1e6a59(0x38c)]=Graphics[_0x1e6a59(0x38c)];const _0x3a8cbc=this['width']/this[_0x1e6a59(0xa74)]['width'],_0x3f20cb=this['height']/this[_0x1e6a59(0xa74)][_0x1e6a59(0x38c)],_0x1e19f5=Math[_0x1e6a59(0x826)](_0x3a8cbc,_0x3f20cb);this[_0x1e6a59(0xaed)]['x']=_0x1e19f5,this['scale']['y']=_0x1e19f5,this['x']=(Graphics[_0x1e6a59(0x781)]-this[_0x1e6a59(0x781)])/0x2,this['y']=Graphics['height']-this[_0x1e6a59(0x38c)];},Sprite_Battleback[_0x4ca73a(0x90a)][_0x4ca73a(0x9f6)]=function(){const _0x2280ab=_0x4ca73a;this[_0x2280ab(0x781)]=Graphics[_0x2280ab(0x781)],this[_0x2280ab(0x38c)]=Graphics[_0x2280ab(0x38c)];const _0x2e0245=Math[_0x2280ab(0x455)](0x1,this[_0x2280ab(0x781)]/this['bitmap']['width']),_0x3683b9=Math[_0x2280ab(0x455)](0x1,this['height']/this[_0x2280ab(0xa74)][_0x2280ab(0x38c)]),_0x1e6201=Math[_0x2280ab(0x826)](_0x2e0245,_0x3683b9);this[_0x2280ab(0xaed)]['x']=_0x1e6201,this[_0x2280ab(0xaed)]['y']=_0x1e6201,this['x']=(Graphics['width']-this[_0x2280ab(0x781)])/0x2,this['y']=Graphics['height']-this[_0x2280ab(0x38c)];},Sprite_Battleback['prototype']['adjustPosition_ScaleUp']=function(){const _0x22ad37=_0x4ca73a;this[_0x22ad37(0x781)]=Graphics[_0x22ad37(0x781)],this[_0x22ad37(0x38c)]=Graphics[_0x22ad37(0x38c)];const _0xd19396=Math[_0x22ad37(0x826)](0x1,this['width']/this[_0x22ad37(0xa74)]['width']),_0x164b4b=Math[_0x22ad37(0x826)](0x1,this[_0x22ad37(0x38c)]/this[_0x22ad37(0xa74)]['height']),_0x218f79=Math[_0x22ad37(0x826)](_0xd19396,_0x164b4b);this[_0x22ad37(0xaed)]['x']=_0x218f79,this['scale']['y']=_0x218f79,this['x']=(Graphics[_0x22ad37(0x781)]-this[_0x22ad37(0x781)])/0x2,this['y']=Graphics[_0x22ad37(0x38c)]-this[_0x22ad37(0x38c)];},Spriteset_Battle[_0x4ca73a(0x90a)]['isFlipped']=function(){const _0x2a3c30=_0x4ca73a;if(!$gameSystem[_0x2a3c30(0x395)]())return![];return![];},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x2eb)]=function(){return 0x0;},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x791)]=function(){return 0x0;},VisuMZ['BattleCore']['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x4ca73a(0x90a)]['createLowerLayer'],Spriteset_Battle['prototype']['createLowerLayer']=function(){const _0x1ec20b=_0x4ca73a;VisuMZ[_0x1ec20b(0x499)][_0x1ec20b(0x5e0)][_0x1ec20b(0x37c)](this),this[_0x1ec20b(0x66e)](),this[_0x1ec20b(0x8a7)](),this['createEnemyNames']();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x4e8)]=Spriteset_Battle['prototype']['update'],Spriteset_Battle[_0x4ca73a(0x90a)]['update']=function(){const _0x214d01=_0x4ca73a;VisuMZ[_0x214d01(0x499)][_0x214d01(0x4e8)][_0x214d01(0x37c)](this),this[_0x214d01(0x63f)]();},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x66e)]=function(){const _0x196d2d=_0x4ca73a;this[_0x196d2d(0xb36)]=new Weather(),this[_0x196d2d(0x8c2)][_0x196d2d(0x3b4)](this['_weather']);},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x63f)]=function(){const _0x353a14=_0x4ca73a;this[_0x353a14(0xb36)][_0x353a14(0x298)]=$gameScreen['weatherType'](),this['_weather'][_0x353a14(0x62f)]=$gameScreen[_0x353a14(0xa36)]();},Game_Interpreter[_0x4ca73a(0x90a)][_0x4ca73a(0x5e5)]=function(_0x285db9){const _0x6f357=_0x4ca73a;$gameScreen['changeWeather'](_0x285db9[0x0],_0x285db9[0x1],_0x285db9[0x2]);if(_0x285db9[0x3])this[_0x6f357(0x591)](_0x285db9[0x2]);return!![];},VisuMZ['BattleCore'][_0x4ca73a(0xac5)]=Game_Interpreter[_0x4ca73a(0x90a)][_0x4ca73a(0xab2)],Game_Interpreter[_0x4ca73a(0x90a)][_0x4ca73a(0xab2)]=function(_0x327506){const _0x40cf3c=_0x4ca73a;return SceneManager[_0x40cf3c(0xb22)]()?(SceneManager[_0x40cf3c(0x612)]['_spriteset'][_0x40cf3c(0x973)](_0x327506[0x0],_0x327506[0x1]),!![]):VisuMZ[_0x40cf3c(0x499)][_0x40cf3c(0xac5)][_0x40cf3c(0x37c)](this,_0x327506);},Spriteset_Battle[_0x4ca73a(0x90a)]['updateBattlebackBitmap']=function(_0xa71c1a,_0x50da2e){const _0xcfa270=_0x4ca73a;_0xa71c1a[_0xcfa270(0xa74)]=_0x50da2e;},Spriteset_Battle['prototype']['changeBattlebacks']=function(_0x9f747,_0x302102){const _0x5cce7c=_0x4ca73a;_0x9f747=_0x9f747||'',_0x302102=_0x302102||'';if(_0x9f747===''&&_0x302102===''){if(_0x5cce7c(0x914)===_0x5cce7c(0x7d4)){function _0x5e2cfe(){const _0x574808=_0x5cce7c;this[_0x574808(0xa47)](...arguments);}}else _0x9f747=this['_back1Sprite'][_0x5cce7c(0xb6c)](),_0x302102=this[_0x5cce7c(0x8f3)][_0x5cce7c(0x7b7)]();}const _0x1829a7=ImageManager['loadBattleback1'](_0x9f747),_0x12aa3d=ImageManager[_0x5cce7c(0x55d)](_0x302102);_0x1829a7[_0x5cce7c(0x964)](this[_0x5cce7c(0x5da)][_0x5cce7c(0x1f3)](this,this[_0x5cce7c(0x6ed)],this[_0x5cce7c(0x8f3)],_0x1829a7,_0x12aa3d));},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x5da)]=function(_0x4af7f1,_0x1b5974,_0x42ce3b,_0x493cb9){const _0x452151=_0x4ca73a;_0x493cb9['addLoadListener'](this[_0x452151(0x920)][_0x452151(0x1f3)](this,_0x4af7f1,_0x1b5974,_0x42ce3b,_0x493cb9));},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x920)]=function(_0x983192,_0x11170c,_0x28ba60,_0x5143d5){const _0x4da91b=_0x4ca73a;_0x983192[_0x4da91b(0xa74)]=_0x28ba60,_0x11170c[_0x4da91b(0xa74)]=_0x5143d5,_0x983192[_0x4da91b(0x4c2)](),_0x11170c['adjustPosition']();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x9c9)]=Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x916)],Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x916)]=function(){const _0x2bc1d5=_0x4ca73a;VisuMZ[_0x2bc1d5(0x499)]['Spriteset_Battle_createBattleField']['call'](this),this[_0x2bc1d5(0x940)]();},Spriteset_Battle[_0x4ca73a(0x90a)]['createBattleFieldBattleCore']=function(){const _0x15499d=_0x4ca73a;this[_0x15499d(0x4b9)](),this['createAnimationContainer'](),this[_0x15499d(0x98f)](),this[_0x15499d(0x3ef)]();},Spriteset_Battle['prototype'][_0x4ca73a(0x4b9)]=function(){const _0x1663d2=_0x4ca73a;this[_0x1663d2(0x646)]=new Sprite(),this[_0x1663d2(0x8c2)][_0x1663d2(0x3b4)](this[_0x1663d2(0x646)]);},Spriteset_Battle[_0x4ca73a(0x90a)]['createAnimationContainer']=function(){const _0x4b3709=_0x4ca73a;this[_0x4b3709(0x3ac)]=new Sprite(),this['_battleField']['addChild'](this[_0x4b3709(0x3ac)]);},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x98f)]=function(){const _0x19c510=_0x4ca73a;this[_0x19c510(0x40b)]=new Sprite(),this[_0x19c510(0x40b)]['x']=this[_0x19c510(0x8c2)]['x'],this[_0x19c510(0x40b)]['y']=this['_battleField']['y'],this[_0x19c510(0x3b4)](this[_0x19c510(0x40b)]);},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x3ef)]=function(){const _0x2f12db=_0x4ca73a;if(!this[_0x2f12db(0x6ab)]())return;this[_0x2f12db(0x646)][_0x2f12db(0xaed)]['x']=-0x1,this[_0x2f12db(0x646)]['x']=this[_0x2f12db(0x8c2)][_0x2f12db(0x781)],this[_0x2f12db(0x3ac)]['scale']['x']=-0x1,this[_0x2f12db(0x3ac)]['x']=this[_0x2f12db(0x8c2)]['width'],this[_0x2f12db(0x40b)][_0x2f12db(0xaed)]['x']=-0x1,this[_0x2f12db(0x40b)]['x']=this[_0x2f12db(0x8c2)]['x']+this[_0x2f12db(0x8c2)][_0x2f12db(0x781)];},Spriteset_Battle[_0x4ca73a(0x90a)]['createEnemies']=function(){const _0x309dcb=_0x4ca73a;Imported[_0x309dcb(0x5d1)]&&VisuMZ[_0x309dcb(0x956)][_0x309dcb(0x800)]['UI'][_0x309dcb(0x61e)]&&this[_0x309dcb(0x8ae)]();const _0x18523c=$gameTroop[_0x309dcb(0x6c7)](),_0x5de048=[];for(const _0x481bd0 of _0x18523c){if(_0x309dcb(0x42b)!==_0x309dcb(0x42b)){function _0x4158fa(){const _0x4ffeac=_0x309dcb,_0x10e042=this['battleLayoutStyle']();['xp',_0x4ffeac(0x61f),_0x4ffeac(0x89e)][_0x4ffeac(0x93d)](_0x10e042)&&this[_0x4ffeac(0x961)][_0x4ffeac(0x820)](),(_0x10e042===_0x4ffeac(0x89e)||this[_0x4ffeac(0x98e)]())&&(this['_skillWindow'][_0x4ffeac(0x820)](),this['_itemWindow'][_0x4ffeac(0x820)]());}}else _0x5de048[_0x309dcb(0x1ee)](new Sprite_Enemy(_0x481bd0));}_0x5de048['sort'](this['compareEnemySprite']['bind'](this));for(const _0x4e6b5f of _0x5de048){if(_0x309dcb(0x45c)!==_0x309dcb(0x45c)){function _0x37df1b(){return 0x0;}}else this[_0x309dcb(0x646)][_0x309dcb(0x3b4)](_0x4e6b5f);}this['_enemySprites']=_0x5de048;},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x8ec)]=function(){const _0x581da6=_0x4ca73a;this['_actorSprites']=[];for(let _0x16f4d9=0x0;_0x16f4d9<$gameParty[_0x581da6(0x4cc)]();_0x16f4d9++){const _0x4924bd=$gameParty[_0x581da6(0x39e)]()[_0x16f4d9],_0x54b07c=new Sprite_Actor();_0x54b07c[_0x581da6(0x3ce)](_0x4924bd),_0x54b07c[_0x581da6(0x59c)](_0x4924bd),_0x54b07c[_0x581da6(0x46b)](),this[_0x581da6(0x96f)][_0x581da6(0x1ee)](_0x54b07c),this[_0x581da6(0x646)][_0x581da6(0x3b4)](_0x54b07c);}},Spriteset_Battle[_0x4ca73a(0x90a)]['createAnimationSprite']=function(_0x375c7a,_0x594072,_0xc1aaed,_0x151ffb){const _0x630748=_0x4ca73a,_0x1fc9e3=this['isMVAnimation'](_0x594072),_0x272382=new(_0x1fc9e3?Sprite_AnimationMV:Sprite_Animation)(),_0x638d5b=this[_0x630748(0x3e2)](_0x375c7a);if(this[_0x630748(0xa25)](_0x375c7a[0x0])){if(_0x630748(0x5a5)===_0x630748(0x276)){function _0xc46606(){const _0x202a9d=_0x630748;this[_0x202a9d(0x3b7)](_0x202a9d(0x2b5));}}else _0xc1aaed=!_0xc1aaed;}_0x272382[_0x630748(0xa2d)]=_0x375c7a,_0x272382[_0x630748(0x584)](_0x638d5b,_0x594072,_0xc1aaed,_0x151ffb),this[_0x630748(0xae6)](_0x272382);},Spriteset_Battle['prototype']['addAnimationSpriteToContainer']=function(_0x27fe6c){const _0x169115=_0x4ca73a;if(this['isAnimationShownOnBattlePortrait'](_0x27fe6c))this[_0x169115(0xb01)]()[_0x169115(0x3b4)](_0x27fe6c);else{if(_0x169115(0xae8)!==_0x169115(0xae8)){function _0x267231(){const _0x328ed0=_0x169115;_0x12de53[_0x328ed0(0x90a)][_0x328ed0(0x3d9)][_0x328ed0(0x37c)](this,_0x5bd1c2),this[_0x328ed0(0x9fc)](_0x410054);}}else this[_0x169115(0x3ac)][_0x169115(0x3b4)](_0x27fe6c);}this['_animationSprites'][_0x169115(0x1ee)](_0x27fe6c);},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x966)]=function(_0x4c8fec){const _0x4a358f=_0x4ca73a;if(!_0x4c8fec)return![];if(!_0x4c8fec[_0x4a358f(0x570)])return![];if(_0x4c8fec[_0x4a358f(0x570)][_0x4a358f(0x1fb)]!==0x0)return![];if(!_0x4c8fec[_0x4a358f(0xa2d)][0x0])return![];if(!_0x4c8fec[_0x4a358f(0xa2d)][0x0][_0x4a358f(0x4bb)]())return![];if($gameSystem[_0x4a358f(0x395)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];return Window_BattleStatus[_0x4a358f(0x90a)][_0x4a358f(0x912)]()===_0x4a358f(0x61f);},Spriteset_Battle[_0x4ca73a(0x90a)]['battleStatusWindowAnimationContainer']=function(){const _0x48d2d3=_0x4ca73a;if(!SceneManager[_0x48d2d3(0x612)])return;if(!SceneManager['_scene'][_0x48d2d3(0x790)])return;if(!SceneManager[_0x48d2d3(0x612)][_0x48d2d3(0x790)][_0x48d2d3(0x823)])return;return SceneManager[_0x48d2d3(0x612)][_0x48d2d3(0x790)][_0x48d2d3(0x823)];},Spriteset_Battle['prototype'][_0x4ca73a(0x3e0)]=function(_0xb50863){const _0x528de7=_0x4ca73a;this[_0x528de7(0x783)](_0xb50863);for(const _0x1a0542 of _0xb50863['targetObjects']){if(_0x1a0542[_0x528de7(0x892)]){if('HkbWU'==='tMbNH'){function _0x5cb24d(){const _0x5b082a=_0x528de7;_0x1d8c43[_0x5b082a(0x1ee)](_0x423507[_0x5b082a(0x7ee)]());}}else _0x1a0542[_0x528de7(0x892)]();}}_0xb50863[_0x528de7(0x508)]();},Spriteset_Battle[_0x4ca73a(0x90a)]['removeAnimationFromContainer']=function(_0x3004fc){const _0x2476d1=_0x4ca73a;this[_0x2476d1(0x1b9)][_0x2476d1(0x942)](_0x3004fc),this[_0x2476d1(0x966)](_0x3004fc)?this[_0x2476d1(0xb01)]()[_0x2476d1(0xabd)](_0x3004fc):this[_0x2476d1(0x3ac)][_0x2476d1(0xabd)](_0x3004fc);},VisuMZ[_0x4ca73a(0x499)]['Spriteset_Battle_updateActors']=Spriteset_Battle[_0x4ca73a(0x90a)]['updateActors'],Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x3e5)]=function(){const _0x1df5c9=_0x4ca73a;VisuMZ[_0x1df5c9(0x499)]['Spriteset_Battle_updateActors'][_0x1df5c9(0x37c)](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x436)]=function(){const _0x1d27f1=_0x4ca73a;this[_0x1d27f1(0x646)][_0x1d27f1(0x7f9)][_0x1d27f1(0x574)](this[_0x1d27f1(0x4c1)]['bind'](this)),this[_0x1d27f1(0xb58)]();},Spriteset_Battle[_0x4ca73a(0x90a)]['compareBattlerSprites']=function(_0x587fc9,_0x328222){const _0x3ecac0=_0x4ca73a;if(VisuMZ['BattleCore'][_0x3ecac0(0x800)][_0x3ecac0(0x4e4)][_0x3ecac0(0xb27)]){if(_0x587fc9[_0x3ecac0(0x51b)]&&_0x328222[_0x3ecac0(0x51b)]){if(_0x587fc9['_battler']['isActor']()&&_0x328222[_0x3ecac0(0x51b)][_0x3ecac0(0xa95)]()){if('EiqWI'!==_0x3ecac0(0x925))return 0x1;else{function _0x526b95(){const _0x360206=_0x3ecac0,_0x13f9cc=_0x162106[_0x360206(0x499)]['Settings'][_0x360206(0x4e4)],_0x49488b=this[_0x360206(0x51b)]&&this[_0x360206(0x51b)][_0x360206(0x4bb)]()?0x1:-0x1,_0x366053=this[_0x360206(0x9e9)]-this[_0x360206(0x716)]+_0x49488b*_0x13f9cc[_0x360206(0xa42)],_0x2095f3=this[_0x360206(0xa56)]-this[_0x360206(0x80e)]+_0x49488b*_0x13f9cc[_0x360206(0x739)],_0x109df0=_0x13f9cc['FlinchDuration'];this['startMove'](_0x366053,_0x2095f3,_0x109df0);}}}else{if(_0x328222[_0x3ecac0(0x51b)]['isActor']()&&_0x587fc9['_battler'][_0x3ecac0(0xa95)]())return-0x1;}}}if(_0x587fc9['_baseY']!==_0x328222['_baseY']){if('iGwHu'===_0x3ecac0(0xaa9)){function _0x43aefa(){const _0x595735=_0x3ecac0;this[_0x595735(0x502)]=_0x48bfbe;}}else return _0x587fc9[_0x3ecac0(0xa56)]-_0x328222[_0x3ecac0(0xa56)];}else return _0x328222[_0x3ecac0(0x29b)]-_0x587fc9[_0x3ecac0(0x29b)];},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xb58)]=function(){const _0x5ee51f=_0x4ca73a;if(!VisuMZ['BattleCore']['Settings']['Actor'][_0x5ee51f(0x270)])return;const _0x65bbb1=BattleManager[_0x5ee51f(0xb88)];if(_0x65bbb1){if(_0x65bbb1[_0x5ee51f(0x4bb)]()&&!$gameSystem[_0x5ee51f(0x395)]())return;const _0x39b909=_0x65bbb1[_0x5ee51f(0x4f6)]();if(_0x39b909&&_0x65bbb1[_0x5ee51f(0x4bb)]())this[_0x5ee51f(0x646)][_0x5ee51f(0x3b4)](_0x39b909);}},Spriteset_Battle['prototype'][_0x4ca73a(0xa92)]=function(){const _0x33167e=_0x4ca73a;for(const _0x1763a6 of $gameParty[_0x33167e(0x1d4)]()){if(_0x33167e(0x3a9)==='udLFR'){if(!_0x1763a6)continue;if(!_0x1763a6[_0x33167e(0x4f6)]())continue;_0x1763a6[_0x33167e(0x4f6)]()[_0x33167e(0x5a4)]=!![],_0x1763a6[_0x33167e(0x4f6)]()['retreat']();}else{function _0x4eff71(){const _0x548783=_0x33167e,_0x2feb31=_0x114438[_0x548783(0x3d7)](_0x56cc0e[_0x548783(0x781)]/0x3),_0x1e7ea0=this[_0x548783(0xa51)]()?(_0x542c88[_0x548783(0x781)]+_0x5122cb[_0x548783(0x83e)])/0x2-_0x2feb31:(_0x274a89[_0x548783(0x781)]-_0x3b2868[_0x548783(0x83e)])/-0x2,_0xc9ef28=this[_0x548783(0xa33)](),_0x2209c0=_0xc9ef28['y']+_0xc9ef28['height'],_0x66e4d2=this[_0x548783(0x895)](),_0x3e8579=_0x66e4d2['y']-_0x2209c0;return new _0x89e6b2(_0x1e7ea0,_0x2209c0,_0x2feb31,_0x3e8579);}}}},Spriteset_Battle[_0x4ca73a(0x90a)]['createUIContainer']=function(){const _0x4a3d11=_0x4ca73a;this[_0x4a3d11(0x81d)]=new Sprite(),this[_0x4a3d11(0x8c2)][_0x4a3d11(0x3b4)](this['_uiContainer']);},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x9be)]=function(){const _0x3e037a=_0x4ca73a;if(VisuMZ['BattleCore'][_0x3e037a(0x800)][_0x3e037a(0xa94)][_0x3e037a(0x1a3)])return;this[_0x3e037a(0x315)]=new Sprite(),this[_0x3e037a(0x81d)][_0x3e037a(0x3b4)](this[_0x3e037a(0x315)]);for(const _0x37dbb0 of this[_0x3e037a(0x5c5)]){if('GGDgA'!==_0x3e037a(0x767)){const _0x10f0c4=new Sprite_EnemyName();this['_enemyNameContainer'][_0x3e037a(0x3b4)](_0x10f0c4),_0x10f0c4[_0x3e037a(0x363)](_0x37dbb0);}else{function _0x4a5ff0(){const _0x244a82=_0x3e037a;this[_0x244a82(0x8c0)](),this[_0x244a82(0x9bc)]();}}}},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0xaa4)]=function(){return![];},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x456)]=function(){const _0x35de97=_0x4ca73a;return this['battlerSprites']()[_0x35de97(0xac3)](_0x3b5a96=>_0x3b5a96[_0x35de97(0x849)]());},Spriteset_Battle[_0x4ca73a(0x90a)]['isAnyoneJumping']=function(){const _0x121a95=_0x4ca73a;return this[_0x121a95(0xa72)]()[_0x121a95(0xac3)](_0xba32bb=>_0xba32bb['isJumping']());},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x906)]=function(){const _0x3380b2=_0x4ca73a;return this[_0x3380b2(0xa72)]()[_0x3380b2(0xac3)](_0x3a8597=>_0x3a8597['isGrowing']());},Spriteset_Battle[_0x4ca73a(0x90a)]['isAnyoneSkewing']=function(){const _0xb9529e=_0x4ca73a;return this[_0xb9529e(0xa72)]()[_0xb9529e(0xac3)](_0x29d839=>_0x29d839['isSkewing']());},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x19f)]=function(){const _0x2b1690=_0x4ca73a;return this[_0x2b1690(0xa72)]()['some'](_0x12d5fd=>_0x12d5fd['isSpinning']());},Spriteset_Battle[_0x4ca73a(0x90a)][_0x4ca73a(0x4fb)]=function(){const _0x1b5ab7=_0x4ca73a;return this[_0x1b5ab7(0xa72)]()['some'](_0x1af117=>_0x1af117['isChangingOpacity']());},VisuMZ['BattleCore'][_0x4ca73a(0x693)]=Window_ItemList['prototype'][_0x4ca73a(0x681)],Window_ItemList[_0x4ca73a(0x90a)][_0x4ca73a(0x681)]=function(){const _0x166a0e=_0x4ca73a;if(SceneManager['isSceneBattle']()){if(SceneManager[_0x166a0e(0x612)][_0x166a0e(0x912)]()===_0x166a0e(0x89e))return VisuMZ['BattleCore'][_0x166a0e(0x800)][_0x166a0e(0x1f0)][_0x166a0e(0x76b)];else{if('RaSqU'===_0x166a0e(0xb8a)){function _0x404d57(){const _0x35e18c=_0x166a0e;if(!_0x4eadb6['isSceneBattle']())return;const _0x54bb5a=_0x176380[_0x35e18c(0x260)]();if(!_0x54bb5a)return;_0x54bb5a[_0x35e18c(0x728)](_0x35e18c(0x99f));}}else return VisuMZ[_0x166a0e(0x499)][_0x166a0e(0x800)][_0x166a0e(0x1f0)][_0x166a0e(0x33a)];}}else return VisuMZ[_0x166a0e(0x499)][_0x166a0e(0x693)][_0x166a0e(0x37c)](this);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x79a)]=Window_SkillList[_0x4ca73a(0x90a)][_0x4ca73a(0x681)],Window_SkillList[_0x4ca73a(0x90a)][_0x4ca73a(0x681)]=function(){const _0x1977bb=_0x4ca73a;if(SceneManager['isSceneBattle']()){if(_0x1977bb(0x62b)!=='GpqYn'){function _0x56e429(){const _0x275435=_0x1977bb;this[_0x275435(0x4d4)]=!![];}}else return SceneManager[_0x1977bb(0x612)][_0x1977bb(0x912)]()===_0x1977bb(0x89e)?VisuMZ['BattleCore'][_0x1977bb(0x800)][_0x1977bb(0x1f0)][_0x1977bb(0x76b)]:VisuMZ['BattleCore'][_0x1977bb(0x800)][_0x1977bb(0x1f0)][_0x1977bb(0x33a)];}else{if(_0x1977bb(0x27d)!==_0x1977bb(0x27d)){function _0x40047d(){return 0x0;}}else return VisuMZ[_0x1977bb(0x499)][_0x1977bb(0x79a)][_0x1977bb(0x37c)](this);}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x557)]=Window_Options[_0x4ca73a(0x90a)][_0x4ca73a(0x71e)],Window_Options[_0x4ca73a(0x90a)]['addGeneralOptions']=function(){const _0x45252f=_0x4ca73a;VisuMZ['BattleCore'][_0x45252f(0x557)][_0x45252f(0x37c)](this),this[_0x45252f(0x8c7)](),this[_0x45252f(0x9c6)]();},Window_Options[_0x4ca73a(0x90a)][_0x4ca73a(0x8c7)]=function(){const _0x4ee35b=_0x4ca73a;VisuMZ[_0x4ee35b(0x499)][_0x4ee35b(0x800)][_0x4ee35b(0x4f8)][_0x4ee35b(0x38b)]&&(this[_0x4ee35b(0xab4)](),this[_0x4ee35b(0x271)]());},Window_Options[_0x4ca73a(0x90a)][_0x4ca73a(0x9c6)]=function(){const _0x10e66f=_0x4ca73a;if(!VisuMZ['BattleCore'][_0x10e66f(0x800)][_0x10e66f(0xb24)]['AddHpGaugeOption'])return;const _0x5658ad=TextManager[_0x10e66f(0x1a6)],_0x52482e=_0x10e66f(0x1a6);this['addCommand'](_0x5658ad,_0x52482e);},Window_Options[_0x4ca73a(0x90a)][_0x4ca73a(0xab4)]=function(){const _0x56ac7e=_0x4ca73a,_0x4c3e5a=TextManager[_0x56ac7e(0x564)],_0x589714=_0x56ac7e(0xa31);this[_0x56ac7e(0x459)](_0x4c3e5a,_0x589714);},Window_Options[_0x4ca73a(0x90a)][_0x4ca73a(0x271)]=function(){const _0x29cf17=_0x4ca73a,_0x19edcf=TextManager[_0x29cf17(0x6b0)],_0x2f2d5a=_0x29cf17(0x840);this['addCommand'](_0x19edcf,_0x2f2d5a);},VisuMZ['BattleCore']['Window_Options_statusText']=Window_Options['prototype']['statusText'],Window_Options[_0x4ca73a(0x90a)][_0x4ca73a(0xa75)]=function(_0x5daa5e){const _0x42f5a8=_0x4ca73a,_0x386530=this[_0x42f5a8(0x82e)](_0x5daa5e);if(_0x386530===_0x42f5a8(0x840)){if(_0x42f5a8(0x87a)==='YPYOC')return this[_0x42f5a8(0x893)]();else{function _0x55e476(){const _0x142135=_0x42f5a8;_0x3c8e87[_0x142135(0x499)][_0x142135(0xb20)][_0x142135(0x37c)](this,_0x1a2386);}}}else{if(_0x42f5a8(0x339)==='dnryO')return VisuMZ[_0x42f5a8(0x499)][_0x42f5a8(0x2ab)]['call'](this,_0x5daa5e);else{function _0x37b884(){const _0x34abb8=_0x42f5a8;if(_0x3b5a64[_0x34abb8(0x6e8)]())this[_0x34abb8(0x968)]();else _0x4f578f['isTpb']()&&_0x10d4a0[_0x34abb8(0x499)][_0x34abb8(0x433)][_0x34abb8(0x37c)](this);}}}},Window_Options[_0x4ca73a(0x90a)][_0x4ca73a(0x893)]=function(){const _0x2719b3=_0x4ca73a,_0x3eed02=VisuMZ[_0x2719b3(0x499)][_0x2719b3(0x800)][_0x2719b3(0x4f8)],_0x537199=this[_0x2719b3(0x703)]('autoBattleUseSkills');return _0x537199?_0x3eed02[_0x2719b3(0x3cd)]:_0x3eed02[_0x2719b3(0xb15)];},Window_ShopStatus['prototype']['getItemDamageAmountLabelBattleCore']=function(){const _0x2c3ac2=_0x4ca73a,_0x38de7a=DataManager[_0x2c3ac2(0x94c)](this[_0x2c3ac2(0x884)]),_0x26604a=VisuMZ[_0x2c3ac2(0x638)][_0x38de7a];if(!_0x26604a)return this[_0x2c3ac2(0xa2a)]();const _0x37ee4c=_0x2c3ac2(0x4a2)[_0x2c3ac2(0x26f)](this['_item'][_0x2c3ac2(0x2e7)][_0x2c3ac2(0x298)]),_0x476f39=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x2c3ac2(0x884)]['damage']['type']];return _0x26604a[_0x37ee4c][_0x2c3ac2(0x26f)](_0x476f39);},Window_ShopStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x379)]=function(){const _0x59544a=_0x4ca73a,_0x557676=DataManager[_0x59544a(0x94c)](this[_0x59544a(0x884)]),_0x4e352f=VisuMZ[_0x59544a(0x638)][_0x557676];if(!_0x4e352f)return this[_0x59544a(0x548)]();return _0x4e352f[_0x59544a(0x64f)]['call'](this);},VisuMZ['BattleCore'][_0x4ca73a(0x254)]=Window_PartyCommand['prototype']['initialize'],Window_PartyCommand[_0x4ca73a(0x90a)]['initialize']=function(_0x450780){const _0xb461a4=_0x4ca73a;VisuMZ[_0xb461a4(0x499)][_0xb461a4(0x254)][_0xb461a4(0x37c)](this,_0x450780),this['createCommandNameWindow'](_0x450780);},Window_PartyCommand['prototype'][_0x4ca73a(0x91d)]=function(_0x162982){const _0x4070dd=_0x4ca73a,_0x2aa5b6=new Rectangle(0x0,0x0,_0x162982[_0x4070dd(0x781)],_0x162982[_0x4070dd(0x38c)]);this[_0x4070dd(0xaee)]=new Window_Base(_0x2aa5b6),this[_0x4070dd(0xaee)]['opacity']=0x0,this[_0x4070dd(0x3b4)](this[_0x4070dd(0xaee)]),this[_0x4070dd(0x606)]();},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x6d7)]=function(){const _0xe9e417=_0x4ca73a;Window_Command[_0xe9e417(0x90a)]['callUpdateHelp'][_0xe9e417(0x37c)](this);if(this['_commandNameWindow'])this[_0xe9e417(0x606)]();},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x606)]=function(){const _0x1f934c=_0x4ca73a,_0x54034c=this[_0x1f934c(0xaee)];_0x54034c[_0x1f934c(0xafb)]['clear']();const _0x1dc4f1=this[_0x1f934c(0x44c)](this[_0x1f934c(0x43f)]());if(_0x1dc4f1===_0x1f934c(0x7c5)&&this[_0x1f934c(0x9f1)]()>0x0){if(_0x1f934c(0x414)!==_0x1f934c(0x8a0)){const _0x2b2e33=this[_0x1f934c(0x310)](this['index']());let _0x4b851a=this[_0x1f934c(0x2e6)](this['index']());_0x4b851a=_0x4b851a[_0x1f934c(0x301)](/\\I\[(\d+)\]/gi,''),_0x54034c[_0x1f934c(0x20d)](),this[_0x1f934c(0x602)](_0x4b851a,_0x2b2e33),this[_0x1f934c(0x563)](_0x4b851a,_0x2b2e33),this[_0x1f934c(0x723)](_0x4b851a,_0x2b2e33);}else{function _0x1a3c5b(){const _0x40d20b=_0x1f934c;for(const _0x123f70 of _0x4cbf72){const _0x25666d=_0x5177ec[0x0][_0x40d20b(0x26f)](_0x123f70[0x0]),_0x10e73e=_0x5ad9be[0x1][_0x40d20b(0x26f)](_0x123f70[0x1]),_0x2c466c=new _0xdc90a4(_0x179e76[_0x40d20b(0x26f)](_0x10e73e),'i');_0x49e0c5[_0x25666d]=_0x2c466c;}}}}},Window_PartyCommand['prototype'][_0x4ca73a(0x602)]=function(_0x2bb507,_0x4bafd8){},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x563)]=function(_0x5319dd,_0x24dd16){const _0x268ed8=_0x4ca73a,_0x4111d6=this['_commandNameWindow'];_0x4111d6['drawText'](_0x5319dd,0x0,_0x24dd16['y'],_0x4111d6[_0x268ed8(0x87b)],_0x268ed8(0x989));},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x723)]=function(_0x202e54,_0x4ee13f){const _0x1083f4=_0x4ca73a,_0x402c1e=this[_0x1083f4(0xaee)],_0x263ddb=$gameSystem[_0x1083f4(0xac7)](),_0x2c457e=_0x4ee13f['x']+Math[_0x1083f4(0x3d7)](_0x4ee13f[_0x1083f4(0x781)]/0x2)+_0x263ddb;_0x402c1e['x']=_0x402c1e[_0x1083f4(0x781)]/-0x2+_0x2c457e,_0x402c1e['y']=Math[_0x1083f4(0x3d7)](_0x4ee13f[_0x1083f4(0x38c)]/0x2);},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x94a)]=function(){const _0x552b62=_0x4ca73a;this[_0x552b62(0x5fd)](),this[_0x552b62(0xad3)](),this[_0x552b62(0x4af)](),this[_0x552b62(0x1cd)](),this[_0x552b62(0x6d5)]();},Window_PartyCommand['prototype']['addFightCommand']=function(){const _0x32d9a5=_0x4ca73a,_0x13e9d5=this[_0x32d9a5(0x2f7)](),_0x5edc7a=VisuMZ[_0x32d9a5(0x499)]['Settings'][_0x32d9a5(0x327)][_0x32d9a5(0x5af)],_0x22df34=_0x13e9d5==='text'?TextManager[_0x32d9a5(0x476)]:_0x32d9a5(0x30a)[_0x32d9a5(0x26f)](_0x5edc7a,TextManager[_0x32d9a5(0x476)]),_0x3f5243=this[_0x32d9a5(0x4fd)]();this[_0x32d9a5(0x459)](_0x22df34,'fight',_0x3f5243);},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x4fd)]=function(){return!![];},Window_PartyCommand['prototype'][_0x4ca73a(0xad3)]=function(){const _0x3a7563=_0x4ca73a;if(!this[_0x3a7563(0x2aa)]())return;const _0x4e9421=this['commandStyle'](),_0x38f987=VisuMZ[_0x3a7563(0x499)][_0x3a7563(0x800)]['PartyCmd'][_0x3a7563(0x83d)],_0x33a717=_0x4e9421===_0x3a7563(0x5db)?TextManager[_0x3a7563(0x90c)]:'\x5cI[%1]%2'['format'](_0x38f987,TextManager[_0x3a7563(0x90c)]),_0x51c07b=this[_0x3a7563(0x9b1)]();this[_0x3a7563(0x459)](_0x33a717,_0x3a7563(0x90c),_0x51c07b);},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x2aa)]=function(){const _0x3cd657=_0x4ca73a;return VisuMZ[_0x3cd657(0x499)][_0x3cd657(0x800)][_0x3cd657(0x327)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x4ca73a(0x90a)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x4af)]=function(){},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x1cd)]=function(){const _0x239cac=_0x4ca73a;if(!this[_0x239cac(0x3bb)]())return;const _0x2ace94=this[_0x239cac(0x2f7)](),_0x530e19=VisuMZ[_0x239cac(0x499)][_0x239cac(0x800)][_0x239cac(0x327)][_0x239cac(0x3a7)],_0x2a9b55=_0x2ace94==='text'?TextManager[_0x239cac(0x47e)]:_0x239cac(0x30a)[_0x239cac(0x26f)](_0x530e19,TextManager[_0x239cac(0x47e)]),_0x435a31=this[_0x239cac(0x6b4)]();this[_0x239cac(0x459)](_0x2a9b55,_0x239cac(0x47e),_0x435a31);},Window_PartyCommand[_0x4ca73a(0x90a)]['isOptionsCommandAdded']=function(){const _0x22c2c5=_0x4ca73a;return VisuMZ[_0x22c2c5(0x499)][_0x22c2c5(0x800)][_0x22c2c5(0x327)][_0x22c2c5(0xa37)];},Window_PartyCommand['prototype'][_0x4ca73a(0x6b4)]=function(){return!![];},Window_PartyCommand['prototype'][_0x4ca73a(0x6d5)]=function(){const _0x378b08=_0x4ca73a,_0x5bebb3=this[_0x378b08(0x2f7)](),_0x494ed5=VisuMZ[_0x378b08(0x499)][_0x378b08(0x800)][_0x378b08(0x327)]['CmdIconEscape'],_0xff2b9f=_0x5bebb3===_0x378b08(0x5db)?TextManager[_0x378b08(0x656)]:_0x378b08(0x30a)[_0x378b08(0x26f)](_0x494ed5,TextManager[_0x378b08(0x656)]),_0x5be6cf=this[_0x378b08(0x5cc)]();this[_0x378b08(0x459)](_0xff2b9f,_0x378b08(0x656),_0x5be6cf);},Window_PartyCommand[_0x4ca73a(0x90a)]['isEscapeCommandEnabled']=function(){const _0x6d06a7=_0x4ca73a;return BattleManager[_0x6d06a7(0x583)]();},Window_PartyCommand['prototype'][_0x4ca73a(0x5e2)]=function(){const _0x13252f=_0x4ca73a;return VisuMZ[_0x13252f(0x499)]['Settings'][_0x13252f(0x327)][_0x13252f(0x45f)];},Window_PartyCommand[_0x4ca73a(0x90a)]['drawItem']=function(_0x8fc481){const _0x10e8ff=_0x4ca73a,_0x2a3d46=this[_0x10e8ff(0x44c)](_0x8fc481);if(_0x2a3d46===_0x10e8ff(0x747)){if(_0x10e8ff(0x1c2)===_0x10e8ff(0xae3)){function _0x582bf2(){const _0x4681a7=_0x10e8ff,_0xa62d1d=this[_0x4681a7(0xa69)]();if(_0xa62d1d[_0x4681a7(0x581)]||_0xa62d1d[_0x4681a7(0x2e0)]){const _0x42e6aa=_0x5cafaa[_0x4681a7(0x7bf)](_0xa62d1d);_0x42e6aa[_0x4681a7(0x72e)]=![],_0x42e6aa[_0x4681a7(0x30f)]=0x0,this[_0x4681a7(0x6f7)][_0x4681a7(0x1ee)](_0x42e6aa);}if(_0xa62d1d[_0x4681a7(0x72e)]){const _0x7c517e=_0x43757b[_0x4681a7(0x7bf)](_0xa62d1d);_0x7c517e[_0x4681a7(0x581)]=![],_0x7c517e[_0x4681a7(0x2e0)]=![],_0x7c517e[_0x4681a7(0x30f)]=0x0,this[_0x4681a7(0x6f7)][_0x4681a7(0x1ee)](_0x7c517e);}if(_0xa62d1d[_0x4681a7(0x30f)]!==0x0){const _0xf55aad=_0x2d65fb[_0x4681a7(0x7bf)](_0xa62d1d);_0xf55aad[_0x4681a7(0x581)]=![],_0xf55aad['evaded']=![],_0xf55aad[_0x4681a7(0x72e)]=![],this['_damagePopupArray'][_0x4681a7(0x1ee)](_0xf55aad);}}}else this['drawItemStyleIconText'](_0x8fc481);}else _0x2a3d46===_0x10e8ff(0x7c5)?this['drawItemStyleIcon'](_0x8fc481):Window_Command[_0x10e8ff(0x90a)][_0x10e8ff(0x70e)][_0x10e8ff(0x37c)](this,_0x8fc481);},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x2f7)]=function(){const _0x1d301a=_0x4ca73a;return VisuMZ['BattleCore'][_0x1d301a(0x800)]['PartyCmd'][_0x1d301a(0x446)];},Window_PartyCommand[_0x4ca73a(0x90a)]['commandStyleCheck']=function(_0x1f657a){const _0x33ff24=_0x4ca73a;if(_0x1f657a<0x0)return _0x33ff24(0x5db);const _0xc08b6=this[_0x33ff24(0x2f7)]();if(_0xc08b6!==_0x33ff24(0xaa7))return _0xc08b6;else{if(this[_0x33ff24(0x9f1)]()>0x0){if(_0x33ff24(0x324)===_0x33ff24(0xb3b)){function _0x401ccf(){const _0x344ff0=_0x33ff24;_0x23fe8e(_0x344ff0(0x84d)[_0x344ff0(0x26f)](_0x4bd4b3,_0x64935d,_0x3b1099)),_0x57475d[_0x344ff0(0x6a3)]();}}else{const _0xb38a89=this[_0x33ff24(0x2e6)](_0x1f657a);if(_0xb38a89['match'](/\\I\[(\d+)\]/i)){if(_0x33ff24(0xb38)===_0x33ff24(0xb38)){const _0x59b8d1=this[_0x33ff24(0x310)](_0x1f657a),_0x34d76b=this[_0x33ff24(0x197)](_0xb38a89)[_0x33ff24(0x781)];if(_0x34d76b<=_0x59b8d1[_0x33ff24(0x781)]){if('tRaeG'!=='Eartj')return'iconText';else{function _0x5f3fc3(){const _0x2fb087=_0x33ff24;this[_0x2fb087(0x3b7)]('skill');}}}else return _0x33ff24(0x7c5);}else{function _0x5dfaa0(){const _0x4c4cb6=_0x33ff24;_0x55fe87[_0x4c4cb6(0xa74)]=_0x32845c;}}}}}}return _0x33ff24(0x5db);},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0xabe)]=function(_0x163a7d){const _0x217fc7=_0x4ca73a,_0x4d24f1=this[_0x217fc7(0x310)](_0x163a7d),_0x1b77d7=this[_0x217fc7(0x2e6)](_0x163a7d),_0x45c219=this[_0x217fc7(0x197)](_0x1b77d7)[_0x217fc7(0x781)];this[_0x217fc7(0x1e4)](this['isCommandEnabled'](_0x163a7d));const _0x35f92e=this[_0x217fc7(0x5e2)]();if(_0x35f92e===_0x217fc7(0xa96)){if(_0x217fc7(0xa3c)===_0x217fc7(0xa3c))this['drawTextEx'](_0x1b77d7,_0x4d24f1['x']+_0x4d24f1['width']-_0x45c219,_0x4d24f1['y'],_0x45c219);else{function _0x52dbd9(){const _0x41348e=_0x217fc7;_0x2808da['BattleCore'][_0x41348e(0x3b3)][_0x41348e(0x37c)](this),this[_0x41348e(0x3bd)]=this[_0x41348e(0x2c5)]>0x0?0xff:0x0;}}}else{if(_0x35f92e==='center'){const _0x1fa6cb=_0x4d24f1['x']+Math[_0x217fc7(0x3d7)]((_0x4d24f1[_0x217fc7(0x781)]-_0x45c219)/0x2);this[_0x217fc7(0x877)](_0x1b77d7,_0x1fa6cb,_0x4d24f1['y'],_0x45c219);}else this['drawTextEx'](_0x1b77d7,_0x4d24f1['x'],_0x4d24f1['y'],_0x45c219);}},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x43e)]=function(_0x214383){const _0x242f29=_0x4ca73a;this[_0x242f29(0x2e6)](_0x214383)[_0x242f29(0x2b2)](/\\I\[(\d+)\]/i);const _0x655f22=Number(RegExp['$1'])||0x0,_0x11936e=this['itemLineRect'](_0x214383),_0x34d968=_0x11936e['x']+Math[_0x242f29(0x3d7)]((_0x11936e[_0x242f29(0x781)]-ImageManager[_0x242f29(0x445)])/0x2),_0x4112b5=_0x11936e['y']+(_0x11936e[_0x242f29(0x38c)]-ImageManager[_0x242f29(0x449)])/0x2;this[_0x242f29(0x955)](_0x655f22,_0x34d968,_0x4112b5);},Window_PartyCommand['prototype']['hide']=function(){},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x9b8)]=function(){const _0x583473=_0x4ca73a;Window_Command['prototype'][_0x583473(0x9b8)][_0x583473(0x37c)](this);const _0x5ce572=this['battleLayoutStyle']();_0x5ce572===_0x583473(0x89e)&&this['showHelpWindow']();},Window_PartyCommand[_0x4ca73a(0x90a)]['battleLayoutStyle']=function(){const _0x898191=_0x4ca73a;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x898191(0x383)]=SceneManager['_scene'][_0x898191(0x912)](),this[_0x898191(0x383)];},Window_PartyCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x5b3)]=function(){const _0x595391=_0x4ca73a,_0x2e53ed=VisuMZ[_0x595391(0x499)][_0x595391(0x800)][_0x595391(0x327)],_0x4d9b3e=this['currentSymbol']();switch(_0x4d9b3e){case _0x595391(0x476):this['_helpWindow'][_0x595391(0x963)](_0x2e53ed[_0x595391(0x330)]);break;case _0x595391(0x90c):this[_0x595391(0xb09)][_0x595391(0x963)](_0x2e53ed[_0x595391(0x60c)]);break;case'options':this[_0x595391(0xb09)]['setText'](_0x2e53ed[_0x595391(0x203)]);break;case _0x595391(0x656):this[_0x595391(0xb09)]['setText'](_0x2e53ed[_0x595391(0x9b2)]);break;default:this[_0x595391(0xb09)][_0x595391(0x963)]('');break;}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x751)]=Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0xa47)],Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0xa47)]=function(_0x2885cc){const _0x32cec3=_0x4ca73a;VisuMZ[_0x32cec3(0x499)][_0x32cec3(0x751)][_0x32cec3(0x37c)](this,_0x2885cc),this[_0x32cec3(0x91d)](_0x2885cc);},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x91d)]=function(_0xbd2588){const _0x27f5b3=_0x4ca73a,_0x52e97d=new Rectangle(0x0,0x0,_0xbd2588[_0x27f5b3(0x781)],_0xbd2588[_0x27f5b3(0x38c)]);this[_0x27f5b3(0xaee)]=new Window_Base(_0x52e97d),this[_0x27f5b3(0xaee)][_0x27f5b3(0x3bd)]=0x0,this[_0x27f5b3(0x3b4)](this['_commandNameWindow']),this[_0x27f5b3(0x606)]();},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x6d7)]=function(){const _0x346aa6=_0x4ca73a;Window_Command[_0x346aa6(0x90a)]['callUpdateHelp'][_0x346aa6(0x37c)](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();},Window_ActorCommand['prototype'][_0x4ca73a(0x606)]=function(){const _0x18c4b0=_0x4ca73a,_0x27d695=this[_0x18c4b0(0xaee)];_0x27d695[_0x18c4b0(0xafb)][_0x18c4b0(0x1c1)]();const _0x4161dd=this[_0x18c4b0(0x44c)](this[_0x18c4b0(0x43f)]());if(_0x4161dd===_0x18c4b0(0x7c5)&&this[_0x18c4b0(0x9f1)]()>0x0){const _0x42bab1=this[_0x18c4b0(0x310)](this[_0x18c4b0(0x43f)]());let _0x2db96c=this[_0x18c4b0(0x2e6)](this[_0x18c4b0(0x43f)]());_0x2db96c=_0x2db96c['replace'](/\\I\[(\d+)\]/gi,''),_0x27d695[_0x18c4b0(0x20d)](),this[_0x18c4b0(0x602)](_0x2db96c,_0x42bab1),this[_0x18c4b0(0x563)](_0x2db96c,_0x42bab1),this[_0x18c4b0(0x723)](_0x2db96c,_0x42bab1);}},Window_ActorCommand[_0x4ca73a(0x90a)]['commandNameWindowDrawBackground']=function(_0x5730cd,_0x23efc8){},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x563)]=function(_0x3bf98e,_0x3fc10a){const _0x220bf7=_0x4ca73a,_0x17b1a7=this[_0x220bf7(0xaee)];_0x17b1a7[_0x220bf7(0x709)](_0x3bf98e,0x0,_0x3fc10a['y'],_0x17b1a7[_0x220bf7(0x87b)],_0x220bf7(0x989));},Window_ActorCommand['prototype'][_0x4ca73a(0x723)]=function(_0x5ee1b6,_0x1f6152){const _0x413f09=_0x4ca73a,_0x5948d6=this[_0x413f09(0xaee)],_0x31b4b8=$gameSystem[_0x413f09(0xac7)](),_0x16ef67=_0x1f6152['x']+Math[_0x413f09(0x3d7)](_0x1f6152['width']/0x2)+_0x31b4b8;_0x5948d6['x']=_0x5948d6['width']/-0x2+_0x16ef67,_0x5948d6['y']=Math[_0x413f09(0x3d7)](_0x1f6152['height']/0x2);},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x94a)]=function(){const _0x3bb4e6=_0x4ca73a;if(!this['_actor'])return;const _0x8c9590=this[_0x3bb4e6(0x463)][_0x3bb4e6(0x550)]();for(const _0x1b6257 of _0x8c9590){this[_0x3bb4e6(0x55a)](_0x1b6257[_0x3bb4e6(0x941)]()['trim']());}},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x55a)]=function(_0x317532){const _0x34011b=_0x4ca73a;_0x317532===_0x34011b(0x9dd)&&this[_0x34011b(0x4e0)]();if([_0x34011b(0x6d4),_0x34011b(0x58b)][_0x34011b(0x93d)](_0x317532)){if(_0x34011b(0x5a3)!==_0x34011b(0x223))this['addSkillCommands']();else{function _0x948cb9(){const _0xc53344=_0x34011b,_0x7c7b55=_0xf0f485['indexOf'](_0x4d110d['toUpperCase']()['trim']());_0x7c7b55>=0x0&&_0x7c7b55<=0x7&&_0x3200da[_0xc53344(0x419)](_0x7c7b55)&&_0x22f7c9['removeBuff'](_0x7c7b55);}}}_0x317532===_0x34011b(0x94b)&&this[_0x34011b(0x47b)]();_0x317532===_0x34011b(0x8cc)&&this[_0x34011b(0x7bc)]();if(_0x317532===_0x34011b(0x9fa)){if(_0x34011b(0x32e)===_0x34011b(0x32e))this[_0x34011b(0x6d5)]();else{function _0x38d06a(){const _0x2e41f1=_0x34011b;return _0x59e564['push'](...this[_0x2e41f1(0x512)]()[_0x2e41f1(0x1d4)]()[_0x2e41f1(0x5be)](_0x38c556=>_0x38c556!==this[_0x2e41f1(0x9d8)]())),this[_0x2e41f1(0x3c5)](_0x1ae7b);}}}_0x317532===_0x34011b(0x70f)&&this['addAutoBattleCommand']();if(_0x317532[_0x34011b(0x2b2)](/STYPE: (\d+)/i)){if(_0x34011b(0x2c4)===_0x34011b(0x4df)){function _0x5aa647(){this['createHpGaugeSprite']();}}else{const _0x452c4a=Number(RegExp['$1']);this[_0x34011b(0x2f8)](_0x452c4a);}}else{if(_0x317532[_0x34011b(0x2b2)](/STYPE: (.*)/i)){const _0x516beb=DataManager[_0x34011b(0xb6e)](RegExp['$1']);this[_0x34011b(0x2f8)](_0x516beb);}}_0x317532===_0x34011b(0x93e)&&this[_0x34011b(0xa12)]();if(_0x317532[_0x34011b(0x2b2)](/SKILL: (\d+)/i)){const _0x2a729d=Number(RegExp['$1']);this[_0x34011b(0x1e2)]($dataSkills[_0x2a729d]);}else{if(_0x317532[_0x34011b(0x2b2)](/SKILL: (.*)/i)){const _0x2bea7a=DataManager[_0x34011b(0x92a)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x2bea7a]);}}_0x317532===_0x34011b(0x710)&&Imported[_0x34011b(0x910)]&&this[_0x34011b(0x1b5)](),[_0x34011b(0x7b1),'COMBAT\x20LOG'][_0x34011b(0x93d)](_0x317532)&&Imported[_0x34011b(0x9d2)]&&this[_0x34011b(0x560)](),_0x317532===_0x34011b(0x70a)&&Imported[_0x34011b(0x1a0)]&&this[_0x34011b(0x897)](!![]);},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x4e0)]=function(){const _0x245e34=_0x4ca73a,_0x404262=$dataSkills[this[_0x245e34(0x463)]['attackSkillId']()];if(!_0x404262)return;if(!this[_0x245e34(0xb33)](_0x404262))return;const _0xb67e28=this[_0x245e34(0x2f7)](),_0x4b6676=DataManager[_0x245e34(0x91c)](_0x404262),_0x340fb6=DataManager[_0x245e34(0x262)](_0x404262),_0x309f8b=_0xb67e28===_0x245e34(0x5db)?_0x4b6676:'\x5cI[%1]%2'[_0x245e34(0x26f)](_0x340fb6,_0x4b6676);this['addCommand'](_0x309f8b,_0x245e34(0x9ea),this[_0x245e34(0x463)][_0x245e34(0x6cd)]());},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x47b)]=function(){const _0x32e345=_0x4ca73a,_0x1b6dee=$dataSkills[this[_0x32e345(0x463)][_0x32e345(0x91f)]()];if(!_0x1b6dee)return;if(!this[_0x32e345(0xb33)](_0x1b6dee))return;const _0x4d839=this['commandStyle'](),_0x222d2c=DataManager[_0x32e345(0x91c)](_0x1b6dee),_0x2be986=DataManager[_0x32e345(0x262)](_0x1b6dee),_0x544c22=_0x4d839===_0x32e345(0x5db)?_0x222d2c:'\x5cI[%1]%2'[_0x32e345(0x26f)](_0x2be986,_0x222d2c);this[_0x32e345(0x459)](_0x544c22,_0x32e345(0x386),this[_0x32e345(0x463)][_0x32e345(0x9e6)]());},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x7bc)]=function(){const _0x43bca1=_0x4ca73a,_0x583e8b=this[_0x43bca1(0x2f7)](),_0x1335fb=VisuMZ[_0x43bca1(0x499)][_0x43bca1(0x800)]['ActorCmd'][_0x43bca1(0x8d6)],_0x3bfb07=_0x583e8b===_0x43bca1(0x5db)?TextManager[_0x43bca1(0xa07)]:_0x43bca1(0x30a)[_0x43bca1(0x26f)](_0x1335fb,TextManager[_0x43bca1(0xa07)]),_0x532826=this[_0x43bca1(0x726)]();this[_0x43bca1(0x459)](_0x3bfb07,'item',_0x532826);},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x726)]=function(){const _0xf39072=_0x4ca73a;return this[_0xf39072(0x463)]&&this[_0xf39072(0x463)][_0xf39072(0x86d)]();},Window_ActorCommand['prototype']['addSkillCommands']=function(){const _0x1e71a0=_0x4ca73a,_0x1f3d07=this[_0x1e71a0(0x463)][_0x1e71a0(0xa1d)]();for(const _0x43fe99 of _0x1f3d07){if(_0x1e71a0(0x42a)==='HKBFX'){function _0x41597a(){const _0x2d467b=_0x1e71a0;if(this[_0x2d467b(0x1a5)]!==_0x33e385)return![];if(!_0x2e3704[_0x2d467b(0xb22)]())return![];return _0x4e683d[_0x2d467b(0x499)]['Settings'][_0x2d467b(0x1f0)][_0x2d467b(0xa7a)];}}else this['addSkillTypeCommand'](_0x43fe99);}},Window_ActorCommand['prototype'][_0x4ca73a(0x2f8)]=function(_0x1a8001){const _0x518b17=_0x4ca73a;let _0x5edcae=$dataSystem['skillTypes'][_0x1a8001];if(!_0x5edcae)return;let _0x2a48c4=_0x5edcae;const _0xf89b30=this[_0x518b17(0x2f7)]();if(_0xf89b30==='text')_0x2a48c4=_0x2a48c4['replace'](/\x1I\[(\d+)\]/gi,''),_0x2a48c4=_0x2a48c4[_0x518b17(0x301)](/\\I\[(\d+)\]/gi,'');else{if(!_0x5edcae[_0x518b17(0x2b2)](/\\I\[(\d+)\]/i)){if(_0x518b17(0xb68)===_0x518b17(0xb31)){function _0x38fcb0(){return this['isDTB']();}}else{const _0x1fc8bd=Imported[_0x518b17(0x2b8)]?VisuMZ['SkillsStatesCore'][_0x518b17(0x800)][_0x518b17(0x5e8)]:VisuMZ['BattleCore'][_0x518b17(0x800)][_0x518b17(0x7f4)],_0x40ae8c=$dataSystem[_0x518b17(0x4b5)]['includes'](_0x1a8001),_0x31319f=_0x40ae8c?_0x1fc8bd[_0x518b17(0x398)]:_0x1fc8bd[_0x518b17(0x9c4)];_0x2a48c4=_0x518b17(0x30a)[_0x518b17(0x26f)](_0x31319f,_0x5edcae);}}}this[_0x518b17(0x459)](_0x2a48c4,_0x518b17(0x500),!![],_0x1a8001);},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0xa12)]=function(){const _0x58dc75=_0x4ca73a,_0x4d976f=this['_actor'][_0x58dc75(0xa1d)](),_0xc248dd=this[_0x58dc75(0x463)][_0x58dc75(0x5c4)]();for(const _0x25d449 of _0xc248dd){if('qkSKf'!=='qkSKf'){function _0x2431e4(){const _0x397ac6=_0x58dc75;this[_0x397ac6(0x192)]();}}else{if(!_0x25d449)continue;if(Imported[_0x58dc75(0x2b8)]){if(this['noSimilarSTypes'](_0x25d449))continue;if(this[_0x58dc75(0x248)](_0x25d449))continue;}else{if(!_0x4d976f[_0x58dc75(0x93d)](_0x25d449[_0x58dc75(0x8ed)])){if(_0x58dc75(0x6b3)==='DVVMW')continue;else{function _0x538740(){const _0x1aa9ac=_0x58dc75;if(_0x38c949)_0x33fe0a['_subject'][_0x1aa9ac(0x2b0)](![]);const _0x2f7170=_0x5992a2[0x0];_0xa53793[_0x1aa9ac(0x56e)](_0x2f7170,_0x1e11de);}}}}this[_0x58dc75(0x1e2)](_0x25d449);}}},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x241)]=function(_0x29bd75){const _0x5d6f6d=_0x4ca73a,_0x20aa5e=this[_0x5d6f6d(0x463)][_0x5d6f6d(0xa1d)](),_0x34aa1a=_0x20aa5e[_0x5d6f6d(0x5be)](_0x2ed85d=>DataManager[_0x5d6f6d(0x8d5)](_0x29bd75)[_0x5d6f6d(0x93d)](_0x2ed85d));return _0x34aa1a[_0x5d6f6d(0x73b)]<=0x0;},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x248)]=function(_0x48a854){const _0x37c585=_0x4ca73a;if(!Window_SkillList[_0x37c585(0x90a)][_0x37c585(0xaf4)]['call'](this,_0x48a854))return!![];if(!Window_SkillList[_0x37c585(0x90a)][_0x37c585(0xa55)][_0x37c585(0x37c)](this,_0x48a854))return!![];if(!Window_SkillList[_0x37c585(0x90a)]['checkShowHideSkillNotetags'][_0x37c585(0x37c)](this,_0x48a854))return!![];return![];},Window_ActorCommand['prototype']['addSingleSkillCommand']=function(_0x186dd9){const _0x14293a=_0x4ca73a;if(!_0x186dd9)return;if(!this['canAddSkillCommand'](_0x186dd9))return;const _0xeb1951=this[_0x14293a(0x2f7)](),_0x208775=DataManager['battleCommandName'](_0x186dd9),_0x2c883a=DataManager[_0x14293a(0x262)](_0x186dd9),_0x18877a=_0xeb1951==='text'?_0x208775:_0x14293a(0x30a)[_0x14293a(0x26f)](_0x2c883a,_0x208775),_0x1d5e14=this[_0x14293a(0x463)]['canUse'](_0x186dd9);this[_0x14293a(0x459)](_0x18877a,_0x14293a(0x532),_0x1d5e14,_0x186dd9['id']);},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0xb33)]=function(_0x4bd2b4){const _0x2a8543=_0x4ca73a,_0x25d0f7=_0x4bd2b4[_0x2a8543(0xaa8)];if(_0x25d0f7[_0x2a8543(0x2b2)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x2a8543(0x463)]['isLearnedSkill'](_0x4bd2b4['id']))return![];}if(_0x25d0f7['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x2a8543(0x463)]['hasSkill'](_0x4bd2b4['id']))return![];}const _0x57e687=VisuMZ[_0x2a8543(0x499)][_0x2a8543(0xa7e)](_0x4bd2b4,_0x2a8543(0x7d7));if(VisuMZ[_0x2a8543(0x499)]['JS'][_0x57e687]){if(!VisuMZ[_0x2a8543(0x499)]['JS'][_0x57e687][_0x2a8543(0x37c)](this,this['_actor'],_0x4bd2b4))return![];}return VisuMZ[_0x2a8543(0x499)][_0x2a8543(0x354)](_0x4bd2b4);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x354)]=function(_0x116e43){const _0x5447e0=_0x4ca73a,_0x167fd5=_0x116e43[_0x5447e0(0xaa8)];if(_0x167fd5[_0x5447e0(0x2b2)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x5447e0(0x196)===_0x5447e0(0x3ab)){function _0x22cd0b(){const _0x27a2b3=_0x5447e0,_0x2e9622=_0x45d4e9[_0x27a2b3(0xa1a)]('['+_0x1a7d5f['$1'][_0x27a2b3(0x2b2)](/\d+/g)+']');for(const _0x48a109 of _0x2e9622){if(!_0x1beaef[_0x27a2b3(0x6e0)](_0x48a109))return!![];}return![];}}else{const _0x2e6b0d=JSON[_0x5447e0(0xa1a)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x37d7f9 of _0x2e6b0d){if(!$gameSwitches[_0x5447e0(0x6e0)](_0x37d7f9))return![];}return!![];}}if(_0x167fd5[_0x5447e0(0x2b2)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x483e7f=JSON[_0x5447e0(0xa1a)]('['+RegExp['$1'][_0x5447e0(0x2b2)](/\d+/g)+']');for(const _0x22016d of _0x483e7f){if(_0x5447e0(0x340)!==_0x5447e0(0x9f2)){if(!$gameSwitches[_0x5447e0(0x6e0)](_0x22016d))return![];}else{function _0x2ced39(){this['targetActionSet'](_0x42feda,_0x24d2cd,_0x342703);}}}return!![];}if(_0x167fd5[_0x5447e0(0x2b2)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2f24e4=JSON[_0x5447e0(0xa1a)]('['+RegExp['$1'][_0x5447e0(0x2b2)](/\d+/g)+']');for(const _0x2a6de1 of _0x2f24e4){if($gameSwitches[_0x5447e0(0x6e0)](_0x2a6de1))return!![];}return![];}if(_0x167fd5['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x970f1d=JSON[_0x5447e0(0xa1a)]('['+RegExp['$1'][_0x5447e0(0x2b2)](/\d+/g)+']');for(const _0x1b29c3 of _0x970f1d){if(!$gameSwitches['value'](_0x1b29c3))return!![];}return![];}if(_0x167fd5[_0x5447e0(0x2b2)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x81fad6=JSON[_0x5447e0(0xa1a)]('['+RegExp['$1'][_0x5447e0(0x2b2)](/\d+/g)+']');for(const _0x46225c of _0x81fad6){if(!$gameSwitches[_0x5447e0(0x6e0)](_0x46225c))return!![];}return![];}if(_0x167fd5[_0x5447e0(0x2b2)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x5447e0(0x91e)===_0x5447e0(0x236)){function _0x40dbbf(){const _0x4ffe56=_0x5447e0;this['startMotion'](_0x4ffe56(0x656));}}else{const _0xa6f01a=JSON[_0x5447e0(0xa1a)]('['+RegExp['$1'][_0x5447e0(0x2b2)](/\d+/g)+']');for(const _0x3a635d of _0xa6f01a){if($gameSwitches[_0x5447e0(0x6e0)](_0x3a635d))return![];}return!![];}}return!![];},Window_ActorCommand[_0x4ca73a(0x90a)]['addEscapeCommand']=function(){const _0x1b20e0=_0x4ca73a,_0x3b1f5a=this[_0x1b20e0(0x2f7)](),_0x127557=VisuMZ['BattleCore']['Settings']['PartyCmd'][_0x1b20e0(0x356)],_0x126251=_0x3b1f5a===_0x1b20e0(0x5db)?TextManager[_0x1b20e0(0x656)]:_0x1b20e0(0x30a)[_0x1b20e0(0x26f)](_0x127557,TextManager[_0x1b20e0(0x656)]),_0x5808df=this[_0x1b20e0(0x5cc)]();this[_0x1b20e0(0x459)](_0x126251,'escape',_0x5808df);},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x5cc)]=function(){const _0x4c6504=_0x4ca73a;return BattleManager[_0x4c6504(0x583)]();},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0xad3)]=function(){const _0x2cc14c=_0x4ca73a,_0x4872dc=this[_0x2cc14c(0x2f7)](),_0x3369ce=VisuMZ[_0x2cc14c(0x499)][_0x2cc14c(0x800)]['PartyCmd'][_0x2cc14c(0x83d)],_0x4214bc=_0x4872dc===_0x2cc14c(0x5db)?TextManager[_0x2cc14c(0x90c)]:'\x5cI[%1]%2'[_0x2cc14c(0x26f)](_0x3369ce,TextManager[_0x2cc14c(0x90c)]),_0x2b2cc3=this[_0x2cc14c(0x9b1)]();this['addCommand'](_0x4214bc,_0x2cc14c(0x90c),_0x2b2cc3);},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x9b1)]=function(){return!![];},Window_ActorCommand['prototype'][_0x4ca73a(0x5e2)]=function(){const _0x111a86=_0x4ca73a;return VisuMZ['BattleCore']['Settings'][_0x111a86(0x7f4)]['CmdTextAlign'];},Window_ActorCommand['prototype'][_0x4ca73a(0x70e)]=function(_0x14dfac){const _0x10511c=_0x4ca73a,_0x1f6061=this[_0x10511c(0x44c)](_0x14dfac);if(_0x1f6061===_0x10511c(0x747)){if(_0x10511c(0x77f)!==_0x10511c(0x77f)){function _0x4a4830(){const _0x389f6=_0x10511c,_0x23b264=this[_0x389f6(0x4f6)]();_0x23b264&&(_0x23b264[_0x389f6(0x5cb)](_0x26d528),[_0x389f6(0xb65),'thrust','missile'][_0x389f6(0x93d)](_0x504ae5)&&this[_0x389f6(0x92d)]());}}else this[_0x10511c(0xabe)](_0x14dfac);}else{if(_0x1f6061===_0x10511c(0x7c5))this[_0x10511c(0x43e)](_0x14dfac);else{if(_0x10511c(0x9f8)!==_0x10511c(0x9f8)){function _0x22421e(){const _0x3154c7=_0x10511c;_0x3c1d1b[_0x3154c7(0x499)][_0x3154c7(0x543)][_0x3154c7(0x37c)](this,_0x38dedc);}}else Window_Command[_0x10511c(0x90a)]['drawItem'][_0x10511c(0x37c)](this,_0x14dfac);}}this[_0x10511c(0x374)](_0x14dfac);},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x2f7)]=function(){const _0xcadd46=_0x4ca73a;return VisuMZ[_0xcadd46(0x499)][_0xcadd46(0x800)][_0xcadd46(0x7f4)][_0xcadd46(0x446)];},Window_ActorCommand['prototype'][_0x4ca73a(0x44c)]=function(_0x1fe512){const _0x23bdb9=_0x4ca73a;if(_0x1fe512<0x0)return _0x23bdb9(0x5db);const _0x1239f2=this[_0x23bdb9(0x2f7)]();if(_0x1239f2!=='auto'){if(_0x23bdb9(0xb81)!==_0x23bdb9(0x400))return _0x1239f2;else{function _0x55232d(){const _0x557a20=_0x23bdb9;return _0xd21d4c[_0x557a20(0x499)][_0x557a20(0x800)][_0x557a20(0x1b1)]['MaxLines'];}}}else{if(this[_0x23bdb9(0x9f1)]()>0x0){const _0x8debc6=this['commandName'](_0x1fe512);if(_0x8debc6[_0x23bdb9(0x2b2)](/\\I\[(\d+)\]/i)){const _0x1bab56=this[_0x23bdb9(0x310)](_0x1fe512),_0x1f2370=this[_0x23bdb9(0x197)](_0x8debc6)[_0x23bdb9(0x781)];return _0x1f2370<=_0x1bab56[_0x23bdb9(0x781)]?_0x23bdb9(0x747):_0x23bdb9(0x7c5);}}}return _0x23bdb9(0x5db);},Window_ActorCommand[_0x4ca73a(0x90a)]['drawItemStyleIconText']=function(_0x345bde){const _0x1cd5ed=_0x4ca73a,_0x42b785=this[_0x1cd5ed(0x310)](_0x345bde),_0x4564f4=this[_0x1cd5ed(0x2e6)](_0x345bde),_0x13ec4c=this[_0x1cd5ed(0x197)](_0x4564f4)[_0x1cd5ed(0x781)];this['changePaintOpacity'](this[_0x1cd5ed(0xa83)](_0x345bde));const _0x18c126=this['itemTextAlign']();if(_0x18c126==='right')this[_0x1cd5ed(0x877)](_0x4564f4,_0x42b785['x']+_0x42b785[_0x1cd5ed(0x781)]-_0x13ec4c,_0x42b785['y'],_0x13ec4c);else{if(_0x18c126==='center'){const _0x5683eb=_0x42b785['x']+Math['floor']((_0x42b785[_0x1cd5ed(0x781)]-_0x13ec4c)/0x2);this[_0x1cd5ed(0x877)](_0x4564f4,_0x5683eb,_0x42b785['y'],_0x13ec4c);}else this['drawTextEx'](_0x4564f4,_0x42b785['x'],_0x42b785['y'],_0x13ec4c);}},Window_ActorCommand['prototype'][_0x4ca73a(0x43e)]=function(_0x107b6d){const _0x2a5fb6=_0x4ca73a;this[_0x2a5fb6(0x2e6)](_0x107b6d)['match'](/\\I\[(\d+)\]/i);const _0x3f06b1=Number(RegExp['$1'])||0x0,_0x42ba1b=this[_0x2a5fb6(0x310)](_0x107b6d),_0x1d945f=_0x42ba1b['x']+Math[_0x2a5fb6(0x3d7)]((_0x42ba1b[_0x2a5fb6(0x781)]-ImageManager[_0x2a5fb6(0x445)])/0x2),_0x455807=_0x42ba1b['y']+(_0x42ba1b[_0x2a5fb6(0x38c)]-ImageManager[_0x2a5fb6(0x449)])/0x2;this[_0x2a5fb6(0x955)](_0x3f06b1,_0x1d945f,_0x455807);},Window_ActorCommand['prototype'][_0x4ca73a(0x374)]=function(_0x40fb62){const _0x11dc85=_0x4ca73a;if(!(VisuMZ[_0x11dc85(0x499)][_0x11dc85(0x800)][_0x11dc85(0x7f4)][_0x11dc85(0x45d)]??!![]))return;const _0x166325=this[_0x11dc85(0x82e)](_0x40fb62);if(![_0x11dc85(0x9ea),_0x11dc85(0x386),'singleSkill'][_0x11dc85(0x93d)](_0x166325))return;const _0x16d2c4=this[_0x11dc85(0x310)](_0x40fb62);let _0x3b52e5=null;if(_0x166325===_0x11dc85(0x9ea)){if(_0x11dc85(0x69f)!=='RMkiR'){function _0x2f172f(){const _0x522801=_0x11dc85;return _0x510df9[_0x522801(0x499)][_0x522801(0x800)][_0x522801(0x1b1)]['BattleLogRectJS'][_0x522801(0x37c)](this);}}else _0x3b52e5=$dataSkills[this[_0x11dc85(0x463)][_0x11dc85(0x95a)]()];}else{if(_0x166325===_0x11dc85(0x386)){if(_0x11dc85(0x569)!=='sZxnC')_0x3b52e5=$dataSkills[this[_0x11dc85(0x463)]['guardSkillId']()];else{function _0x4435ac(){const _0x261d2e=_0x11dc85;if(!_0x4f6d01)return;if(!this[_0x261d2e(0xb33)](_0x1c0331))return;const _0x39d8b7=this[_0x261d2e(0x2f7)](),_0x4942a6=_0xcd750c[_0x261d2e(0x91c)](_0x38dc16),_0x12a2c7=_0x143dca[_0x261d2e(0x262)](_0x451623),_0x19c41a=_0x39d8b7===_0x261d2e(0x5db)?_0x4942a6:_0x261d2e(0x30a)[_0x261d2e(0x26f)](_0x12a2c7,_0x4942a6),_0x1b315f=this['_actor'][_0x261d2e(0x61c)](_0x1f6462);this[_0x261d2e(0x459)](_0x19c41a,_0x261d2e(0x532),_0x1b315f,_0x350bd6['id']);}}}else{if(_0x11dc85(0x937)==='gwIbo'){function _0x83ce11(){const _0x3839a8=_0x11dc85,_0x253a23=_0x27fa90[_0x3839a8(0x499)][_0x3839a8(0x800)][_0x3839a8(0x1f0)],_0x1d12c8=_0x136a94[_0x3839a8(0x6db)]?0x4:0x3,_0x58b7b5=_0x1d12c8*0x80+(_0x1d12c8-0x1)*0x8+0x4,_0x5e95c5=this[_0x3839a8(0xb16)](_0x5ec9e4),_0x384081=this['itemRect'](_0x4af6bd);let _0x52b918=_0x384081['x']+this['padding'];_0x253a23[_0x3839a8(0x9e7)]?_0x52b918=_0x384081['x']+_0x2ac5fd[_0x3839a8(0xad6)]+0x8:_0x52b918+=_0x32dd0d[_0x3839a8(0x445)];const _0x4f9a7e=_0x2993c7['round'](_0x17a873['min'](_0x384081['x']+_0x384081[_0x3839a8(0x781)]-_0x58b7b5,_0x52b918)),_0x557772=_0xed412b[_0x3839a8(0x555)](_0x384081['y']+(_0x384081[_0x3839a8(0x38c)]-_0x283b53[_0x3839a8(0x90a)][_0x3839a8(0x371)]())/0x2),_0x47f8db=_0x3e8b17[_0x3839a8(0x555)](_0x4f9a7e-_0x4f43db[_0x3839a8(0x445)]/0x2-0x4),_0x56a474=_0x45168b[_0x3839a8(0x555)](_0x384081['y']+(_0x384081[_0x3839a8(0x38c)]-_0x523743[_0x3839a8(0x449)])/0x2+_0x5f48de[_0x3839a8(0x449)]/0x2);let _0x189b22=_0x4f9a7e+0x88;const _0x314f2e=_0x557772;this[_0x3839a8(0xb0c)](_0x5e95c5,_0x4f9a7e-0x4+(_0x253a23[_0x3839a8(0xa4c)]||0x0),_0x557772+(_0x253a23[_0x3839a8(0x4a6)]||0x0)),this[_0x3839a8(0x805)](_0x5e95c5,_0x4f9a7e+(_0x253a23[_0x3839a8(0x6b8)]||0x0),_0x557772+(_0x253a23[_0x3839a8(0x811)]||0x0)),this[_0x3839a8(0x2dd)](_0x5e95c5,_0x47f8db+(_0x253a23[_0x3839a8(0x704)]||0x0),_0x56a474+(_0x253a23[_0x3839a8(0x6a4)]||0x0)),this[_0x3839a8(0x231)](_0x5e95c5,'hp',_0x189b22+0x88*0x0+(_0x253a23[_0x3839a8(0x801)]||0x0),_0x314f2e+(_0x253a23[_0x3839a8(0x345)]||0x0)),this[_0x3839a8(0x231)](_0x5e95c5,'mp',_0x189b22+0x88*0x1+(_0x253a23[_0x3839a8(0x263)]||0x0),_0x314f2e+(_0x253a23[_0x3839a8(0x65b)]||0x0)),_0x6de01a['optDisplayTp']&&this[_0x3839a8(0x231)](_0x5e95c5,'tp',_0x189b22+0x88*0x2+(_0x253a23[_0x3839a8(0x88b)]||0x0),_0x314f2e+(_0x253a23['TpGaugeOffsetY']||0x0));}}else _0x3b52e5=$dataSkills[this[_0x11dc85(0xb66)][_0x40fb62][_0x11dc85(0x51a)]];}}this[_0x11dc85(0x3d4)](this[_0x11dc85(0x463)],_0x3b52e5,_0x16d2c4['x'],_0x16d2c4['y'],_0x16d2c4[_0x11dc85(0x781)]);},Window_ActorCommand['prototype'][_0x4ca73a(0x3d4)]=function(_0xe29d16,_0x4ff903,_0x372b88,_0x13813e,_0x46c073){const _0x306cac=_0x4ca73a;if(!_0x4ff903)return;if(Imported['VisuMZ_1_SkillsStatesCore'])Window_Command['prototype'][_0x306cac(0x3d4)]['call'](this,_0xe29d16,_0x4ff903,_0x372b88,_0x13813e,_0x46c073);else{if(_0x306cac(0xa30)!==_0x306cac(0x4e5))Window_SkillList[_0x306cac(0x90a)][_0x306cac(0x3d4)]['call'](this,_0x4ff903,_0x372b88,_0x13813e,_0x46c073);else{function _0x4f12d6(){const _0x58c594=_0x306cac;return _0x61c05a[_0x58c594(0x90a)][_0x58c594(0x718)]['call'](this);}}}},Window_ActorCommand['prototype'][_0x4ca73a(0x929)]=function(){},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x9b8)]=function(){const _0x593021=_0x4ca73a;Window_Command[_0x593021(0x90a)][_0x593021(0x9b8)]['call'](this);const _0x191464=this[_0x593021(0x912)]();_0x191464===_0x593021(0x89e)&&this[_0x593021(0x86b)]();},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x912)]=function(){const _0x3a124d=_0x4ca73a;if(this[_0x3a124d(0x383)])return this[_0x3a124d(0x383)];return this[_0x3a124d(0x383)]=SceneManager[_0x3a124d(0x612)][_0x3a124d(0x912)](),this[_0x3a124d(0x383)];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x3bf)]=Window_ActorCommand['prototype']['setup'],Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x584)]=function(_0x2ec0fe){const _0x329ad2=_0x4ca73a,_0x45d2c1=this['battleLayoutStyle']();if(_0x2ec0fe&&['xp','portrait'][_0x329ad2(0x93d)](_0x45d2c1)){if(_0x329ad2(0x81c)!==_0x329ad2(0x81c)){function _0x333326(){const _0x5634ac=_0x329ad2;this['_enemies']=this[_0x5634ac(0x4cd)](),this[_0x5634ac(0x25e)](),_0x3c99ca[_0x5634ac(0x90a)][_0x5634ac(0x705)][_0x5634ac(0x37c)](this);}}else this[_0x329ad2(0x639)](_0x2ec0fe);}else{if(_0x2ec0fe&&[_0x329ad2(0x89e)]['includes'](_0x45d2c1)){if(_0x329ad2(0x88c)!==_0x329ad2(0x88c)){function _0xa6e6c1(){const _0x47570e=_0x329ad2;if(!_0x8f091[_0x47570e(0xb22)]())return;_0x4076a5['ConvertParams'](_0x865cbe,_0x11df4f);const _0x81b97f=_0x3d7af9[_0x47570e(0x260)](),_0x32acff=_0x23f38a[_0x47570e(0x871)](_0x572c79['Targets']),_0x472f70=_0x3d4796[_0x47570e(0x38f)],_0x3f746b=_0x1660e2['Mirror'];if(!_0x81b97f)return;_0x1bbda4[_0x47570e(0xad9)](_0x32acff,_0x472f70,_0x3f746b);if(_0x568e94[_0x47570e(0x21e)])_0x81b97f[_0x47570e(0x728)]('battleAnimation');}}else this[_0x329ad2(0x8ef)](_0x2ec0fe),this[_0x329ad2(0x86b)]();}}VisuMZ['BattleCore'][_0x329ad2(0x3bf)][_0x329ad2(0x37c)](this,_0x2ec0fe),_0x2ec0fe&&$gameTroop['aliveMembers']()[_0x329ad2(0x73b)]>0x0&&_0x2ec0fe['battler']()&&_0x2ec0fe[_0x329ad2(0x4f6)]()[_0x329ad2(0x25d)]();},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x639)]=function(_0x34da48){const _0x5ee9dc=_0x4ca73a,_0x3eeebd=Math[_0x5ee9dc(0x555)](Graphics[_0x5ee9dc(0x83e)]/0x3),_0x4c42d9=Math['round'](Graphics['boxWidth']/$gameParty[_0x5ee9dc(0x39e)]()[_0x5ee9dc(0x73b)]),_0x1fb956=Math['min'](_0x3eeebd,_0x4c42d9),_0x4a5ef2=this[_0x5ee9dc(0x5bd)](VisuMZ[_0x5ee9dc(0x499)][_0x5ee9dc(0x800)][_0x5ee9dc(0x1f0)][_0x5ee9dc(0x4f4)]),_0x6c1552=_0x4c42d9*_0x34da48[_0x5ee9dc(0x43f)]()+(_0x4c42d9-_0x1fb956)/0x2,_0x519473=SceneManager[_0x5ee9dc(0x612)][_0x5ee9dc(0x790)]['y']-_0x4a5ef2;this[_0x5ee9dc(0xb51)](_0x6c1552,_0x519473,_0x1fb956,_0x4a5ef2),this[_0x5ee9dc(0x55c)](),this[_0x5ee9dc(0x7f8)](0x1);},Window_ActorCommand['prototype'][_0x4ca73a(0x8ef)]=function(_0x5b4639){const _0x2b5644=_0x4ca73a,_0x4e6d82=SceneManager[_0x2b5644(0x612)][_0x2b5644(0xaef)]();this[_0x2b5644(0xb51)](_0x4e6d82['x'],_0x4e6d82['y'],_0x4e6d82[_0x2b5644(0x781)],_0x4e6d82['height']),this[_0x2b5644(0x55c)](),this[_0x2b5644(0x7f8)](0x0);},Window_ActorCommand[_0x4ca73a(0x90a)]['refreshDimmerBitmap']=function(){const _0x1f942e=_0x4ca73a;if(this[_0x1f942e(0x59f)]){const _0x53d786=this[_0x1f942e(0x59f)][_0x1f942e(0xa74)],_0x5e90f3=this[_0x1f942e(0x781)]-0x8,_0x21bf95=this[_0x1f942e(0x38c)],_0x110de1=this[_0x1f942e(0x949)],_0x46382a=ColorManager['dimColor1'](),_0xb867b3=ColorManager['dimColor2']();this[_0x1f942e(0x59f)]['x']=0x4,_0x53d786[_0x1f942e(0x833)](_0x5e90f3,_0x21bf95),_0x53d786[_0x1f942e(0x886)](0x0,0x0,_0x5e90f3,_0x110de1,_0xb867b3,_0x46382a,!![]),_0x53d786[_0x1f942e(0x411)](0x0,_0x110de1,_0x5e90f3,_0x21bf95-_0x110de1*0x2,_0x46382a),_0x53d786['gradientFillRect'](0x0,_0x21bf95-_0x110de1,_0x5e90f3,_0x110de1,_0x46382a,_0xb867b3,!![]),this['_dimmerSprite'][_0x1f942e(0x6c8)](0x0,0x0,_0x5e90f3,_0x21bf95);}},Window_ActorCommand[_0x4ca73a(0x90a)][_0x4ca73a(0x5b3)]=function(){const _0x2ce014=_0x4ca73a;if(!this['_actor'])return;const _0x4a9eb8=VisuMZ['BattleCore'][_0x2ce014(0x800)][_0x2ce014(0x7f4)],_0x162370=this[_0x2ce014(0xa05)]();switch(_0x162370){case _0x2ce014(0x9ea):this['setHelpWindowItem']($dataSkills[this[_0x2ce014(0x463)][_0x2ce014(0x95a)]()]);break;case'guard':this[_0x2ce014(0xa62)]($dataSkills[this[_0x2ce014(0x463)][_0x2ce014(0x91f)]()]);break;case _0x2ce014(0x500):const _0x34f901=_0x4a9eb8['HelpSkillType'],_0x21f6ea=_0x34f901['format']($dataSystem[_0x2ce014(0xa1d)][this['currentExt']()]);this[_0x2ce014(0xb09)][_0x2ce014(0x963)](_0x21f6ea);break;case _0x2ce014(0x532):this['setHelpWindowItem']($dataSkills[this[_0x2ce014(0x824)]()]);break;case'item':this['_helpWindow'][_0x2ce014(0x963)](_0x4a9eb8[_0x2ce014(0x326)]);break;case _0x2ce014(0x656):this['_helpWindow']['setText'](_0x4a9eb8[_0x2ce014(0x9b2)]);break;case _0x2ce014(0x90c):this[_0x2ce014(0xb09)][_0x2ce014(0x963)](_0x4a9eb8[_0x2ce014(0x60c)]);break;default:this[_0x2ce014(0xb09)][_0x2ce014(0x963)]('');break;}},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x50b)]=Window_BattleStatus[_0x4ca73a(0x90a)]['initialize'],Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0xa47)]=function(_0x380a25){const _0x247fd1=_0x4ca73a;VisuMZ['BattleCore'][_0x247fd1(0x50b)]['call'](this,_0x380a25),this['initBattleCore'](),this[_0x247fd1(0x221)]();},Window_BattleStatus['prototype'][_0x4ca73a(0x912)]=function(){const _0x414b55=_0x4ca73a;if(this[_0x414b55(0x383)])return this['_battleLayoutStyle'];return this[_0x414b55(0x383)]=SceneManager[_0x414b55(0x612)][_0x414b55(0x912)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0xadf)]=function(){const _0x542323=_0x4ca73a;this[_0x542323(0x673)]=this[_0x542323(0x632)]();const _0x51e8a7=VisuMZ[_0x542323(0x499)][_0x542323(0x800)][_0x542323(0x1f0)];if(_0x51e8a7['StatusWindowSkinHide']){if(_0x542323(0x57f)!==_0x542323(0x57f)){function _0x94be7f(){const _0x1b43ca=_0x542323;_0x5e1127+=_0x223469[_0x1b43ca(0x781)]-_0x3f03d8;}}else this[_0x542323(0x3bd)]=0x0;}},Window_BattleStatus[_0x4ca73a(0x90a)]['isFrameVisible']=function(){const _0xd1c907=_0x4ca73a,_0x6c266e=VisuMZ[_0xd1c907(0x499)][_0xd1c907(0x800)][_0xd1c907(0x1f0)];if(_0x6c266e[_0xd1c907(0xa48)])return!![];const _0x5971de=this[_0xd1c907(0x912)]();switch(_0x5971de){case'list':case'border':return!![];break;case _0xd1c907(0x2f9):case'xp':case _0xd1c907(0x61f):default:return![];break;}},Window_BattleStatus['prototype'][_0x4ca73a(0x857)]=function(){const _0x4fe059=_0x4ca73a;return this[_0x4fe059(0x632)]()?0x0:0xa;},Window_BattleStatus[_0x4ca73a(0x90a)]['maxCols']=function(){const _0x495ac7=_0x4ca73a,_0x4fbe89=this[_0x495ac7(0x912)]();switch(_0x4fbe89){case _0x495ac7(0x3c0):return 0x1;break;case'xp':case'portrait':return $gameParty[_0x495ac7(0x39e)]()[_0x495ac7(0x73b)];break;case _0x495ac7(0x2f9):default:return $gameParty[_0x495ac7(0x4cc)]();break;}},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x407)]=function(){const _0x5391a9=_0x4ca73a,_0x3c9b6c=this[_0x5391a9(0x912)]();switch(_0x3c9b6c){case _0x5391a9(0x3c0):return Window_StatusBase[_0x5391a9(0x90a)][_0x5391a9(0x407)][_0x5391a9(0x37c)](this);break;case _0x5391a9(0x2f9):case'xp':case _0x5391a9(0x61f):default:return this[_0x5391a9(0x2c1)];break;}},Window_BattleStatus[_0x4ca73a(0x90a)]['rowSpacing']=function(){const _0x15545f=_0x4ca73a,_0x33f00e=this['battleLayoutStyle']();switch(_0x33f00e){case _0x15545f(0x3c0):return Window_StatusBase[_0x15545f(0x90a)][_0x15545f(0x764)][_0x15545f(0x37c)](this);break;case _0x15545f(0x2f9):case'xp':case _0x15545f(0x61f):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x4ca73a(0xa3e)]=function(){const _0x19a78a=_0x4ca73a;this[_0x19a78a(0x632)]()?Window_StatusBase[_0x19a78a(0x90a)]['updatePadding'][_0x19a78a(0x37c)](this):this[_0x19a78a(0x949)]=0x8;},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x7bd)]=function(){const _0x1995a1=_0x4ca73a,_0x457451=VisuMZ[_0x1995a1(0x499)][_0x1995a1(0x800)][_0x1995a1(0x1f0)];_0x457451['StatusWindowSkinFilename']?this['windowskin']=ImageManager['loadSystem'](_0x457451['StatusWindowSkinFilename']):Window_StatusBase['prototype'][_0x1995a1(0x7bd)][_0x1995a1(0x37c)](this);},Window_BattleStatus['prototype'][_0x4ca73a(0x8c8)]=function(_0x515c96){const _0x4edfb6=_0x4ca73a,_0xc07edc=VisuMZ[_0x4edfb6(0x499)][_0x4edfb6(0x800)][_0x4edfb6(0x1f0)];if(_0xc07edc['StatusWindowSelectableBackHide'])return;Window_StatusBase['prototype']['drawItemBackground']['call'](this,_0x515c96);},Window_BattleStatus['prototype'][_0x4ca73a(0x257)]=function(){const _0x13262f=_0x4ca73a;this[_0x13262f(0x4d4)]=!![];},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x46b)]=function(){const _0x12044a=_0x4ca73a;Window_StatusBase[_0x12044a(0x90a)][_0x12044a(0x46b)][_0x12044a(0x37c)](this),this['updateRefresh'](),this['updateEffectContainers']();if(this[_0x12044a(0x912)]()===_0x12044a(0x89e))this['updateBorderStyle']();},Window_BattleStatus['prototype'][_0x4ca73a(0x76f)]=function(){const _0x33e4af=_0x4ca73a;if($gameTemp[_0x33e4af(0x680)]()){if(_0x33e4af(0x5d5)!=='oXAZw')this[_0x33e4af(0x3c9)](),this[_0x33e4af(0x4d4)]=![],$gameTemp[_0x33e4af(0x5b0)]();else{function _0x1162d1(){const _0xd0ea61=_0x33e4af;_0x4f18de['BattleCore'][_0xd0ea61(0xa6e)]&&_0xb02ec7[_0xd0ea61(0x499)][_0xd0ea61(0xa6e)][_0xd0ea61(0x37c)](this,_0x5a5c9d),_0x3634b6[_0xd0ea61(0x499)][_0xd0ea61(0x5a1)](_0x2843ad);}}}else this['_requestRefresh']&&(this[_0x33e4af(0x4d4)]=![],this[_0x33e4af(0x705)](),this[_0x33e4af(0x8b9)]());},Window_BattleStatus['prototype'][_0x4ca73a(0xa54)]=function(){const _0x300da1=_0x4ca73a;Window_StatusBase[_0x300da1(0x90a)][_0x300da1(0xa54)][_0x300da1(0x37c)](this);if(!$gameSystem[_0x300da1(0x395)]())this[_0x300da1(0x705)]();},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x929)]=function(){const _0x5b0693=_0x4ca73a;if(this[_0x5b0693(0x1a5)]===Window_BattleStatus)return;Window_StatusBase[_0x5b0693(0x90a)][_0x5b0693(0x929)][_0x5b0693(0x37c)](this);},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x2ea)]=function(_0x5b4555){const _0x100427=_0x4ca73a,_0x4c37bc=this[_0x100427(0x912)]();switch(_0x4c37bc){case'xp':case _0x100427(0x61f):break;case _0x100427(0x2f9):case _0x100427(0x3c0):case'border':default:return Window_StatusBase[_0x100427(0x90a)][_0x100427(0x2ea)][_0x100427(0x37c)](this,_0x5b4555);break;}},VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage']=Window_BattleStatus['prototype'][_0x4ca73a(0x969)],Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x969)]=function(_0x24fef0){const _0x1c29c4=_0x4ca73a,_0x17a5d7=this[_0x1c29c4(0x912)]();switch(_0x17a5d7){case _0x1c29c4(0x3c0):this[_0x1c29c4(0x8e2)](_0x24fef0);break;case'xp':this[_0x1c29c4(0x77c)](_0x24fef0);break;case _0x1c29c4(0x61f):this[_0x1c29c4(0x882)](_0x24fef0);break;case _0x1c29c4(0x2f9):case'border':default:VisuMZ['BattleCore'][_0x1c29c4(0x19a)]['call'](this,_0x24fef0);break;}},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0xb37)]=function(_0x4b96fb){const _0x2fd415=_0x4ca73a,_0x1555d3=this[_0x2fd415(0x912)]();if(!$gameSystem[_0x2fd415(0x395)]())this[_0x2fd415(0x6b1)](_0x4b96fb);switch(_0x1555d3){case _0x2fd415(0x3c0):this[_0x2fd415(0x830)](_0x4b96fb);break;case'xp':case'portrait':case _0x2fd415(0x2f9):case _0x2fd415(0x89e):default:this[_0x2fd415(0x4e3)](_0x4b96fb);break;}},Window_BattleStatus['prototype'][_0x4ca73a(0x2d1)]=function(){const _0x465714=_0x4ca73a,_0x2586e9=this[_0x465714(0x912)]();if(['xp'][_0x465714(0x93d)](_0x2586e9)&&!$gameSystem[_0x465714(0x395)]()){this[_0x465714(0x46e)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x465714(0x90a)][_0x465714(0x2d1)][_0x465714(0x37c)](this);},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x6b1)]=function(_0x4097d6){const _0xe0f3f7=_0x4ca73a,_0x35aac7=this[_0xe0f3f7(0xb16)](_0x4097d6)[_0xe0f3f7(0x4f6)]();if(!_0x35aac7)return;const _0x2393a4=this[_0xe0f3f7(0x912)](),_0x38990f=this[_0xe0f3f7(0x902)](_0x4097d6);let _0x515f2a=Math[_0xe0f3f7(0x555)](_0x38990f['x']+_0x38990f[_0xe0f3f7(0x781)]/0x2)+this[_0xe0f3f7(0x949)];[_0xe0f3f7(0x3c0)][_0xe0f3f7(0x93d)](_0x2393a4)&&(_0x515f2a=_0x38990f['width']/$gameParty[_0xe0f3f7(0x39e)]()[_0xe0f3f7(0x73b)],_0x515f2a*=_0x4097d6,_0x515f2a+=_0x38990f['width']/$gameParty['battleMembers']()['length']/0x2);let _0x1a0ebb=Math[_0xe0f3f7(0x555)](this[_0xe0f3f7(0x80b)](_0x4097d6,_0x35aac7,_0x38990f));_0x35aac7['setHome'](_0x515f2a,_0x1a0ebb),this['addChildAt'](_0x35aac7,0x1),_0x35aac7[_0xe0f3f7(0xa54)]();},Window_BattleStatus[_0x4ca73a(0x90a)]['frontviewSpriteY']=function(_0x3dd83d,_0x35e7bb,_0x53b01e){const _0xf9ce0d=_0x4ca73a,_0x1492cc=VisuMZ[_0xf9ce0d(0x499)][_0xf9ce0d(0x800)]['BattleLayout'],_0x109316=this['battleLayoutStyle']();if(_0x109316==='xp'){if(_0xf9ce0d(0x3ed)!=='awhqy'){const _0x5c9a5c=_0x1492cc[_0xf9ce0d(0xaea)];switch(_0x5c9a5c[_0xf9ce0d(0x3c1)]()[_0xf9ce0d(0x7d2)]()){case _0xf9ce0d(0x56f):return _0x53b01e['height']-_0x35e7bb[_0xf9ce0d(0x654)]['height']/0x4;break;case _0xf9ce0d(0x989):const _0x2cd247=_0x1492cc[_0xf9ce0d(0x687)];return(_0x53b01e[_0xf9ce0d(0x38c)]+(_0x35e7bb['height']||_0x2cd247))/0x2;break;case _0xf9ce0d(0x874):return 0x0;case _0xf9ce0d(0x491):default:return this[_0xf9ce0d(0x5bb)](_0x53b01e);break;}}else{function _0xc45dec(){const _0x2e1b8a=_0xf9ce0d;this[_0x2e1b8a(0x8df)]=null,_0x4056d8[_0x2e1b8a(0x499)][_0x2e1b8a(0x5c1)][_0x2e1b8a(0x37c)](this,_0x320c08);}}}else{if(_0x109316===_0xf9ce0d(0x61f)){}}return _0x35e7bb[_0xf9ce0d(0x38c)];},Window_BattleStatus['prototype'][_0x4ca73a(0x8e2)]=function(_0x18cd96){const _0x1a010c=_0x4ca73a;if(!VisuMZ[_0x1a010c(0x499)]['Settings'][_0x1a010c(0x1f0)][_0x1a010c(0x9e7)])return;const _0x166e85=this['actor'](_0x18cd96),_0x36c87a=this[_0x1a010c(0x902)](_0x18cd96);_0x36c87a[_0x1a010c(0x781)]=ImageManager[_0x1a010c(0xad6)],_0x36c87a[_0x1a010c(0x38c)]-=0x2,this[_0x1a010c(0x75f)](_0x166e85,_0x36c87a['x']+0x1,_0x36c87a['y']+0x1,_0x36c87a[_0x1a010c(0x781)],_0x36c87a[_0x1a010c(0x38c)]);},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x830)]=function(_0xc85501){const _0x5f3163=_0x4ca73a,_0x16d8f9=VisuMZ[_0x5f3163(0x499)]['Settings']['BattleLayout'],_0x198413=$dataSystem['optDisplayTp']?0x4:0x3,_0x4ad2c8=_0x198413*0x80+(_0x198413-0x1)*0x8+0x4,_0x4e4b61=this['actor'](_0xc85501),_0x537b37=this[_0x5f3163(0x902)](_0xc85501);let _0x4302b5=_0x537b37['x']+this['padding'];if(_0x16d8f9[_0x5f3163(0x9e7)])_0x4302b5=_0x537b37['x']+ImageManager[_0x5f3163(0xad6)]+0x8;else{if('lrlrh'!==_0x5f3163(0x37a))_0x4302b5+=ImageManager['iconWidth'];else{function _0x342fc7(){const _0x5732dc=_0x5f3163;return this[_0x5732dc(0x911)]&&this[_0x5732dc(0x911)][_0x5732dc(0x804)]();}}}const _0x1de39c=Math[_0x5f3163(0x555)](Math[_0x5f3163(0x455)](_0x537b37['x']+_0x537b37[_0x5f3163(0x781)]-_0x4ad2c8,_0x4302b5)),_0x2e3766=Math[_0x5f3163(0x555)](_0x537b37['y']+(_0x537b37[_0x5f3163(0x38c)]-Sprite_Name[_0x5f3163(0x90a)][_0x5f3163(0x371)]())/0x2),_0x4cc123=Math[_0x5f3163(0x555)](_0x1de39c-ImageManager['iconWidth']/0x2-0x4),_0x1b619f=Math[_0x5f3163(0x555)](_0x537b37['y']+(_0x537b37[_0x5f3163(0x38c)]-ImageManager['iconHeight'])/0x2+ImageManager[_0x5f3163(0x449)]/0x2);let _0x4b2a01=_0x1de39c+0x88;const _0x13e074=_0x2e3766;this[_0x5f3163(0xb0c)](_0x4e4b61,_0x1de39c-0x4+(_0x16d8f9['TpbGaugeOffsetX']||0x0),_0x2e3766+(_0x16d8f9[_0x5f3163(0x4a6)]||0x0)),this['placeActorName'](_0x4e4b61,_0x1de39c+(_0x16d8f9[_0x5f3163(0x6b8)]||0x0),_0x2e3766+(_0x16d8f9[_0x5f3163(0x811)]||0x0)),this['placeStateIcon'](_0x4e4b61,_0x4cc123+(_0x16d8f9[_0x5f3163(0x704)]||0x0),_0x1b619f+(_0x16d8f9['StateIconOffsetY']||0x0)),this[_0x5f3163(0x231)](_0x4e4b61,'hp',_0x4b2a01+0x88*0x0+(_0x16d8f9[_0x5f3163(0x801)]||0x0),_0x13e074+(_0x16d8f9[_0x5f3163(0x345)]||0x0)),this[_0x5f3163(0x231)](_0x4e4b61,'mp',_0x4b2a01+0x88*0x1+(_0x16d8f9[_0x5f3163(0x263)]||0x0),_0x13e074+(_0x16d8f9[_0x5f3163(0x65b)]||0x0));if($dataSystem[_0x5f3163(0x6db)]){if('xjgSr'==='xjgSr')this[_0x5f3163(0x231)](_0x4e4b61,'tp',_0x4b2a01+0x88*0x2+(_0x16d8f9['TpGaugeOffsetX']||0x0),_0x13e074+(_0x16d8f9[_0x5f3163(0xb30)]||0x0));else{function _0x569c4c(){const _0x4ae0b3=_0x5f3163,_0x1fbc3b=_0x13722f[_0x4ae0b3(0x499)]['Settings'][_0x4ae0b3(0xa94)];this[_0x4ae0b3(0x7c0)]=_0x1fbc3b[_0x4ae0b3(0x3d2)],this[_0x4ae0b3(0xb5d)]={};}}}},Window_BattleStatus[_0x4ca73a(0x90a)]['drawItemImageXPStyle']=function(_0x395fc4){const _0x37f0f2=_0x4ca73a;if(!$gameSystem[_0x37f0f2(0x395)]())return;VisuMZ['BattleCore'][_0x37f0f2(0x19a)][_0x37f0f2(0x37c)](this,_0x395fc4);},Window_BattleStatus[_0x4ca73a(0x90a)]['drawItemStatusXPStyle']=function(_0x446c4b){const _0x55eb29=_0x4ca73a,_0x307ad5=VisuMZ[_0x55eb29(0x499)][_0x55eb29(0x800)][_0x55eb29(0x1f0)],_0x14b3c8=this[_0x55eb29(0xb16)](_0x446c4b),_0xa098bb=this[_0x55eb29(0x902)](_0x446c4b),_0xdaeeff=Math['round'](_0xa098bb['x']+(_0xa098bb[_0x55eb29(0x781)]-0x80)/0x2),_0x19e42c=this[_0x55eb29(0x5bb)](_0xa098bb);let _0x269b02=_0xdaeeff-ImageManager[_0x55eb29(0x445)]/0x2-0x4,_0x1176d4=_0x19e42c+ImageManager[_0x55eb29(0x449)]/0x2;_0x269b02-ImageManager[_0x55eb29(0x445)]/0x2<_0xa098bb['x']&&(_0x269b02=_0xdaeeff+ImageManager[_0x55eb29(0x445)]/0x2-0x4,_0x1176d4=_0x19e42c-ImageManager[_0x55eb29(0x449)]/0x2);const _0x2ae71b=_0xdaeeff,_0x379ea5=this['basicGaugesY'](_0xa098bb);this[_0x55eb29(0xb0c)](_0x14b3c8,_0xdaeeff+(_0x307ad5[_0x55eb29(0xa4c)]||0x0),_0x19e42c+(_0x307ad5['TpbGaugeOffsetY']||0x0)),this[_0x55eb29(0x805)](_0x14b3c8,_0xdaeeff+(_0x307ad5[_0x55eb29(0x6b8)]||0x0),_0x19e42c+(_0x307ad5[_0x55eb29(0x811)]||0x0)),this['placeStateIcon'](_0x14b3c8,_0x269b02+(_0x307ad5[_0x55eb29(0x704)]||0x0),_0x1176d4+(_0x307ad5[_0x55eb29(0x6a4)]||0x0)),this['placeGauge'](_0x14b3c8,'hp',_0x2ae71b+(_0x307ad5[_0x55eb29(0x801)]||0x0),_0x379ea5+(_0x307ad5[_0x55eb29(0x345)]||0x0)),this[_0x55eb29(0x231)](_0x14b3c8,'mp',_0x2ae71b+(_0x307ad5[_0x55eb29(0x263)]||0x0),_0x379ea5+this[_0x55eb29(0x23e)]()+(_0x307ad5['MpGaugeOffsetY']||0x0)),$dataSystem[_0x55eb29(0x6db)]&&this[_0x55eb29(0x231)](_0x14b3c8,'tp',_0x2ae71b+(_0x307ad5[_0x55eb29(0x88b)]||0x0),_0x379ea5+this['gaugeLineHeight']()*0x2+(_0x307ad5[_0x55eb29(0xb30)]||0x0));},Window_BattleStatus['prototype'][_0x4ca73a(0x25c)]=function(_0x261748){const _0x5aa0e4=_0x4ca73a;if(!VisuMZ[_0x5aa0e4(0x499)]['Settings'][_0x5aa0e4(0x1f0)][_0x5aa0e4(0x8fd)])return![];if(_0x261748['getBattlePortrait']())return!![];return Imported[_0x5aa0e4(0x58c)]&&_0x261748[_0x5aa0e4(0xb1c)]();},Game_Actor[_0x4ca73a(0x90a)][_0x4ca73a(0x1de)]=function(){const _0x1e1355=_0x4ca73a;if(this[_0x1e1355(0xb16)]()[_0x1e1355(0xaa8)][_0x1e1355(0x2b2)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x1e1355(0xaa8)][_0x1e1355(0x2b2)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x4ca73a(0x90a)]['getBattlePortraitOffsetY']=function(){const _0x34f564=_0x4ca73a;if(this[_0x34f564(0xb16)]()[_0x34f564(0xaa8)][_0x34f564(0x2b2)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x34f564(0x4d3)!==_0x34f564(0x7e9))return Number(RegExp['$1']);else{function _0x5cb92e(){const _0x1e995c=_0x34f564;return _0x83fac0['BattleCore'][_0x1e995c(0x388)][_0x1e995c(0x37c)](this,_0xfb556c);}}}else{if(this['actor']()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x4ca73a(0x90a)]['drawItemImagePortraitStyle']=function(_0x478bb2){const _0x513467=_0x4ca73a,_0xe41349=this[_0x513467(0xb16)](_0x478bb2);if(this[_0x513467(0x25c)](_0xe41349)){if(_0x513467(0x9aa)!==_0x513467(0x21b)){const _0x5c8083=_0x513467(0xa3f)['format'](_0xe41349[_0x513467(0x9a8)]()),_0x3e56e9=this[_0x513467(0x47f)](_0x5c8083,Sprite),_0x57bec0=_0xe41349['getBattlePortraitFilename']();if(_0x57bec0!==''){if(_0x513467(0x8ff)===_0x513467(0x8ff))_0x3e56e9[_0x513467(0xa74)]=ImageManager['loadPicture'](_0x57bec0);else{function _0x3198b3(){const _0x1820ff=_0x513467;this[_0x1820ff(0xb36)][_0x1820ff(0x298)]=_0x38c987[_0x1820ff(0x513)](),this[_0x1820ff(0xb36)][_0x1820ff(0x62f)]=_0x2533e5[_0x1820ff(0xa36)]();}}}else _0x3e56e9[_0x513467(0xa74)]=ImageManager[_0x513467(0x334)];const _0x415eb6=this[_0x513467(0x902)](_0x478bb2);_0x3e56e9[_0x513467(0x342)]['x']=0.5,_0x3e56e9['anchor']['y']=0x1;let _0x4a84e0=Math['round'](_0x415eb6['x']+_0x415eb6[_0x513467(0x781)]/0x2)+this[_0x513467(0x949)];_0x4a84e0+=_0xe41349[_0x513467(0x1de)]();let _0x10088a=Math[_0x513467(0x555)](this['height']);_0x10088a+=_0xe41349[_0x513467(0xa2e)](),_0x3e56e9[_0x513467(0xb51)](_0x4a84e0,_0x10088a);const _0x512aab=VisuMZ[_0x513467(0x499)][_0x513467(0x800)][_0x513467(0x1f0)][_0x513467(0x4ed)];_0x3e56e9[_0x513467(0xaed)]['x']=_0x512aab,_0x3e56e9[_0x513467(0xaed)]['y']=_0x512aab,_0x3e56e9[_0x513467(0xa54)]();}else{function _0x2c11c9(){const _0x372270=_0x513467;_0xee9ae7[_0x372270(0xa69)]()[_0x372270(0x7ab)]>0x0&&!_0x330d45[_0x372270(0xa69)]()['drain']&&this[_0x372270(0x1ee)](_0x372270(0x662),_0x54a510),_0x4f55f7[_0x372270(0xa69)]()[_0x372270(0x7ab)]<0x0&&this['push'](_0x372270(0x4a0),_0x563ad9),_0x49b870['BattleCore'][_0x372270(0x800)][_0x372270(0x1b1)][_0x372270(0x7a9)]&&this[_0x372270(0x1ee)]('addText',this['makeHpDamageText'](_0x34b1a8));}}}else{const _0x798df8=this['faceRect'](_0x478bb2);this['drawActorFace'](_0xe41349,_0x798df8['x'],_0x798df8['y'],_0x798df8[_0x513467(0x781)],_0x798df8['height']);}},Window_BattleStatus['prototype'][_0x4ca73a(0x47f)]=function(_0x5c3ae6,_0x1f9362){const _0x533489=_0x4ca73a,_0x6b3d5b=this['_additionalSprites'];if(_0x6b3d5b[_0x5c3ae6])return _0x6b3d5b[_0x5c3ae6];else{const _0x22b283=new _0x1f9362();return _0x6b3d5b[_0x5c3ae6]=_0x22b283,this[_0x533489(0x5ac)](_0x22b283),this['addChildToBack'](this['_cursorArea']),_0x22b283;}},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x5a2)]=function(){const _0x3deffc=_0x4ca73a;this[_0x3deffc(0x702)](),this[_0x3deffc(0x4d9)](),Window_StatusBase[_0x3deffc(0x90a)]['_createClientArea'][_0x3deffc(0x37c)](this),this[_0x3deffc(0x558)]();},Window_BattleStatus['prototype'][_0x4ca73a(0x702)]=function(){const _0x49b0c4=_0x4ca73a;this['_cursorArea']=new Sprite(),this[_0x49b0c4(0x74d)]['filters']=[new PIXI[(_0x49b0c4(0x782))][(_0x49b0c4(0x6f1))]()],this['_cursorArea'][_0x49b0c4(0xb41)]=new Rectangle(),this['_cursorArea'][_0x49b0c4(0xb51)](this[_0x49b0c4(0x88a)],this['_padding']),this[_0x49b0c4(0x3b4)](this[_0x49b0c4(0x74d)]);},Window_BattleStatus['prototype'][_0x4ca73a(0x4d9)]=function(){const _0x5df40d=_0x4ca73a;this[_0x5df40d(0x823)]=new Sprite(),this['addChild'](this['_effectsContainer']);},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x558)]=function(){const _0x47595e=_0x4ca73a;this[_0x47595e(0x40b)]=new Sprite(),this[_0x47595e(0x3b4)](this[_0x47595e(0x40b)]);},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x5ea)]=function(){const _0x39cda8=_0x4ca73a;this[_0x39cda8(0xa0e)]=new Sprite();for(let _0x2854f8=0x0;_0x2854f8<0x9;_0x2854f8++){this[_0x39cda8(0xa0e)][_0x39cda8(0x3b4)](new Sprite());}this[_0x39cda8(0x74d)][_0x39cda8(0x3b4)](this[_0x39cda8(0xa0e)]);},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x3ea)]=function(){const _0x2ddcdf=_0x4ca73a;Window_StatusBase[_0x2ddcdf(0x90a)][_0x2ddcdf(0x3ea)][_0x2ddcdf(0x37c)](this),this['_updateCursorArea']();},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0xa52)]=function(){const _0x3580ee=_0x4ca73a,_0x31cb1c=this[_0x3580ee(0x88a)];this[_0x3580ee(0x74d)]['move'](_0x31cb1c,_0x31cb1c),this[_0x3580ee(0x74d)]['x']=_0x31cb1c-this[_0x3580ee(0x2fe)]['x'],this['_cursorArea']['y']=_0x31cb1c-this[_0x3580ee(0x2fe)]['y'];if(this[_0x3580ee(0x87b)]>0x0&&this[_0x3580ee(0x2c1)]>0x0){if('YmovD'!==_0x3580ee(0x7be)){function _0x3b1ae5(){const _0x1d68d7=_0x3580ee;_0x32e373[_0x1d68d7(0x302)](_0x2dfa03);}}else this[_0x3580ee(0x74d)]['visible']=this[_0x3580ee(0x493)]();}else{if(_0x3580ee(0x634)!=='iqQKw')this['_cursorArea'][_0x3580ee(0x4b2)]=![];else{function _0x20e6c7(){const _0x2d503f=_0x3580ee;return this[_0x2d503f(0x911)][_0x2d503f(0x71b)]();}}}},Window_BattleStatus[_0x4ca73a(0x90a)]['_updateFilterArea']=function(){const _0x2eef21=_0x4ca73a;Window_StatusBase[_0x2eef21(0x90a)]['_updateFilterArea'][_0x2eef21(0x37c)](this),this[_0x2eef21(0x448)]();},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x448)]=function(){const _0x22c1e8=_0x4ca73a,_0x57e979=this[_0x22c1e8(0x74d)][_0x22c1e8(0x73d)][_0x22c1e8(0x798)](new Point(0x0,0x0)),_0x56fbf5=this['_cursorArea']['filterArea'];_0x56fbf5['x']=_0x57e979['x']+this[_0x22c1e8(0x2fe)]['x'],_0x56fbf5['y']=_0x57e979['y']+this[_0x22c1e8(0x2fe)]['y'],_0x56fbf5[_0x22c1e8(0x781)]=this[_0x22c1e8(0x87b)],_0x56fbf5['height']=this[_0x22c1e8(0x2c1)];},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x7f7)]=function(_0x1a43ae){const _0x21a3c4=_0x4ca73a;if(this[_0x21a3c4(0x912)]()!==_0x21a3c4(0x61f))return;this['drawItemImagePortraitStyle'](_0x1a43ae[_0x21a3c4(0x43f)]());},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x837)]=function(_0x19e902,_0x3802f8){const _0x1bec20=_0x4ca73a;if(!this[_0x1bec20(0x40b)])return;if(!_0x19e902)return;if(!_0x3802f8)return;const _0x789f7d=this[_0x1bec20(0x902)](_0x3802f8[_0x1bec20(0x43f)]());_0x789f7d['x']+=_0x789f7d['width']/0x2+this['padding'],_0x19e902['x']=_0x789f7d['x'],_0x19e902['y']=_0x789f7d['y'],this[_0x1bec20(0x40b)]['addChild'](_0x19e902);},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x810)]=function(_0x1db997){const _0x1087d1=_0x4ca73a;if(!this[_0x1087d1(0x40b)])return;if(!_0x1db997)return;this['_damageContainer'][_0x1087d1(0xabd)](_0x1db997);},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x2c9)]=function(){const _0x283c81=_0x4ca73a;if(!this['isBorderStylePortraitShown']())return;if(!this[_0x283c81(0x348)])this[_0x283c81(0x21a)]();this['prepareBorderActor'](),this[_0x283c81(0x1c5)]();},Window_BattleStatus[_0x4ca73a(0x90a)]['isBorderStylePortraitShown']=function(){const _0xaa146b=_0x4ca73a;if(this[_0xaa146b(0x1a5)]!==Window_BattleStatus)return![];if(!SceneManager[_0xaa146b(0xb22)]())return![];return VisuMZ[_0xaa146b(0x499)]['Settings'][_0xaa146b(0x1f0)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x21a)]=function(){const _0x3b1231=_0x4ca73a;this[_0x3b1231(0x348)]=new Sprite();const _0x19e7a2=SceneManager[_0x3b1231(0x612)],_0x33083f=_0x19e7a2['children']['indexOf'](_0x19e7a2[_0x3b1231(0x85d)]);_0x19e7a2['addChildAt'](this[_0x3b1231(0x348)],_0x33083f),this[_0x3b1231(0x348)][_0x3b1231(0x342)]['x']=0.5,this[_0x3b1231(0x348)][_0x3b1231(0x342)]['y']=0x1;const _0x18a9d4=VisuMZ['BattleCore'][_0x3b1231(0x800)]['BattleLayout']['PortraitScaleBorderStyle'];this[_0x3b1231(0x348)]['scale']['x']=_0x18a9d4,this[_0x3b1231(0x348)][_0x3b1231(0xaed)]['y']=_0x18a9d4,this[_0x3b1231(0x348)]['y']=this['y']+this[_0x3b1231(0x38c)],this[_0x3b1231(0x2bc)]=0x0;},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x5d7)]=function(){const _0x1b8a35=_0x4ca73a;this[_0x1b8a35(0x348)][_0x1b8a35(0x4b2)]=BattleManager[_0x1b8a35(0x484)]();const _0x4a69e4=BattleManager[_0x1b8a35(0xb16)]();if(_0x4a69e4===this['_borderPortraitSprite'][_0x1b8a35(0xb16)])return;this[_0x1b8a35(0x348)][_0x1b8a35(0xb16)]=_0x4a69e4||this[_0x1b8a35(0x348)][_0x1b8a35(0xb16)];if(!_0x4a69e4)return;else{if(_0x4a69e4[_0x1b8a35(0x343)]()===''){this['_borderPortraitSprite'][_0x1b8a35(0xa74)]=ImageManager[_0x1b8a35(0x334)];return;}else{const _0x3767ac=ImageManager[_0x1b8a35(0x48f)](_0x4a69e4[_0x1b8a35(0x343)]());_0x3767ac['addLoadListener'](this[_0x1b8a35(0x924)]['bind'](this,_0x3767ac));}}},Window_BattleStatus[_0x4ca73a(0x90a)]['processBorderActor']=function(_0x7da16f){const _0xa25fc1=_0x4ca73a;this[_0xa25fc1(0x2bc)]=0x14,this[_0xa25fc1(0x348)][_0xa25fc1(0xa74)]=_0x7da16f;if(SceneManager[_0xa25fc1(0x612)][_0xa25fc1(0xa51)]()){if(_0xa25fc1(0x6de)!==_0xa25fc1(0x68c))this[_0xa25fc1(0x348)]['x']=0x0,this[_0xa25fc1(0x546)]=Math[_0xa25fc1(0x4f0)](_0x7da16f[_0xa25fc1(0x781)]/0x2);else{function _0x300e80(){const _0x5f115d=_0xa25fc1;_0x48e66e[_0x5f115d(0x499)][_0x5f115d(0x802)]['call'](this,_0x46310d),this[_0x5f115d(0xa95)]()&&_0x1016e6===this[_0x5f115d(0x49b)]()&&this[_0x5f115d(0xb34)]()&&(this['_visualHpGauge_JustDied']=![]),!this['_tempActor']&&!this[_0x5f115d(0x8aa)]&&_0xa4d1d5[_0x5f115d(0xb22)]()&&this[_0x5f115d(0x1b6)]();}}}else this[_0xa25fc1(0x348)]['x']=this[_0xa25fc1(0x781)],this[_0xa25fc1(0x546)]=this[_0xa25fc1(0x781)]*0x3/0x4;this[_0xa25fc1(0x348)][_0xa25fc1(0x3bd)]=0x0,this[_0xa25fc1(0x348)]['y']=this['y']+this[_0xa25fc1(0x38c)];const _0x22c8b0=BattleManager[_0xa25fc1(0xb16)]();_0x22c8b0&&(this[_0xa25fc1(0x546)]+=_0x22c8b0[_0xa25fc1(0x1de)](),this[_0xa25fc1(0x348)]['y']+=_0x22c8b0[_0xa25fc1(0xa2e)]());},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x1c5)]=function(){const _0x34d7da=_0x4ca73a;if(this[_0x34d7da(0x2bc)]>0x0){if('utHlp'!==_0x34d7da(0x31b)){const _0x3995a6=this[_0x34d7da(0x2bc)],_0x2f38df=this[_0x34d7da(0x348)];_0x2f38df['x']=(_0x2f38df['x']*(_0x3995a6-0x1)+this[_0x34d7da(0x546)])/_0x3995a6,_0x2f38df[_0x34d7da(0x3bd)]=(_0x2f38df[_0x34d7da(0x3bd)]*(_0x3995a6-0x1)+0xff)/_0x3995a6,this['_borderPortraitDuration']--;}else{function _0x42211f(){const _0x35f987=_0x34d7da;if(this[_0x35f987(0x838)]<0xff)this[_0x35f987(0x838)]+=0x10;}}}},Window_BattleStatus[_0x4ca73a(0x90a)]['updateEffectContainers']=function(){const _0x43c843=_0x4ca73a;return;if(this[_0x43c843(0x823)]){if(_0x43c843(0x497)===_0x43c843(0x5e6)){function _0x156890(){const _0x3d42bb=_0x43c843,_0x26d922=this['_enemy']['svBattlerData']();this[_0x3d42bb(0xa74)]=new _0x13b09e(_0x26d922[_0x3d42bb(0x781)],_0x26d922[_0x3d42bb(0x38c)]);}}else this[_0x43c843(0x823)]['x']=this['x'],this['_effectsContainer']['y']=this['y'];}this[_0x43c843(0x40b)]&&(this[_0x43c843(0x40b)]['x']=this['x'],this[_0x43c843(0x40b)]['y']=this['y']);},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x221)]=function(){const _0x524142=_0x4ca73a,_0x5caa92=VisuMZ[_0x524142(0x499)][_0x524142(0x800)][_0x524142(0x1f0)];if(_0x5caa92[_0x524142(0x56b)]){if(_0x524142(0x54c)===_0x524142(0x335)){function _0x1f53cf(){const _0x559161=_0x524142;this[_0x559161(0x1ee)](_0x559161(0x22c),_0x2ec2c1);}}else{const _0x4ab775=new Sprite();_0x4ab775['bitmap']=ImageManager[_0x524142(0x4c4)](_0x5caa92[_0x524142(0x56b)]),_0x4ab775['x']=_0x5caa92['StatusWindowAttachmentBackOffsetX']||0x0,_0x4ab775['y']=_0x5caa92[_0x524142(0x659)]||0x0,this[_0x524142(0x5ac)](_0x4ab775),this[_0x524142(0x23c)]=_0x4ab775;}}if(_0x5caa92['StatusWindowAttachmentFront']){if(_0x524142(0x971)!==_0x524142(0x7ac)){const _0x5cb9c1=new Sprite();_0x5cb9c1[_0x524142(0xa74)]=ImageManager[_0x524142(0x4c4)](_0x5caa92[_0x524142(0x7aa)]),_0x5cb9c1['x']=_0x5caa92[_0x524142(0x38d)]||0x0,_0x5cb9c1['y']=_0x5caa92['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x524142(0x3b4)](_0x5cb9c1),this[_0x524142(0x3be)]=_0x5cb9c1;}else{function _0x373fe2(){const _0x94323b=_0x524142;this[_0x94323b(0x977)]=_0x1bb943[_0x94323b(0x8b8)];}}}},Window_BattleStatus[_0x4ca73a(0x90a)][_0x4ca73a(0x8b9)]=function(){const _0x392b34=_0x4ca73a;if(this[_0x392b34(0x3be)]){if('mprPp'!==_0x392b34(0x7a6))this[_0x392b34(0x3b4)](this[_0x392b34(0x3be)]);else{function _0x2fec68(){const _0x1c8231=_0x392b34;this[_0x1c8231(0x316)]();}}}},Window_BattleActor['prototype'][_0x4ca73a(0xb3a)]=function(){const _0x2f0487=_0x4ca73a;return Window_BattleStatus[_0x2f0487(0x90a)][_0x2f0487(0xb3a)][_0x2f0487(0x37c)](this)&&this[_0x2f0487(0x82c)]();},Window_BattleActor[_0x4ca73a(0x90a)][_0x4ca73a(0x82c)]=function(){const _0x208aa8=_0x4ca73a,_0x428304=BattleManager[_0x208aa8(0x792)](),_0x302543=this[_0x208aa8(0xb16)](this[_0x208aa8(0x43f)]());if(!_0x428304)return!![];if(!_0x428304[_0x208aa8(0xa07)]())return!![];const _0x5679a8=_0x428304[_0x208aa8(0xa07)]()[_0x208aa8(0xaa8)];if(_0x5679a8['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if('cxaUw'!=='hRuwK'){if(_0x302543===BattleManager[_0x208aa8(0xb16)]())return![];}else{function _0x243039(){const _0x5de016=_0x208aa8;this[_0x5de016(0x2fd)](_0x5de016(0xac0)),_0x1dab3b[_0x5de016(0x499)]['BattleManager_processDefeat'][_0x5de016(0x37c)](this),this['processPostBattleCommonEvents'](_0x5de016(0x793));}}}return!![];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x5c1)]=Window_BattleEnemy[_0x4ca73a(0x90a)]['initialize'],Window_BattleEnemy[_0x4ca73a(0x90a)]['initialize']=function(_0x45a7e4){this['_lastEnemy']=null,VisuMZ['BattleCore']['Window_BattleEnemy_initialize']['call'](this,_0x45a7e4);},Window_BattleEnemy['prototype'][_0x4ca73a(0x681)]=function(){return this['maxItems']();},VisuMZ['BattleCore'][_0x4ca73a(0x490)]=Window_BattleEnemy[_0x4ca73a(0x90a)]['show'],Window_BattleEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0xa54)]=function(){const _0x1132c2=_0x4ca73a;VisuMZ[_0x1132c2(0x499)][_0x1132c2(0x490)][_0x1132c2(0x37c)](this),this['y']=Graphics[_0x1132c2(0x38c)]*0xa;},Window_BattleEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x4cd)]=function(){const _0x55d0ce=_0x4ca73a;return $gameTroop[_0x55d0ce(0x1d4)]()[_0x55d0ce(0x7ef)](0x0);},Window_BattleEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x705)]=function(){const _0x25861a=_0x4ca73a;this['_enemies']=this[_0x25861a(0x4cd)](),this[_0x25861a(0x25e)](),Window_Selectable['prototype'][_0x25861a(0x705)][_0x25861a(0x37c)](this);},Window_BattleEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x25e)]=function(){const _0x569567=_0x4ca73a;this['_enemies'][_0x569567(0x574)]((_0x2a6f83,_0x49c07c)=>{const _0x5b208a=_0x569567;if(_0x5b208a(0xa2f)===_0x5b208a(0xa2f))return _0x2a6f83[_0x5b208a(0x4f6)]()[_0x5b208a(0x9e9)]===_0x49c07c['battler']()[_0x5b208a(0x9e9)]?_0x2a6f83[_0x5b208a(0x4f6)]()[_0x5b208a(0xa56)]-_0x49c07c['battler']()[_0x5b208a(0xa56)]:_0x2a6f83['battler']()['_baseX']-_0x49c07c[_0x5b208a(0x4f6)]()[_0x5b208a(0x9e9)];else{function _0x71a31a(){const _0x472c40=_0x5b208a,_0x2dd1fb=this[_0x472c40(0x97a)]();_0x14396a=_0x2dd1fb[_0x783684]?_0x2dd1fb[_0x3bc3f7]['wtypeId']:0x0;}}}),SceneManager[_0x569567(0x6c6)]()&&this[_0x569567(0xb1a)]['reverse']();},Window_BattleEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x4b7)]=function(){const _0x129b7b=_0x4ca73a,_0x1cfea9=VisuMZ[_0x129b7b(0x499)]['Settings']['Enemy'];if(_0x1cfea9[_0x129b7b(0xa6c)])this[_0x129b7b(0x4e2)]();else{if('xfoXU'!==_0x129b7b(0x2a3)){function _0x5b2180(){const _0x11b5dd=_0x129b7b,_0x8a0504=this['_shadowSprite']['bitmap'];this[_0x11b5dd(0x654)][_0x11b5dd(0x6c8)](0x0,0x0,_0x8a0504[_0x11b5dd(0x781)],_0x8a0504['height']);}}else this[_0x129b7b(0x3ff)]();}},Window_BattleEnemy[_0x4ca73a(0x90a)]['autoSelectLastSelected']=function(){const _0xc0a3e9=_0x4ca73a;if(this[_0xc0a3e9(0x8df)]&&this[_0xc0a3e9(0xb1a)][_0xc0a3e9(0x93d)](this['_lastEnemy'])){if('ecmZC'!=='ecmZC'){function _0x56c570(){const _0x586bcf=_0xc0a3e9;return _0x2a9cd5[_0x586bcf(0x499)][_0x586bcf(0x800)]['Actor'][_0x586bcf(0x858)]||![];}}else{const _0x4db4f6=this['_enemies']['indexOf'](this['_lastEnemy']);this['forceSelect'](_0x4db4f6);}}else{if(_0xc0a3e9(0xace)!==_0xc0a3e9(0x67d))this[_0xc0a3e9(0x3ff)]();else{function _0x4b3b1f(){const _0x1ef51=_0xc0a3e9;_0x26f37b=_0x2cb3de['swapEnemyIDs'](_0x1ab81a),_0x4f98b5[_0x1ef51(0x499)][_0x1ef51(0xb84)][_0x1ef51(0x37c)](this,_0x2050ac,_0x4c8289,_0x40bf18),_0x3f609d['VisuMZ_1_ElementStatusCore']&&this['initElementStatusCore'](),this[_0x1ef51(0xaa5)](),this['setupBattleCoreData'](),_0x143827[_0x1ef51(0x3d6)]&&this['recoverAll']();}}}},Window_BattleEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x3ff)]=function(){const _0x18f463=_0x4ca73a,_0x20e194=VisuMZ['BattleCore']['Settings'][_0x18f463(0xa94)];let _0x144d19=![];$gameSystem['isSideView']()?_0x144d19=_0x20e194['SideviewSelect']:_0x144d19=_0x20e194['FrontViewSelect'],this[_0x18f463(0x8bd)](_0x144d19?this[_0x18f463(0x9f1)]()-0x1:0x0);},Window_BattleEnemy[_0x4ca73a(0x90a)][_0x4ca73a(0x2f5)]=function(){const _0x50338a=_0x4ca73a;Window_Selectable['prototype'][_0x50338a(0x2f5)][_0x50338a(0x37c)](this),this[_0x50338a(0x8df)]=this[_0x50338a(0xa68)]();},Window_BattleItem['prototype'][_0x4ca73a(0x93d)]=function(_0x5adde4){const _0x2f3f40=_0x4ca73a;if(!_0x5adde4)return![];return _0x5adde4['occasion']===0x0||_0x5adde4[_0x2f3f40(0xb45)]===0x1;};function Window_AutoBattleCancel(){const _0x1945ec=_0x4ca73a;this[_0x1945ec(0xa47)](...arguments);}Window_AutoBattleCancel[_0x4ca73a(0x90a)]=Object[_0x4ca73a(0x438)](Window_Base['prototype']),Window_AutoBattleCancel[_0x4ca73a(0x90a)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x4ca73a(0x90a)]['initialize']=function(_0x531c50){const _0x25f7d0=_0x4ca73a;Window_Base[_0x25f7d0(0x90a)][_0x25f7d0(0xa47)]['call'](this,_0x531c50),this[_0x25f7d0(0x7f8)](this['bgType']()),this[_0x25f7d0(0x705)]();},Window_AutoBattleCancel['prototype'][_0x4ca73a(0x194)]=function(){const _0x25c9dd=_0x4ca73a;return VisuMZ[_0x25c9dd(0x499)][_0x25c9dd(0x800)][_0x25c9dd(0x4f8)][_0x25c9dd(0x4c7)];},Window_AutoBattleCancel[_0x4ca73a(0x90a)][_0x4ca73a(0x705)]=function(){const _0x23e381=_0x4ca73a;this['contents'][_0x23e381(0x1c1)]();const _0x15db47=VisuMZ[_0x23e381(0x499)][_0x23e381(0x800)]['AutoBattle'][_0x23e381(0x2cb)],_0x458df3=_0x15db47[_0x23e381(0x26f)](this[_0x23e381(0x74f)](),this[_0x23e381(0x907)]()),_0x27ee53=this[_0x23e381(0x197)](_0x458df3)[_0x23e381(0x781)],_0x253d48=Math[_0x23e381(0x3d7)]((this[_0x23e381(0x87b)]-_0x27ee53)/0x2);this[_0x23e381(0x877)](_0x458df3,_0x253d48,0x0,_0x27ee53);},Window_AutoBattleCancel[_0x4ca73a(0x90a)][_0x4ca73a(0x74f)]=function(){const _0x5bfc91=_0x4ca73a;if(Imported[_0x5bfc91(0x5d1)]){if(_0x5bfc91(0x7b5)==='oYwrp')return TextManager[_0x5bfc91(0xa59)]('ok');else{function _0x532161(){const _0xefa1f7=_0x5bfc91,_0x18024f=_0x243f81['x']+_0x283842['floor']((_0x2699d7['width']-_0x4c80d8)/0x2);this[_0xefa1f7(0x877)](_0x329741,_0x18024f,_0x499db0['y'],_0x24cc87);}}}else return VisuMZ[_0x5bfc91(0x499)][_0x5bfc91(0x800)][_0x5bfc91(0x4f8)][_0x5bfc91(0x8b1)];},Window_AutoBattleCancel['prototype']['cancelButtonText']=function(){const _0x348842=_0x4ca73a;return Imported[_0x348842(0x5d1)]?TextManager[_0x348842(0xa59)](_0x348842(0x945)):VisuMZ[_0x348842(0x499)][_0x348842(0x800)]['AutoBattle'][_0x348842(0x48a)];},Window_AutoBattleCancel[_0x4ca73a(0x90a)][_0x4ca73a(0x46b)]=function(){const _0x433d06=_0x4ca73a;Window_Base[_0x433d06(0x90a)][_0x433d06(0x46b)][_0x433d06(0x37c)](this),this['updateVisibility'](),this['updateCancel']();},Window_AutoBattleCancel[_0x4ca73a(0x90a)][_0x4ca73a(0xa65)]=function(){const _0x2ac2f7=_0x4ca73a;this[_0x2ac2f7(0x4b2)]=BattleManager[_0x2ac2f7(0x65d)];},Window_AutoBattleCancel[_0x4ca73a(0x90a)][_0x4ca73a(0x759)]=function(){const _0x2780b5=_0x4ca73a;if(!BattleManager[_0x2780b5(0x65d)])return;(Input[_0x2780b5(0x2ec)]('ok')||Input[_0x2780b5(0x2ec)](_0x2780b5(0x945))||TouchInput[_0x2780b5(0x918)]()||TouchInput[_0x2780b5(0x56d)]())&&(SoundManager['playCancel'](),BattleManager['_autoBattle']=![],Input['clear'](),TouchInput[_0x2780b5(0x1c1)]());};function Window_EnemyName(){const _0x2f1c12=_0x4ca73a;this[_0x2f1c12(0xa47)](...arguments);}Window_EnemyName[_0x4ca73a(0x90a)]=Object[_0x4ca73a(0x438)](Window_StatusBase[_0x4ca73a(0x90a)]),Window_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x1a5)]=Window_EnemyName,Window_EnemyName['prototype'][_0x4ca73a(0xa47)]=function(_0x15f5f1){const _0x2013a6=_0x4ca73a;this['_enemyID']=_0x15f5f1,this[_0x2013a6(0x851)]='';const _0x464f78=new Rectangle(0x0,0x0,Graphics[_0x2013a6(0x83e)],this[_0x2013a6(0x935)]()*0x4);Window_StatusBase[_0x2013a6(0x90a)][_0x2013a6(0xa47)][_0x2013a6(0x37c)](this,_0x464f78),this[_0x2013a6(0x7f8)](0x2),this[_0x2013a6(0x838)]=0x0;},Window_EnemyName['prototype'][_0x4ca73a(0xa3e)]=function(){this['padding']=0x0;},Window_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0xa68)]=function(){const _0x4b81aa=_0x4ca73a;return $gameTroop[_0x4b81aa(0x6c7)]()[this['_enemyID']];},Window_EnemyName['prototype'][_0x4ca73a(0x46b)]=function(){const _0x12e843=_0x4ca73a;Window_StatusBase[_0x12e843(0x90a)][_0x12e843(0x46b)]['call'](this);if(this[_0x12e843(0xa68)]()&&this[_0x12e843(0xa68)]()[_0x12e843(0x491)]()!==this[_0x12e843(0x851)]){if(_0x12e843(0x240)===_0x12e843(0x240))this[_0x12e843(0x851)]=this['enemy']()[_0x12e843(0x491)](),this[_0x12e843(0x705)]();else{function _0x28ca17(){const _0x42afdb=_0x12e843;return this['battlerSprites']()[_0x42afdb(0xac3)](_0x5e1340=>_0x5e1340[_0x42afdb(0x9c8)]());}}}this[_0x12e843(0x246)](),this[_0x12e843(0x92c)]();},Window_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x246)]=function(){const _0x36793c=_0x4ca73a;if(!this['enemy']()){if(this[_0x36793c(0x838)]>0x0)this[_0x36793c(0x838)]-=0x10;}else{if(this[_0x36793c(0xa68)]()['isDead']()){if(this[_0x36793c(0x838)]>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager['_scene'][_0x36793c(0x928)]&&SceneManager['_scene'][_0x36793c(0x928)]['active']&&SceneManager[_0x36793c(0x612)][_0x36793c(0x928)][_0x36793c(0xb1a)][_0x36793c(0x93d)](this['enemy']())){if(this[_0x36793c(0x838)]<0xff)this[_0x36793c(0x838)]+=0x10;}else{if(this[_0x36793c(0x838)]>0x0){if(_0x36793c(0x51c)==='icSoF'){function _0x3b176a(){const _0x2e8b4f=_0x36793c;this[_0x2e8b4f(0x44d)]=_0x45aa0e;const _0x3f5ad9=this['name'](),_0x4dd837=this[_0x2e8b4f(0x2f0)](),_0x89ed09=_0x5cd177[_0x2e8b4f(0x90a)][_0x2e8b4f(0x935)]();this[_0x2e8b4f(0xa9f)](),this[_0x2e8b4f(0xa74)]['clear'](),this[_0x2e8b4f(0xa74)][_0x2e8b4f(0x709)](_0x3f5ad9,0x0,0x0,_0x4dd837,_0x89ed09,_0x2e8b4f(0x989));}}else this['contentsOpacity']-=0x10;}}}}},Window_EnemyName[_0x4ca73a(0x90a)]['updatePosition']=function(){const _0x1a3078=_0x4ca73a;if(!this[_0x1a3078(0xa68)]())return;if(SceneManager[_0x1a3078(0x6c6)]())this['x']=Graphics[_0x1a3078(0x83e)]-this[_0x1a3078(0xa68)]()[_0x1a3078(0x4f6)]()['_baseX'];else{if('bpbjk'===_0x1a3078(0x9b4)){function _0x4b9832(){if(!_0x4012e9['isSideView']())return;const _0x11a759=this['battler']();if(!_0x11a759)return;_0x11a759['startFloat'](_0xdbf371,_0x5f2c64,_0x1644e0);}}else this['x']=this[_0x1a3078(0xa68)]()[_0x1a3078(0x4f6)]()[_0x1a3078(0x9e9)];}this['x']-=Math['round'](this[_0x1a3078(0x781)]/0x2),this['y']=this['enemy']()[_0x1a3078(0x4f6)]()[_0x1a3078(0xa56)]-Math[_0x1a3078(0x555)](this[_0x1a3078(0x935)]()*1.5);const _0xc4a036=VisuMZ[_0x1a3078(0x499)][_0x1a3078(0x800)][_0x1a3078(0xa94)];this['x']+=_0xc4a036[_0x1a3078(0x6b8)]||0x0,this['y']+=_0xc4a036['NameOffsetY']||0x0;},Window_EnemyName['prototype'][_0x4ca73a(0x20d)]=function(){const _0x1437aa=_0x4ca73a;Window_Base[_0x1437aa(0x90a)][_0x1437aa(0x20d)][_0x1437aa(0x37c)](this),this['contents']['fontSize']=VisuMZ['BattleCore']['Settings'][_0x1437aa(0xa94)][_0x1437aa(0xb89)];},Window_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x705)]=function(){const _0x51e141=_0x4ca73a;Window_StatusBase['prototype'][_0x51e141(0x705)][_0x51e141(0x37c)](this),this[_0x51e141(0xafb)][_0x51e141(0x1c1)]();if(!this[_0x51e141(0xa68)]())return;this[_0x51e141(0x79b)]();},Window_EnemyName[_0x4ca73a(0x90a)][_0x4ca73a(0x79b)]=function(){const _0xd9ea57=_0x4ca73a;this[_0xd9ea57(0x851)]=this['enemy']()[_0xd9ea57(0x491)]();const _0x3637b7=this[_0xd9ea57(0x197)](this['_text'])[_0xd9ea57(0x781)],_0x2cdf84=Math[_0xd9ea57(0x555)]((this['innerWidth']-_0x3637b7)/0x2);this[_0xd9ea57(0x877)](this[_0xd9ea57(0x851)],_0x2cdf84,0x0,_0x3637b7+0x8);},Window_BattleLog['prototype']['maxLines']=function(){const _0xfb881f=_0x4ca73a;return VisuMZ['BattleCore'][_0xfb881f(0x800)]['BattleLog'][_0xfb881f(0x2bd)];},Window_BattleLog[_0x4ca73a(0x90a)]['messageSpeed']=function(){const _0x716c23=_0x4ca73a;return VisuMZ[_0x716c23(0x499)][_0x716c23(0x800)][_0x716c23(0x1b1)]['MessageWait'];},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0xb7c)]=function(){const _0x29795e=_0x4ca73a;return VisuMZ['BattleCore'][_0x29795e(0x800)][_0x29795e(0x1b1)][_0x29795e(0xa8d)];},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x4ce)]=function(){return![];},Window_BattleLog['prototype'][_0x4ca73a(0x28c)]=function(_0x3f509c,_0x3b7365){const _0x49fbb5=_0x4ca73a;this[_0x49fbb5(0x329)]('actionSplicePoint'),BattleManager[_0x49fbb5(0x586)](_0x3f509c,_0x3b7365),this[_0x49fbb5(0x1eb)]();},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x1bb)]=function(){const _0x19309c=_0x4ca73a;this[_0x19309c(0x1eb)]();},Window_BattleLog[_0x4ca73a(0x90a)]['push']=function(_0xe509d7){const _0x4d7666=_0x4ca73a,_0x15cd50=Array[_0x4d7666(0x90a)][_0x4d7666(0x7ef)][_0x4d7666(0x37c)](arguments,0x1),_0x2b0c82={'name':_0xe509d7,'params':_0x15cd50},_0x16e012=this[_0x4d7666(0x352)][_0x4d7666(0x8f9)](_0x53794e=>_0x53794e['name'])['indexOf'](_0x4d7666(0x1bb));_0x16e012>=0x0?this[_0x4d7666(0x352)]['splice'](_0x16e012,0x0,_0x2b0c82):this[_0x4d7666(0x352)][_0x4d7666(0x1ee)](_0x2b0c82);},Window_BattleLog[_0x4ca73a(0x90a)]['unshift']=function(_0x4a9080){const _0x155c85=_0x4ca73a,_0x445baf=Array[_0x155c85(0x90a)][_0x155c85(0x7ef)][_0x155c85(0x37c)](arguments,0x1);this['_methods'][_0x155c85(0x329)]({'name':_0x4a9080,'params':_0x445baf});},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x644)]=function(){const _0x1f79a9=_0x4ca73a;if(!$gameTemp[_0x1f79a9(0x69d)]())return;console[_0x1f79a9(0x519)](this[_0x1f79a9(0x352)][_0x1f79a9(0x8f9)](_0x1f9e73=>_0x1f9e73[_0x1f79a9(0x491)])[_0x1f79a9(0x7fb)]('\x0a'));},VisuMZ[_0x4ca73a(0x499)]['Window_BattleLog_refresh']=Window_BattleLog[_0x4ca73a(0x90a)]['refresh'],Window_BattleLog['prototype']['refresh']=function(){const _0x474dda=_0x4ca73a;this[_0x474dda(0x4d4)]=!![];},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x771)]=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x46b)],Window_BattleLog[_0x4ca73a(0x90a)]['update']=function(){const _0x4b8ca8=_0x4ca73a;VisuMZ[_0x4b8ca8(0x499)][_0x4b8ca8(0x771)][_0x4b8ca8(0x37c)](this);if(this[_0x4b8ca8(0x4d4)])this[_0x4b8ca8(0x7c4)]();},Window_BattleLog['prototype'][_0x4ca73a(0x7c4)]=function(){const _0x92d315=_0x4ca73a;this[_0x92d315(0x4d4)]=![],VisuMZ[_0x92d315(0x499)][_0x92d315(0x9c2)][_0x92d315(0x37c)](this);},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x755)]=function(_0x3227b9){const _0x21fe0c=_0x4ca73a;let _0x1b2825=VisuMZ[_0x21fe0c(0x499)][_0x21fe0c(0x800)][_0x21fe0c(0x1b1)]['TextAlign'][_0x21fe0c(0x3c1)]()[_0x21fe0c(0x7d2)](),_0x547267=this[_0x21fe0c(0x6cc)][_0x3227b9];if(_0x547267['match'](/<LEFT>/i)){if(_0x21fe0c(0xa44)!==_0x21fe0c(0x5f2))_0x1b2825='left';else{function _0xfaca84(){const _0xb6e69f=_0x21fe0c;this[_0xb6e69f(0x877)](_0xd98700,_0x2635eb['x'],_0x32d3e6['y'],_0x5aeea9);}}}else{if(_0x547267[_0x21fe0c(0x2b2)](/<CENTER>/i))_0x1b2825=_0x21fe0c(0x989);else _0x547267[_0x21fe0c(0x2b2)](/<RIGHT>/i)&&(_0x1b2825=_0x21fe0c(0xa96));}_0x547267=_0x547267[_0x21fe0c(0x301)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x547267=_0x547267[_0x21fe0c(0x301)](/\\I\[0\]/gi,'');const _0x3bce93=this[_0x21fe0c(0x682)](_0x3227b9);this['contents'][_0x21fe0c(0x214)](_0x3bce93['x'],_0x3bce93['y'],_0x3bce93[_0x21fe0c(0x781)],_0x3bce93[_0x21fe0c(0x38c)]);const _0x339170=this['textSizeEx'](_0x547267)['width'];let _0x2b5214=_0x3bce93['x'];if(_0x1b2825===_0x21fe0c(0x989))_0x2b5214+=(_0x3bce93[_0x21fe0c(0x781)]-_0x339170)/0x2;else _0x1b2825===_0x21fe0c(0xa96)&&(_0x2b5214+=_0x3bce93[_0x21fe0c(0x781)]-_0x339170);this[_0x21fe0c(0x877)](_0x547267,_0x2b5214,_0x3bce93['y'],_0x339170+0x8);},Window_BattleLog[_0x4ca73a(0x90a)]['addText']=function(_0x53a260){const _0x158107=_0x4ca73a;this[_0x158107(0x6cc)]['push'](_0x53a260),this[_0x158107(0x705)](),this['callNextMethod']();},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x7d8)]=function(){const _0x1b3734=_0x4ca73a;let _0x4e9d79=![];switch(this[_0x1b3734(0x7e6)]){case _0x1b3734(0xb3d):_0x4e9d79=this['_spriteset'][_0x1b3734(0x292)]();break;case'movement':_0x4e9d79=this['_spriteset'][_0x1b3734(0x951)]();break;case'animation':_0x4e9d79=this[_0x1b3734(0xa38)][_0x1b3734(0x57e)]();break;case _0x1b3734(0x63a):_0x4e9d79=this[_0x1b3734(0xa38)][_0x1b3734(0x456)]();break;case'jump':_0x4e9d79=this[_0x1b3734(0xa38)][_0x1b3734(0xb6b)]();break;case _0x1b3734(0x3bd):_0x4e9d79=this[_0x1b3734(0xa38)][_0x1b3734(0x4fb)]();break;}if(!_0x4e9d79){if(_0x1b3734(0x206)==='aKmVd')this[_0x1b3734(0x7e6)]='';else{function _0x289231(){const _0x356b5f=_0x1b3734;_0x32c07c[_0x356b5f(0x491)]=_0x5949b1(_0x45a4f2['$1']);}}}return _0x4e9d79;},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0xb75)]=function(){const _0x504b4=_0x4ca73a;this[_0x504b4(0x728)](_0x504b4(0x617));},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x213)]=function(){const _0x9c8308=_0x4ca73a;this[_0x9c8308(0x728)](_0x9c8308(0x63a));},Window_BattleLog[_0x4ca73a(0x90a)]['waitForJump']=function(){const _0x6ef622=_0x4ca73a;this[_0x6ef622(0x728)](_0x6ef622(0xa58));},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x8ad)]=function(){this['setWaitMode']('opacity');},Window_BattleLog['prototype'][_0x4ca73a(0x353)]=function(){const _0x36e3f7=_0x4ca73a,_0x52cf60=VisuMZ['BattleCore'][_0x36e3f7(0x800)]['BattleLog'];if(!_0x52cf60['StartTurnShow'])return;this[_0x36e3f7(0x1ee)](_0x36e3f7(0x807),_0x52cf60[_0x36e3f7(0x613)][_0x36e3f7(0x26f)]($gameTroop[_0x36e3f7(0x4ee)]())),this[_0x36e3f7(0x1ee)](_0x36e3f7(0x720),_0x52cf60[_0x36e3f7(0x637)]),this[_0x36e3f7(0x1ee)](_0x36e3f7(0x1c1));},Window_BattleLog[_0x4ca73a(0x90a)]['startAction']=function(_0x2483d0,_0x7dca58,_0x208bba){const _0x583019=_0x4ca73a;this[_0x583019(0xaf7)](_0x7dca58)?BattleManager[_0x583019(0x2de)]():this[_0x583019(0xa22)](_0x2483d0,_0x7dca58,_0x208bba);},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0xaf7)]=function(_0x3814ac){const _0x2d7145=_0x4ca73a;if(!SceneManager[_0x2d7145(0xb22)]())return![];if(!_0x3814ac)return![];if(!_0x3814ac[_0x2d7145(0xa07)]())return![];if(_0x3814ac['item']()[_0x2d7145(0xaa8)][_0x2d7145(0x2b2)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x2d7145(0xae7)](_0x3814ac['item']()))return!![];return![];},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0xa22)]=function(_0xbc0cbb,_0xcc65d7,_0x36ceb6){const _0x234e42=_0x4ca73a,_0x4e1551=_0xcc65d7[_0x234e42(0xa07)]();this['setupActionSet'](_0xbc0cbb,_0xcc65d7,_0x36ceb6),this[_0x234e42(0x616)](_0xbc0cbb,_0xcc65d7,_0x36ceb6),this[_0x234e42(0x1bf)](_0xbc0cbb,_0xcc65d7,_0x36ceb6);},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x86f)]=function(_0x43fe7c,_0x3b8424){const _0x493e90=_0x4ca73a,_0x3c1ec0=VisuMZ[_0x493e90(0x499)]['Settings'][_0x493e90(0x1b1)];_0x3c1ec0[_0x493e90(0x77a)]&&this['push'](_0x493e90(0x807),'<CENTER>%1'['format'](DataManager['battleDisplayText'](_0x3b8424)));if(DataManager[_0x493e90(0x5b9)](_0x3b8424)){if(_0x3c1ec0[_0x493e90(0x9b5)])this[_0x493e90(0x2b1)](_0x3b8424[_0x493e90(0xb35)],_0x43fe7c,_0x3b8424);if(_0x3c1ec0[_0x493e90(0x592)])this[_0x493e90(0x2b1)](_0x3b8424[_0x493e90(0x952)],_0x43fe7c,_0x3b8424);}else{if(_0x493e90(0x2d4)==='jQuhQ'){function _0x24a19c(){const _0x4fdff4=_0x493e90,_0x563091=_0x13af07[_0x4fdff4(0x499)][_0x4fdff4(0x800)][_0x4fdff4(0x1a9)];if(_0x563091[_0x4fdff4(0x1a8)]>0x0&&_0x2a8621[_0x563091[_0x4fdff4(0x1a8)]]){const _0xf967c5=_0x56e400[_0x563091[_0x4fdff4(0x1a8)]],_0xf5dadc=_0xf967c5[_0x4fdff4(0x3c0)][_0x4fdff4(0x73b)]-0x2,_0x110514=_0xf967c5[_0x4fdff4(0x3c0)][_0xf5dadc];if(_0x110514[_0x4fdff4(0x48d)]!==0xe6){const _0x4f8b26={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3accec=_0xf967c5['list']['pop']();_0xf967c5[_0x4fdff4(0x3c0)][_0x4fdff4(0x329)](_0x4f8b26),_0xf967c5[_0x4fdff4(0x3c0)][_0x4fdff4(0x329)](_0x3accec);}}}}else{if(_0x3c1ec0['ActionItemMsg'])this[_0x493e90(0x2b1)](TextManager[_0x493e90(0xb49)],_0x43fe7c,_0x3b8424);}}},Window_BattleLog['prototype'][_0x4ca73a(0x9a2)]=function(_0x34954d,_0x2b4d2e,_0x3116c6){const _0x5eb4d3=_0x4ca73a,_0x28a2d1=_0x2b4d2e[_0x5eb4d3(0xa07)]();this[_0x5eb4d3(0x86f)](_0x34954d,_0x28a2d1),this[_0x5eb4d3(0x1ee)]('applyImmortal',_0x34954d,_0x3116c6,!![]),this[_0x5eb4d3(0x1ee)](_0x5eb4d3(0x938),_0x34954d,_0x2b4d2e),this['push']('waitForMovement'),this[_0x5eb4d3(0x1ee)](_0x5eb4d3(0x3c8),_0x34954d,_0x2b4d2e),this[_0x5eb4d3(0x1ee)](_0x5eb4d3(0xb75));},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x616)]=function(_0x392920,_0x3b499c,_0x23e806){const _0x29bdd0=_0x4ca73a;if(this[_0x29bdd0(0xab5)](_0x3b499c)){if(_0x29bdd0(0xa93)!==_0x29bdd0(0xa93)){function _0x398b06(){const _0x1740cb=_0x29bdd0;this[_0x1740cb(0x1ee)]('performRecovery',_0x284e65);}}else this[_0x29bdd0(0xb08)](_0x392920,_0x3b499c,_0x23e806);}else{if(this['isMeleeMultiTargetAction'](_0x3b499c))this[_0x29bdd0(0x78d)](_0x392920,_0x3b499c,_0x23e806);else{if(_0x3b499c[_0x29bdd0(0x3e4)]()){if(_0x29bdd0(0x7a8)!==_0x29bdd0(0x2a7))this[_0x29bdd0(0x7a7)](_0x392920,_0x3b499c,_0x23e806);else{function _0xd8f90e(){this['opacity']+=0x10;}}}else this[_0x29bdd0(0x522)](_0x392920,_0x3b499c,_0x23e806);}}},Window_BattleLog[_0x4ca73a(0x90a)]['isMeleeSingleTargetAction']=function(_0x522616){const _0x24e129=_0x4ca73a;if(!_0x522616[_0x24e129(0x6f6)]())return![];if(!_0x522616[_0x24e129(0x3ae)]())return![];if(!_0x522616[_0x24e129(0x4b8)]())return![];return VisuMZ[_0x24e129(0x499)]['Settings'][_0x24e129(0xb23)][_0x24e129(0x296)];},Window_BattleLog[_0x4ca73a(0x90a)]['autoMeleeSingleTargetActionSet']=function(_0x5143ae,_0xeee475,_0x25d462){const _0xb8ea97=_0x4ca73a,_0x5818f5=_0x5143ae['getAttackMotion']()[_0xb8ea97(0x298)]<0x2,_0x3259d2=0x14,_0x199401=0x30;_0x5818f5&&(this[_0xb8ea97(0x1ee)](_0xb8ea97(0x6a8),[_0x5143ae],_0x199401,_0x3259d2),this[_0xb8ea97(0x1ee)]('performMoveToTargets',_0x5143ae,_0x25d462,'front\x20base',_0x3259d2,!![],'Linear',!![]),this[_0xb8ea97(0x1ee)](_0xb8ea97(0x3b7),[_0x5143ae],_0xb8ea97(0xb79)),this[_0xb8ea97(0x1ee)](_0xb8ea97(0x530)));let _0x4d3b44=_0xeee475[_0xb8ea97(0x53c)]()?this[_0xb8ea97(0x8dd)](_0x5143ae):0x1;for(let _0x26c646=0x0;_0x26c646<_0x4d3b44;_0x26c646++){_0xeee475[_0xb8ea97(0x53c)]()&&_0x5143ae['isActor']()&&this[_0xb8ea97(0x1ee)]('setActiveWeaponSet',_0x5143ae,_0x26c646);if(_0xeee475[_0xb8ea97(0xa07)]()[_0xb8ea97(0x7c2)]<0x0){if(_0xb8ea97(0x1f2)===_0xb8ea97(0x4ab)){function _0x1a09fa(){const _0x462d17=_0xb8ea97,_0xcae66=_0x58099a['inputtingAction'](),_0x45c8b8=this['actor'](this['index']());if(!_0xcae66)return!![];if(!_0xcae66[_0x462d17(0xa07)]())return!![];const _0x1993d4=_0xcae66['item']()[_0x462d17(0xaa8)];if(_0x1993d4[_0x462d17(0x2b2)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x45c8b8===_0xfa9441['actor']())return![];}return!![];}}else this[_0xb8ea97(0x7a7)](_0x5143ae,_0xeee475,_0x25d462);}else{if(_0xb8ea97(0x772)!==_0xb8ea97(0x44e))this[_0xb8ea97(0x522)](_0x5143ae,_0xeee475,_0x25d462);else{function _0x3ba682(){const _0x8d4f78=_0xb8ea97;if(_0x2d3b81[_0x8d4f78(0x502)]!==_0x266a0a)return _0x2769f9[_0x8d4f78(0x502)];if(this[_0x8d4f78(0x383)])return this[_0x8d4f78(0x383)];return this['_battleLayoutStyle']=_0x3d158b[_0x8d4f78(0x499)][_0x8d4f78(0x800)]['BattleLayout'][_0x8d4f78(0x843)]['toLowerCase']()['trim'](),this[_0x8d4f78(0x383)]==='sideview_ui'&&!_0x4cebc2[_0x8d4f78(0x35b)]&&(this[_0x8d4f78(0x383)]=_0x8d4f78(0x2f9)),this[_0x8d4f78(0x383)];}}}}_0xeee475[_0xb8ea97(0x53c)]()&&_0x5143ae[_0xb8ea97(0x4bb)]()&&this[_0xb8ea97(0x1ee)](_0xb8ea97(0x22c),_0x5143ae);this[_0xb8ea97(0x1ee)](_0xb8ea97(0x474),_0x5143ae,_0x25d462,![]);if(_0x5818f5){const _0x23ea58=_0x5143ae[_0xb8ea97(0x4f6)]();this[_0xb8ea97(0x1ee)](_0xb8ea97(0x6a8),[_0x5143ae],_0x199401,_0x3259d2),this[_0xb8ea97(0x1ee)](_0xb8ea97(0x347),_0x5143ae,_0x23ea58['_homeX'],_0x23ea58[_0xb8ea97(0x80e)],_0x3259d2,![],_0xb8ea97(0xb91)),this[_0xb8ea97(0x1ee)](_0xb8ea97(0x3b7),[_0x5143ae],_0xb8ea97(0xa0c)),this[_0xb8ea97(0x1ee)]('waitForMovement'),this[_0xb8ea97(0x1ee)](_0xb8ea97(0x3b7),[_0x5143ae],_0xb8ea97(0xb79));}},Window_BattleLog['prototype'][_0x4ca73a(0x401)]=function(_0x4718ec){const _0x212c45=_0x4ca73a;if(!_0x4718ec[_0x212c45(0x6f6)]())return![];if(!_0x4718ec['isForAll']())return![];if(!_0x4718ec[_0x212c45(0x4b8)]())return![];return VisuMZ[_0x212c45(0x499)][_0x212c45(0x800)][_0x212c45(0xb23)][_0x212c45(0x5ec)];},Window_BattleLog[_0x4ca73a(0x90a)]['autoMeleeMultiTargetActionSet']=function(_0x4dd7a2,_0x26ca80,_0x306683){const _0x530182=_0x4ca73a,_0x4732cb=_0x4dd7a2[_0x530182(0xb55)]()[_0x530182(0x298)]<0x2,_0xccb8=0x14,_0x565487=0x30;_0x4732cb&&(this['push'](_0x530182(0x6a8),[_0x4dd7a2],_0x565487,_0xccb8),this[_0x530182(0x1ee)](_0x530182(0x8c6),_0x4dd7a2,_0x306683,'front\x20center',_0xccb8,!![],_0x530182(0xb91),!![]),this[_0x530182(0x1ee)](_0x530182(0x3b7),[_0x4dd7a2],_0x530182(0xb79)),this[_0x530182(0x1ee)](_0x530182(0x530)));let _0x3466e5=_0x26ca80[_0x530182(0x53c)]()?this[_0x530182(0x8dd)](_0x4dd7a2):0x1;for(let _0x200b0c=0x0;_0x200b0c<_0x3466e5;_0x200b0c++){_0x26ca80[_0x530182(0x53c)]()&&_0x4dd7a2[_0x530182(0x4bb)]()&&this[_0x530182(0x1ee)](_0x530182(0x281),_0x4dd7a2,_0x200b0c),this[_0x530182(0x522)](_0x4dd7a2,_0x26ca80,_0x306683);}_0x26ca80[_0x530182(0x53c)]()&&_0x4dd7a2[_0x530182(0x4bb)]()&&this[_0x530182(0x1ee)](_0x530182(0x22c),_0x4dd7a2);this[_0x530182(0x1ee)](_0x530182(0x474),_0x4dd7a2,_0x306683,![]);if(_0x4732cb){const _0xfb4dbf=_0x4dd7a2[_0x530182(0x4f6)]();this['push'](_0x530182(0x6a8),[_0x4dd7a2],_0x565487,_0xccb8),this[_0x530182(0x1ee)]('performMoveToPoint',_0x4dd7a2,_0xfb4dbf[_0x530182(0x716)],_0xfb4dbf['_homeY'],_0xccb8,![],'Linear'),this[_0x530182(0x1ee)]('requestMotion',[_0x4dd7a2],_0x530182(0xa0c)),this[_0x530182(0x1ee)]('waitForMovement'),this[_0x530182(0x1ee)](_0x530182(0x3b7),[_0x4dd7a2],_0x530182(0xb79));}},Window_BattleLog[_0x4ca73a(0x90a)]['targetActionSet']=function(_0x1746d9,_0x562b1c,_0x3139a3){const _0x40649e=_0x4ca73a,_0x5b6c43=_0x562b1c[_0x40649e(0xa07)]();for(const _0x1bd2f9 of _0x3139a3){if(_0x40649e(0x361)!==_0x40649e(0x66a)){if(!_0x1bd2f9)continue;this[_0x40649e(0x1ee)]('performAction',_0x1746d9,_0x562b1c),this[_0x40649e(0x1ee)](_0x40649e(0x720),Sprite_Battler[_0x40649e(0xaf9)]),this[_0x40649e(0x1ee)](_0x40649e(0x2c0),_0x1746d9,[_0x1bd2f9],_0x5b6c43['animationId']),this[_0x40649e(0x1ee)](_0x40649e(0x720),0x18),this[_0x40649e(0x1ee)](_0x40649e(0x28c),_0x1746d9,_0x1bd2f9);}else{function _0x3bb902(){const _0x534153=_0x40649e;_0x47eddd[_0x534153(0x942)](this[_0x534153(0x9d8)]());}}}},Window_BattleLog['prototype']['wholeActionSet']=function(_0x6164a8,_0x5da7b7,_0x28fc8b){const _0x1ecacc=_0x4ca73a,_0x19caec=_0x5da7b7[_0x1ecacc(0xa07)]();this[_0x1ecacc(0x1ee)](_0x1ecacc(0x3d9),_0x6164a8,_0x5da7b7),this[_0x1ecacc(0x1ee)](_0x1ecacc(0x720),Sprite_Battler['_motionSpeed']),this['push']('showAnimation',_0x6164a8,_0x28fc8b[_0x1ecacc(0x91a)](),_0x19caec[_0x1ecacc(0x7c2)]),this[_0x1ecacc(0x1ee)]('waitForAnimation');for(const _0x4de920 of _0x28fc8b){if(_0x1ecacc(0x37d)===_0x1ecacc(0x37d)){if(!_0x4de920)continue;this[_0x1ecacc(0x1ee)]('actionEffect',_0x6164a8,_0x4de920);}else{function _0x56409b(){const _0x247c43=_0x1ecacc;this[_0x247c43(0x55a)](_0x2be0ca['toUpperCase']()[_0x247c43(0x7d2)]());}}}},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x1bf)]=function(_0x51cf12,_0x31a3ea,_0x228a06){const _0x25c2e1=_0x4ca73a,_0x56d03e=_0x31a3ea[_0x25c2e1(0xa07)]();this[_0x25c2e1(0x1ee)](_0x25c2e1(0x474),_0x51cf12,_0x228a06,![]),this['push'](_0x25c2e1(0x663)),this['push'](_0x25c2e1(0xa3a)),this[_0x25c2e1(0x1ee)](_0x25c2e1(0x1c1)),this[_0x25c2e1(0x1ee)]('performActionEnd',_0x51cf12),this['push'](_0x25c2e1(0x530));},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x510)]=function(_0x19b88b){},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x880)]=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x4ea)],Window_BattleLog['prototype'][_0x4ca73a(0x4ea)]=function(_0x26f0ee){const _0x1f8552=_0x4ca73a;if(!VisuMZ[_0x1f8552(0x499)][_0x1f8552(0x800)]['BattleLog'][_0x1f8552(0x9ec)])return;VisuMZ[_0x1f8552(0x499)][_0x1f8552(0x880)][_0x1f8552(0x37c)](this,_0x26f0ee);},Window_BattleLog['prototype']['displayCounter']=function(_0x4f86a4){const _0xec400d=_0x4ca73a;this[_0xec400d(0x1ee)]('performCounter',_0x4f86a4);VisuMZ[_0xec400d(0x499)][_0xec400d(0x800)][_0xec400d(0xb23)][_0xec400d(0x1ea)]&&this[_0xec400d(0x1ee)](_0xec400d(0x2c0),_0x4f86a4,[BattleManager[_0xec400d(0xb88)]],-0x1);if(!VisuMZ[_0xec400d(0x499)][_0xec400d(0x800)][_0xec400d(0x1b1)][_0xec400d(0x37e)])return;this[_0xec400d(0x1ee)](_0xec400d(0x807),TextManager[_0xec400d(0x5e1)][_0xec400d(0x26f)](_0x4f86a4[_0xec400d(0x491)]()));},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0xb6d)]=function(_0x1af657){const _0x2ac51f=_0x4ca73a;this['push'](_0x2ac51f(0xaca),_0x1af657);if(!VisuMZ[_0x2ac51f(0x499)]['Settings'][_0x2ac51f(0x1b1)][_0x2ac51f(0x9fb)])return;this['push'](_0x2ac51f(0x807),TextManager[_0x2ac51f(0x394)][_0x2ac51f(0x26f)](_0x1af657[_0x2ac51f(0x491)]()));},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x1d3)]=function(_0x2b84f8,_0x43f9c6){const _0x49db7a=_0x4ca73a;if(VisuMZ[_0x49db7a(0x499)]['Settings']['ActionSequence'][_0x49db7a(0xa5f)]){if(_0x49db7a(0xab8)!==_0x49db7a(0xab8)){function _0x41ad89(){const _0x45d486=_0x49db7a;this[_0x45d486(0xb63)]=this['_targets'][_0x45d486(0x7ef)](0x0),this[_0x45d486(0x6f5)]=0x0,this[_0x45d486(0xae2)]=this[_0x45d486(0xb63)][0x0]||null,this[_0x45d486(0x421)]='custom';}}else{const _0x179f20=_0x43f9c6[_0x49db7a(0xa07)]();this[_0x49db7a(0x1ee)]('showAnimation',_0x2b84f8,[_0x2b84f8],_0x179f20['animationId']);}}},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x95b)]=function(_0x18f62e,_0x19f8f2){const _0x405bdc=_0x4ca73a;this[_0x405bdc(0x1ee)](_0x405bdc(0x93a),_0x18f62e,_0x19f8f2);if(!VisuMZ[_0x405bdc(0x499)][_0x405bdc(0x800)]['BattleLog']['ShowSubstitute'])return;const _0x5bd83f=_0x18f62e[_0x405bdc(0x491)](),_0x3b93e1=TextManager[_0x405bdc(0x913)][_0x405bdc(0x26f)](_0x5bd83f,_0x19f8f2[_0x405bdc(0x491)]());this[_0x405bdc(0x1ee)](_0x405bdc(0x807),_0x3b93e1);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x65f)]=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x1dc)],Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x1dc)]=function(_0x562c6f){const _0x1ed1e9=_0x4ca73a;if(!VisuMZ[_0x1ed1e9(0x499)]['Settings'][_0x1ed1e9(0x1b1)][_0x1ed1e9(0x2ad)])return;VisuMZ[_0x1ed1e9(0x499)][_0x1ed1e9(0x65f)]['call'](this,_0x562c6f);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0xaf1)]=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x389)],Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x389)]=function(_0x3ca30d){const _0x37e663=_0x4ca73a;if(!VisuMZ[_0x37e663(0x499)][_0x37e663(0x800)][_0x37e663(0x1b1)]['ShowCritical'])return;VisuMZ[_0x37e663(0x499)]['Window_BattleLog_displayCritical'][_0x37e663(0x37c)](this,_0x3ca30d);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x34d)]=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0xb17)],Window_BattleLog[_0x4ca73a(0x90a)]['displayMiss']=function(_0x7fe71a){const _0x565d71=_0x4ca73a;if(!VisuMZ[_0x565d71(0x499)][_0x565d71(0x800)]['BattleLog'][_0x565d71(0x865)]){if(_0x565d71(0x6cf)===_0x565d71(0x6cf))this['push']('performMiss',_0x7fe71a);else{function _0x1a5db1(){const _0x53cb89=_0x565d71;return _0x12c259[_0x53cb89(0x4bb)]()?_0x4374a6[_0x53cb89(0x97a)]()['length']||0x1:0x1;}}}else{if(_0x565d71(0xaf2)==='meaWt'){function _0x919d84(){const _0x4f3a8b=_0x565d71;_0x1f8e7a[_0x4f3a8b(0x499)][_0x4f3a8b(0xb4c)][_0x4f3a8b(0x37c)](this,_0x4bb935);}}else VisuMZ[_0x565d71(0x499)][_0x565d71(0x34d)][_0x565d71(0x37c)](this,_0x7fe71a);}},VisuMZ['BattleCore']['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x4ca73a(0x90a)]['displayEvasion'],Window_BattleLog['prototype']['displayEvasion']=function(_0x35bcba){const _0x4faa8e=_0x4ca73a;!VisuMZ[_0x4faa8e(0x499)]['Settings'][_0x4faa8e(0x1b1)][_0x4faa8e(0x865)]?_0x35bcba[_0x4faa8e(0xa69)]()[_0x4faa8e(0x1f7)]?this[_0x4faa8e(0x1ee)]('performEvasion',_0x35bcba):this[_0x4faa8e(0x1ee)](_0x4faa8e(0x2db),_0x35bcba):VisuMZ['BattleCore'][_0x4faa8e(0x2d7)][_0x4faa8e(0x37c)](this,_0x35bcba);},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0xab9)]=function(_0x516dab){const _0x33aa44=_0x4ca73a;if(_0x516dab[_0x33aa44(0xa69)]()[_0x33aa44(0x72e)]){if(_0x516dab[_0x33aa44(0xa69)]()[_0x33aa44(0x7ab)]>0x0&&!_0x516dab[_0x33aa44(0xa69)]()[_0x33aa44(0x2ce)]){if('zXzai'===_0x33aa44(0x64a))this[_0x33aa44(0x1ee)]('performDamage',_0x516dab);else{function _0x4e2620(){const _0x4fb073=_0x33aa44;return _0x14c0dd[_0x4fb073(0x499)][_0x4fb073(0x800)][_0x4fb073(0x327)][_0x4fb073(0x47a)];}}}_0x516dab[_0x33aa44(0xa69)]()['hpDamage']<0x0&&this[_0x33aa44(0x1ee)](_0x33aa44(0x4a0),_0x516dab),VisuMZ[_0x33aa44(0x499)][_0x33aa44(0x800)][_0x33aa44(0x1b1)][_0x33aa44(0x7a9)]&&this[_0x33aa44(0x1ee)]('addText',this[_0x33aa44(0x9d7)](_0x516dab));}},VisuMZ['BattleCore']['Window_BattleLog_displayMpDamage']=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0xb64)],Window_BattleLog['prototype'][_0x4ca73a(0xb64)]=function(_0x3dbf4e){const _0x5e3ad1=_0x4ca73a;if(!VisuMZ[_0x5e3ad1(0x499)]['Settings']['BattleLog']['ShowMpDmg'])return;VisuMZ['BattleCore'][_0x5e3ad1(0x9c5)][_0x5e3ad1(0x37c)](this,_0x3dbf4e);},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x97c)]=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x516)],Window_BattleLog['prototype'][_0x4ca73a(0x516)]=function(_0x390288){const _0x8251c9=_0x4ca73a;if(!VisuMZ[_0x8251c9(0x499)]['Settings'][_0x8251c9(0x1b1)][_0x8251c9(0x4a3)])return;VisuMZ[_0x8251c9(0x499)]['Window_BattleLog_displayTpDamage'][_0x8251c9(0x37c)](this,_0x390288);},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x1c8)]=function(_0x270bf9){const _0x9f2511=_0x4ca73a,_0xd6104a=_0x270bf9[_0x9f2511(0xa69)](),_0x564c7f=_0xd6104a[_0x9f2511(0x81f)]();for(const _0x5786f5 of _0x564c7f){const _0x2c1362=_0x270bf9[_0x9f2511(0x4bb)]()?_0x5786f5['message1']:_0x5786f5[_0x9f2511(0x952)];_0x2c1362&&VisuMZ['BattleCore']['Settings'][_0x9f2511(0x1b1)]['ShowAddedState']&&(this[_0x9f2511(0x1ee)]('popBaseLine'),this[_0x9f2511(0x1ee)](_0x9f2511(0x2d9)),this['push'](_0x9f2511(0x807),_0x2c1362[_0x9f2511(0x26f)](_0x270bf9[_0x9f2511(0x491)]())),this[_0x9f2511(0x1ee)](_0x9f2511(0x591)));if(_0x5786f5['id']===_0x270bf9[_0x9f2511(0x49b)]()){if(_0x9f2511(0x9ff)!=='DPxPr'){function _0x41ddf7(){this['autoBattleUseSkills']=![];}}else this[_0x9f2511(0x1ee)](_0x9f2511(0xb7d),_0x270bf9);}}},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x77b)]=function(_0x2766ae){const _0x3218c4=_0x4ca73a;if(!VisuMZ[_0x3218c4(0x499)]['Settings'][_0x3218c4(0x1b1)][_0x3218c4(0x3c4)])return;const _0x5dfefb=_0x2766ae[_0x3218c4(0xa69)](),_0x45a9e3=_0x5dfefb[_0x3218c4(0x46a)]();for(const _0x1e201d of _0x45a9e3){if(_0x3218c4(0x6b5)!==_0x3218c4(0x6b5)){function _0x54f6dd(){return![];}}else{if(_0x1e201d['message4']){if(_0x3218c4(0x657)!==_0x3218c4(0x7a0))this[_0x3218c4(0x1ee)](_0x3218c4(0x4ad)),this['push'](_0x3218c4(0x2d9)),this[_0x3218c4(0x1ee)](_0x3218c4(0x807),_0x1e201d[_0x3218c4(0x5eb)][_0x3218c4(0x26f)](_0x2766ae[_0x3218c4(0x491)]())),this[_0x3218c4(0x1ee)]('wait');else{function _0x20042d(){const _0x5beb68=_0x3218c4;return _0xbef9d6[_0x5beb68(0xaa8)][_0x5beb68(0x2b2)](/<COMMAND ICON: (\d+)>/i)?_0x3d1742(_0x466885['$1']):_0x1af95b[_0x5beb68(0x549)];}}}}}},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x664)]=function(_0x5a723a){const _0xa5ac3f=_0x4ca73a,_0x19c3ea=VisuMZ['BattleCore'][_0xa5ac3f(0x800)][_0xa5ac3f(0x1b1)],_0x5d9d82=_0x5a723a[_0xa5ac3f(0xa69)]();if(_0x19c3ea[_0xa5ac3f(0xac1)])this[_0xa5ac3f(0x42c)](_0x5a723a,_0x5d9d82[_0xa5ac3f(0x1e0)],TextManager[_0xa5ac3f(0x536)]);if(_0x19c3ea[_0xa5ac3f(0x879)])this[_0xa5ac3f(0x42c)](_0x5a723a,_0x5d9d82[_0xa5ac3f(0x568)],TextManager[_0xa5ac3f(0x7ae)]);if(_0x19c3ea[_0xa5ac3f(0x799)])this[_0xa5ac3f(0x42c)](_0x5a723a,_0x5d9d82[_0xa5ac3f(0x9e0)],TextManager[_0xa5ac3f(0x518)]);},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x42c)]=function(_0x10029d,_0x4d3abc,_0x41e322){const _0x41b45d=_0x4ca73a;for(const _0x122c9a of _0x4d3abc){const _0x774c05=_0x41e322[_0x41b45d(0x26f)](_0x10029d[_0x41b45d(0x491)](),TextManager[_0x41b45d(0x629)](_0x122c9a));this[_0x41b45d(0x1ee)](_0x41b45d(0x4ad)),this[_0x41b45d(0x1ee)]('pushBaseLine'),this[_0x41b45d(0x1ee)](_0x41b45d(0x807),_0x774c05),this[_0x41b45d(0x1ee)](_0x41b45d(0x591));}},VisuMZ[_0x4ca73a(0x499)]['Window_BattleLog_clear']=Window_BattleLog[_0x4ca73a(0x90a)]['clear'],Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x1c1)]=function(){const _0x1879f4=_0x4ca73a;VisuMZ[_0x1879f4(0x499)]['Window_BattleLog_clear'][_0x1879f4(0x37c)](this),this['callNextMethod']();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x219)]=Window_BattleLog[_0x4ca73a(0x90a)]['pushBaseLine'],Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x2d9)]=function(){const _0x5071e5=_0x4ca73a;VisuMZ[_0x5071e5(0x499)][_0x5071e5(0x219)][_0x5071e5(0x37c)](this),this[_0x5071e5(0x1eb)]();},VisuMZ['BattleCore'][_0x4ca73a(0x482)]=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x4ad)],Window_BattleLog['prototype']['popBaseLine']=function(){const _0x347fa6=_0x4ca73a;VisuMZ['BattleCore'][_0x347fa6(0x482)]['call'](this),this['refresh'](),this[_0x347fa6(0x1eb)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x393)]=Window_BattleLog['prototype'][_0x4ca73a(0x4ff)],Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x4ff)]=function(_0x34b6ab){const _0x22f7f9=_0x4ca73a;VisuMZ['BattleCore'][_0x22f7f9(0x393)][_0x22f7f9(0x37c)](this,_0x34b6ab),this[_0x22f7f9(0x1eb)]();},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x663)]=function(){const _0x4b9ce1=_0x4ca73a;let _0x507aac=0x0;this['_baseLineStack'][_0x4b9ce1(0x73b)]>0x0&&(_0x507aac=this['_baseLineStack'][this[_0x4b9ce1(0x5d3)][_0x4b9ce1(0x73b)]-0x1]),this[_0x4b9ce1(0x6cc)][_0x4b9ce1(0x73b)]>_0x507aac?this[_0x4b9ce1(0x591)]():this[_0x4b9ce1(0x1eb)]();},VisuMZ['BattleCore'][_0x4ca73a(0x8c4)]=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x938)],Window_BattleLog['prototype'][_0x4ca73a(0x938)]=function(_0x2996dc,_0x5d5efc){const _0x42491c=_0x4ca73a;VisuMZ[_0x42491c(0x499)][_0x42491c(0x8c4)][_0x42491c(0x37c)](this,_0x2996dc,_0x5d5efc),this[_0x42491c(0x1eb)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x9af)]=Window_BattleLog[_0x4ca73a(0x90a)]['performAction'],Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x3d9)]=function(_0x56281d,_0x1920bf){const _0x45a466=_0x4ca73a;VisuMZ['BattleCore']['Window_BattleLog_performAction'][_0x45a466(0x37c)](this,_0x56281d,_0x1920bf),this[_0x45a466(0x1eb)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x430)]=Window_BattleLog['prototype'][_0x4ca73a(0x633)],Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x633)]=function(_0x54e597){const _0x2833de=_0x4ca73a;VisuMZ['BattleCore'][_0x2833de(0x430)][_0x2833de(0x37c)](this,_0x54e597);for(const _0x2dd2a4 of BattleManager[_0x2833de(0x501)]()){if(_0x2833de(0x402)!==_0x2833de(0x69a)){if(!_0x2dd2a4)continue;if(_0x2dd2a4[_0x2833de(0x6ee)]())continue;_0x2dd2a4[_0x2833de(0x251)]();}else{function _0x49389c(){const _0x116d47=_0x2833de;return _0x2ab308[_0x116d47(0x6c7)]()[this[_0x116d47(0xaa2)]];}}}this[_0x2833de(0x1eb)]();},VisuMZ[_0x4ca73a(0x499)]['Window_BattleLog_performDamage']=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x662)],Window_BattleLog['prototype'][_0x4ca73a(0x662)]=function(_0x2fe22d){const _0x1ecef4=_0x4ca73a;VisuMZ['BattleCore']['Window_BattleLog_performDamage']['call'](this,_0x2fe22d),this[_0x1ecef4(0x1eb)]();},VisuMZ[_0x4ca73a(0x499)]['Window_BattleLog_performMiss']=Window_BattleLog[_0x4ca73a(0x90a)]['performMiss'],Window_BattleLog[_0x4ca73a(0x90a)]['performMiss']=function(_0x4f2f72){const _0x48fe2d=_0x4ca73a;VisuMZ['BattleCore'][_0x48fe2d(0x505)][_0x48fe2d(0x37c)](this,_0x4f2f72),this[_0x48fe2d(0x1eb)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x855)]=Window_BattleLog[_0x4ca73a(0x90a)]['performRecovery'],Window_BattleLog[_0x4ca73a(0x90a)]['performRecovery']=function(_0x53e166){const _0x281839=_0x4ca73a;VisuMZ[_0x281839(0x499)][_0x281839(0x855)]['call'](this,_0x53e166),this[_0x281839(0x1eb)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x6f2)]=Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x556)],Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x556)]=function(_0x182f4c){const _0x2c78c4=_0x4ca73a;VisuMZ[_0x2c78c4(0x499)]['Window_BattleLog_performEvasion'][_0x2c78c4(0x37c)](this,_0x182f4c),this[_0x2c78c4(0x1eb)]();},VisuMZ['BattleCore'][_0x4ca73a(0xae1)]=Window_BattleLog[_0x4ca73a(0x90a)]['performMagicEvasion'],Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x2db)]=function(_0x349f5b){const _0x5f5645=_0x4ca73a;VisuMZ[_0x5f5645(0x499)][_0x5f5645(0xae1)]['call'](this,_0x349f5b),this[_0x5f5645(0x1eb)]();},VisuMZ[_0x4ca73a(0x499)]['Window_BattleLog_performCounter']=Window_BattleLog['prototype'][_0x4ca73a(0x4a8)],Window_BattleLog['prototype'][_0x4ca73a(0x4a8)]=function(_0xab5681){const _0x82f41c=_0x4ca73a;VisuMZ[_0x82f41c(0x499)]['Window_BattleLog_performCounter']['call'](this,_0xab5681),this[_0x82f41c(0x1eb)]();},VisuMZ['BattleCore'][_0x4ca73a(0x4ca)]=Window_BattleLog[_0x4ca73a(0x90a)]['performReflection'],Window_BattleLog[_0x4ca73a(0x90a)]['performReflection']=function(_0x83f35c){const _0x2b7573=_0x4ca73a;VisuMZ[_0x2b7573(0x499)][_0x2b7573(0x4ca)][_0x2b7573(0x37c)](this,_0x83f35c),this[_0x2b7573(0x1eb)]();},VisuMZ['BattleCore'][_0x4ca73a(0x431)]=Window_BattleLog[_0x4ca73a(0x90a)]['performSubstitute'],Window_BattleLog['prototype'][_0x4ca73a(0x93a)]=function(_0x185942,_0x413ccb){const _0x1446c0=_0x4ca73a;VisuMZ[_0x1446c0(0x499)][_0x1446c0(0x431)][_0x1446c0(0x37c)](this,_0x185942,_0x413ccb),this[_0x1446c0(0x1eb)]();},VisuMZ[_0x4ca73a(0x499)][_0x4ca73a(0x692)]=Window_BattleLog['prototype'][_0x4ca73a(0xb7d)],Window_BattleLog['prototype']['performCollapse']=function(_0x1586cc){const _0x421711=_0x4ca73a;VisuMZ[_0x421711(0x499)][_0x421711(0x692)]['call'](this,_0x1586cc),this['callNextMethod']();},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x3c8)]=function(_0x56452a,_0x1cfe00){const _0x18f211=_0x4ca73a;_0x56452a[_0x18f211(0x3c8)](_0x1cfe00),this['callNextMethod']();},Window_BattleLog['prototype'][_0x4ca73a(0x255)]=function(_0x325bf4,_0x35fef2){const _0xb243ef=_0x4ca73a,_0x14ee59=_0x325bf4[_0xb243ef(0x86e)]();_0x14ee59<=0x0?SoundManager[_0xb243ef(0x299)]():this[_0xb243ef(0x7b2)](_0x35fef2,_0x14ee59);},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x474)]=function(_0x10de5a,_0x1e25f4,_0x236c01){const _0x1abfbc=_0x4ca73a,_0x91728f=[_0x10de5a][_0x1abfbc(0x4b0)](_0x1e25f4);for(const _0x14b119 of _0x91728f){if(_0x1abfbc(0x2f2)===_0x1abfbc(0x614)){function _0x4b3d72(){const _0x569378=_0x1abfbc,_0x61d9e1=_0x195d8d[_0x569378(0x499)]['Settings']['BattleLayout'],_0x1e8cec=_0x4df77a[_0x569378(0x90a)][_0x569378(0x857)](),_0x8374f=_0x1d29cf[_0x569378(0x83e)]-(_0x61d9e1[_0x569378(0x23b)]||0xc0),_0x1aaf38=this[_0x569378(0x5cd)]()+_0x1e8cec,_0x3cdbd8=this[_0x569378(0xa51)]()?0x0:_0x2e14e6[_0x569378(0x83e)]-_0x8374f,_0x5518e7=_0x2c00db[_0x569378(0x6cb)]-_0x1aaf38+_0x1e8cec;return new _0x467d28(_0x3cdbd8,_0x5518e7,_0x8374f,_0x1aaf38);}}else{if(!_0x14b119)continue;_0x14b119[_0x1abfbc(0x381)](_0x236c01);}}this[_0x1abfbc(0x1eb)]();},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x720)]=function(_0x38d4b0){this['_waitCount']=_0x38d4b0;},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x3b7)]=function(_0x1bd4c4,_0x4aaa03){const _0x483c77=_0x4ca73a;for(const _0x323100 of _0x1bd4c4){if(!_0x323100)continue;_0x323100[_0x483c77(0x3b7)](_0x4aaa03);}this[_0x483c77(0x1eb)]();},Window_BattleLog['prototype'][_0x4ca73a(0x347)]=function(_0x120b82,_0x458c41,_0x102975,_0x486d1c,_0x239ab6,_0x558d85){const _0x477c91=_0x4ca73a;_0x120b82[_0x477c91(0xa02)](_0x458c41,_0x102975,_0x486d1c,_0x239ab6,_0x558d85,-0x1),this[_0x477c91(0x1eb)]();},Window_BattleLog[_0x4ca73a(0x90a)][_0x4ca73a(0x8c6)]=function(_0x14bef2,_0x2af068,_0x4682a9,_0x3dae8a,_0x278777,_0x1f1fba,_0xdcdeee){const _0x3c238d=_0x4ca73a,_0x4c0b6b=Math[_0x3c238d(0x455)](..._0x2af068[_0x3c238d(0x8f9)](_0x168918=>_0x168918[_0x3c238d(0x4f6)]()['_baseX']-_0x168918['battler']()['mainSpriteWidth']()/0x2)),_0x30686b=Math[_0x3c238d(0x826)](..._0x2af068['map'](_0x476f54=>_0x476f54[_0x3c238d(0x4f6)]()[_0x3c238d(0x9e9)]+_0x476f54[_0x3c238d(0x4f6)]()[_0x3c238d(0x745)]()/0x2)),_0x46fe88=Math[_0x3c238d(0x455)](..._0x2af068['map'](_0x1cfd71=>_0x1cfd71[_0x3c238d(0x4f6)]()[_0x3c238d(0xa56)]-_0x1cfd71[_0x3c238d(0x4f6)]()[_0x3c238d(0x60a)]())),_0xbdf24e=Math[_0x3c238d(0x826)](..._0x2af068[_0x3c238d(0x8f9)](_0x21d204=>_0x21d204[_0x3c238d(0x4f6)]()[_0x3c238d(0xa56)])),_0x470a53=_0x2af068[_0x3c238d(0x5be)](_0x47f019=>_0x47f019[_0x3c238d(0x4bb)]())[_0x3c238d(0x73b)],_0x54eddc=_0x2af068[_0x3c238d(0x5be)](_0x15d8ae=>_0x15d8ae[_0x3c238d(0xa95)]())[_0x3c238d(0x73b)];let _0x4f1f31=0x0,_0x2f87ab=0x0;if(_0x4682a9[_0x3c238d(0x2b2)](/front/i))_0x4f1f31=_0x470a53>=_0x54eddc?_0x4c0b6b:_0x30686b;else{if(_0x4682a9[_0x3c238d(0x2b2)](/middle/i)){if(_0x3c238d(0x4c0)!=='RAwRW')_0x4f1f31=(_0x4c0b6b+_0x30686b)/0x2,_0xdcdeee=-0x1;else{function _0x15a666(){const _0x27c245=_0x3c238d;this['_svBattlerSprite'][_0x27c245(0x538)]['scale']['x']=-0x1/(this[_0x27c245(0xaed)]['x']||0.001),this['_svBattlerSprite'][_0x27c245(0x538)][_0x27c245(0xaed)]['y']=0x1/(this[_0x27c245(0xaed)]['y']||0.001);}}}else{if(_0x4682a9[_0x3c238d(0x2b2)](/back/i)){if(_0x3c238d(0x859)!==_0x3c238d(0x859)){function _0x4f1c28(){const _0x1992bc=_0x3c238d;if(!this[_0x1992bc(0xa68)]())return;_0x4cbae1[_0x1992bc(0x6c6)]()?this['x']=_0x4e4b9d[_0x1992bc(0x83e)]-this['enemy']()[_0x1992bc(0x4f6)]()[_0x1992bc(0x9e9)]:this['x']=this[_0x1992bc(0xa68)]()[_0x1992bc(0x4f6)]()[_0x1992bc(0x9e9)];this['x']-=_0x4cdba6[_0x1992bc(0x555)](this[_0x1992bc(0x781)]/0x2),this['y']=this[_0x1992bc(0xa68)]()['battler']()[_0x1992bc(0xa56)]-_0x29595d[_0x1992bc(0x555)](this[_0x1992bc(0x935)]()*1.5);const _0x2ddba0=_0xdc16e3[_0x1992bc(0x499)][_0x1992bc(0x800)][_0x1992bc(0xa94)];this['x']+=_0x2ddba0['NameOffsetX']||0x0,this['y']+=_0x2ddba0[_0x1992bc(0x811)]||0x0;}}else _0x4f1f31=_0x470a53>=_0x54eddc?_0x30686b:_0x4c0b6b;}}}if(_0x4682a9[_0x3c238d(0x2b2)](/head/i))_0x2f87ab=_0x46fe88;else{if(_0x4682a9[_0x3c238d(0x2b2)](/center/i))_0x2f87ab=(_0x46fe88+_0xbdf24e)/0x2;else _0x4682a9['match'](/base/i)&&(_0x2f87ab=_0xbdf24e);}_0x14bef2[_0x3c238d(0xa02)](_0x4f1f31,_0x2f87ab,_0x3dae8a,_0x278777,_0x1f1fba,_0xdcdeee),this[_0x3c238d(0x1eb)]();},Window_BattleLog[_0x4ca73a(0x90a)]['performJump']=function(_0x4097e6,_0x479e95,_0x369248){const _0x486c4b=_0x4ca73a;for(const _0x2cebad of _0x4097e6){if(!_0x2cebad)continue;_0x2cebad[_0x486c4b(0x624)](_0x479e95,_0x369248);}this[_0x486c4b(0x1eb)]();};